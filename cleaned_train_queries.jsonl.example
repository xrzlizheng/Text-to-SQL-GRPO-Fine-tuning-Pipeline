{"sql_prompt": "What are the names and capacities of all wind farms in the USA?", "sql": "SELECT name, capacity FROM wind_farms WHERE country = 'USA'", "sql_context": "CREATE TABLE wind_farms (name TEXT, capacity INTEGER, country TEXT); INSERT INTO wind_farms (name, capacity, country) VALUES ('Wind Farm 1', 100, 'USA'), ('Wind Farm 2', 200, 'USA');"}
{"sql_prompt": "Identify the top 3 explainable AI algorithms with the highest algorithmic fairness score in the Asia-Pacific region.", "sql": "SELECT algorithm_name, fairness_score FROM (SELECT algorithm_name, fairness_score, ROW_NUMBER() OVER (PARTITION BY region ORDER BY fairness_score DESC) as rank FROM ExplainableAI WHERE region = 'Asia-Pacific') subquery WHERE rank <= 3;", "sql_context": "CREATE TABLE ExplainableAI (algorithm_id INT, algorithm_name VARCHAR(255), region VARCHAR(255), fairness_score DECIMAL(5,2)); INSERT INTO ExplainableAI (algorithm_id, algorithm_name, region, fairness_score) VALUES (1, 'TransparentNet', 'Australia', 88.3), (2, 'FairLearner', 'China', 82.6), (3, 'JustifyML', 'Japan', 91.7), (4, 'AccountableAlgo', 'India', 85.2), (5, 'ClearBox', 'South Korea', 94.5);"}
{"sql_prompt": "Which pollution control initiatives have been implemented in the Pacific Ocean?", "sql": "SELECT initiative_name FROM pollution_control_initiatives WHERE region = 'Pacific Ocean';", "sql_context": "CREATE TABLE pollution_control_initiatives (id INT, initiative_name TEXT, region TEXT); INSERT INTO pollution_control_initiatives (id, initiative_name, region) VALUES (1, 'Project Ocean Clean', 'Pacific Ocean'), (2, 'Marine Life Protection Act', 'California Coast'), (3, 'Clean Seas Campaign', 'Mediterranean Sea');"}
{"sql_prompt": "What is the total number of schools and their average budget in Florida and Texas?", "sql": "SELECT COUNT(*) as total_schools, AVG(budget) as avg_budget FROM schools WHERE state IN ('Florida', 'Texas');", "sql_context": "CREATE TABLE schools (name TEXT, budget INTEGER, state TEXT); INSERT INTO schools (name, budget, state) VALUES ('SchoolA', 5000, 'Florida'), ('SchoolB', 6000, 'Florida'), ('SchoolC', 7000, 'Florida'), ('SchoolD', 8000, 'Texas'), ('SchoolE', 9000, 'Texas'), ('SchoolF', 10000, 'Texas');"}
{"sql_prompt": "How many attendees identified as Hispanic or Latino at the 'Cultural Diversity Festival' in Los Angeles?", "sql": "SELECT SUM(attendees) FROM demographics WHERE event_name = 'Cultural Diversity Festival' AND city = 'Los Angeles' AND ethnicity = 'Hispanic or Latino';", "sql_context": "CREATE TABLE demographics (event_name VARCHAR(50), city VARCHAR(50), ethnicity VARCHAR(20), attendees INT); INSERT INTO demographics (event_name, city, ethnicity, attendees) VALUES ('Cultural Diversity Festival', 'Los Angeles', 'Hispanic or Latino', 300);"}
{"sql_prompt": "How many public pools are there in the Southwest region?", "sql": "SELECT COUNT(*) FROM Pool WHERE Region = 'Southwest' AND Type = 'Public';", "sql_context": "CREATE TABLE Pool (Name VARCHAR(255), Region VARCHAR(255), Type VARCHAR(255)); INSERT INTO Pool (Name, Region, Type) VALUES ('Southwest Community Pool', 'Southwest', 'Public'), ('Northeast Community Pool', 'Northeast', 'Public'), ('Southeast Community Pool', 'Southeast', 'Public'), ('Northwest Community Pool', 'Northwest', 'Public');"}
{"sql_prompt": "How many teachers have participated in professional development programs in each district?", "sql": "SELECT district_id, COUNT(teacher_id) as num_teachers FROM teachers WHERE professional_development = true GROUP BY district_id;", "sql_context": "CREATE TABLE teachers (teacher_id INT, district_id INT, professional_development BOOLEAN);"}
{"sql_prompt": "Which countries have launched the most satellites to Sun-Synchronous Orbit?", "sql": "SELECT country, COUNT(*) FROM satellites_sunsync WHERE orbit = 'Sun-Synchronous Orbit' GROUP BY country ORDER BY COUNT(*) DESC;", "sql_context": "CREATE TABLE satellites_sunsync (id INT, name VARCHAR(50), country VARCHAR(50), orbit VARCHAR(50), launch_date DATE); INSERT INTO satellites_sunsync (id, name, country, orbit, launch_date) VALUES (1, 'Landsat 9', 'USA', 'Sun-Synchronous Orbit', '2021-09-27'); INSERT INTO satellites_sunsync (id, name, country, orbit, launch_date) VALUES (2, 'Resource-P 4', 'Russia', 'Sun-Synchronous Orbit', '2022-06-25');"}
{"sql_prompt": "What is the minimum number of publications by male graduate students in the Computer Science program?", "sql": "SELECT MIN(Publications) FROM GraduateStudents WHERE Program = 'Computer Science' AND Gender = 'Male';", "sql_context": "CREATE TABLE GraduateStudents(Id INT, Name VARCHAR(100), Program VARCHAR(50), Publications INT, Gender VARCHAR(10)); INSERT INTO GraduateStudents(Id, Name, Program, Publications, Gender) VALUES (1, 'William', 'Computer Science', 1, 'Male'), (2, 'Xavier', 'Computer Science', 2, 'Male');"}
{"sql_prompt": "How many policies of each type and coverage level does the company offer?", "sql": "SELECT policy_type, coverage_level, COUNT(*) FROM policies GROUP BY policy_type, coverage_level;", "sql_context": "CREATE TABLE policies (id INT, policy_type VARCHAR(20), coverage_level INT, price FLOAT); INSERT INTO policies (id, policy_type, coverage_level, price) VALUES (1, 'Comprehensive', 1, 900.00), (2, 'Third-Party', 1, 600.00), (3, 'Comprehensive', 2, 1100.00), (4, 'Third-Party', 2, 700.00), (5, 'Comprehensive', 3, 1200.00), (6, 'Third-Party', 3, 1000.00);"}
{"sql_prompt": "What is the average age of users who liked post 12345 in the music category?", "sql": "SELECT AVG(users.age) FROM users INNER JOIN post_likes ON users.user_id = post_likes.user_id WHERE post_likes.post_id = 12345 AND post_likes.category = 'music';", "sql_context": "CREATE TABLE users (user_id INT, age INT, gender VARCHAR(10)); INSERT INTO users (user_id, age, gender) VALUES (1, 25, 'Female'), (2, 35, 'Male'), (3, 22, 'Female'); CREATE TABLE post_likes (like_id INT, user_id INT, post_id INT, category VARCHAR(20)); INSERT INTO post_likes (like_id, user_id, post_id, category) VALUES (1, 1, 12345, 'music'), (2, 2, 12345, 'music'), (3, 3, 67890, 'sports');"}
{"sql_prompt": "What is the number of 'women-led community development initiatives' in 'rural India' that have been implemented since 2015?", "sql": "SELECT COUNT(initiatives.id) FROM initiatives WHERE initiatives.region = 'rural India' AND initiatives.leader LIKE 'Ms.%' AND initiatives.start_date >= '2015-01-01';", "sql_context": "CREATE TABLE initiatives (id INT, name TEXT, region TEXT, leader TEXT, start_date DATE); INSERT INTO initiatives (id, name, region, leader, start_date) VALUES (1, 'Initiative 1', 'rural India', 'Ms. Patel', '2015-01-01'), (2, 'Initiative 2', 'rural India', 'Mr. Patel', '2016-01-01'), (3, 'Initiative 3', 'urban India', 'Ms. Gupta', '2015-01-01');"}
{"sql_prompt": "What is the total claim amount for policies in 'TX'?", "sql": "SELECT SUM(total_claims) FROM policyholders WHERE state = 'TX';", "sql_context": "CREATE TABLE policyholders (id INT, name TEXT, city TEXT, state TEXT, total_claims INT); INSERT INTO policyholders (id, name, city, state, total_claims) VALUES (1, 'John Doe', 'Oakland', 'CA', 800); INSERT INTO policyholders (id, name, city, state, total_claims) VALUES (2, 'Jane Smith', 'San Francisco', 'CA', 1200); INSERT INTO policyholders (id, name, city, state, total_claims) VALUES (3, 'Maria Garcia', 'Houston', 'TX', 1500); CREATE TABLE claims (id INT, policyholder_id INT, amount INT); INSERT INTO claims (id, policyholder_id, amount) VALUES (1, 1, 500); INSERT INTO claims (id, policyholder_id, amount) VALUES (2, 1, 300); INSERT INTO claims (id, policyholder_id, amount) VALUES (3, 2, 700); INSERT INTO claims (id, policyholder_id, amount) VALUES (4, 3, 800);"}
{"sql_prompt": "What is the total water usage in the first half of the year compared to the second half?", "sql": "SELECT SUM(CASE WHEN month <= 6 THEN usage ELSE 0 END) as first_half, SUM(CASE WHEN month > 6 THEN usage ELSE 0 END) as second_half FROM monthly_water_usage;", "sql_context": "CREATE TABLE monthly_water_usage (month INT, usage INT);   INSERT INTO monthly_water_usage (month, usage) VALUES (1, 1000), (2, 1500), (3, 1200), (4, 1800), (5, 2000), (6, 2500), (7, 1500), (8, 1200), (9, 1000), (10, 1400), (11, 1800), (12, 2000);"}
{"sql_prompt": "How many research vessels are in the Pacific Ocean?", "sql": "SELECT COUNT(*) FROM research_vessels WHERE location = 'Pacific Ocean';", "sql_context": "CREATE TABLE research_vessels (vessel_name VARCHAR(255), location VARCHAR(255)); INSERT INTO research_vessels (vessel_name, location) VALUES ('Thompson', 'Pacific Ocean'), ('Franklin', 'Atlantic Ocean');"}
{"sql_prompt": "What is the average donation amount per donor for the 'Disaster Relief' program?", "sql": "SELECT AVG(donation_amount) FROM disaster_relief_donors WHERE program = 'Disaster Relief';", "sql_context": "CREATE TABLE disaster_relief_donors (id INT, donor_name TEXT, program TEXT, donation_amount DECIMAL); INSERT INTO disaster_relief_donors (id, donor_name, program, donation_amount) VALUES (1, 'Grace', 'Disaster Relief', 100.00); INSERT INTO disaster_relief_donors (id, donor_name, program, donation_amount) VALUES (2, 'Hannah', 'Disaster Relief', 150.00);"}
{"sql_prompt": "Find the number of male and female patients in the 'patients' table, separated by sex.", "sql": "SELECT sex, COUNT(*) FROM patients GROUP BY sex;", "sql_context": "CREATE TABLE patients (id INT, name VARCHAR(50), sex VARCHAR(10), dob DATE);INSERT INTO patients (id, name, sex, dob) VALUES (1, 'John Doe', 'Male', '1980-01-01'); INSERT INTO patients (id, name, sex, dob) VALUES (2, 'Jane Smith', 'Female', '1990-02-02');"}
{"sql_prompt": "How many patients have been treated with meditation for PTSD in California?", "sql": "SELECT COUNT(*) FROM patients JOIN therapists ON patients.therapist_id = therapists.therapist_id WHERE patients.condition = 'PTSD' AND patients.treatment = 'Meditation' AND therapists.state = 'California';", "sql_context": "CREATE TABLE patients (patient_id INT, patient_name TEXT, condition TEXT, therapist_id INT, treatment TEXT); INSERT INTO patients (patient_id, patient_name, condition, therapist_id, treatment) VALUES (1, 'James Johnson', 'PTSD', 1, 'Meditation'); INSERT INTO patients (patient_id, patient_name, condition, therapist_id, treatment) VALUES (2, 'Sophia Lee', 'PTSD', 1, 'Medication'); CREATE TABLE therapists (therapist_id INT, therapist_name TEXT, state TEXT); INSERT INTO therapists (therapist_id, therapist_name, state) VALUES (1, 'Dr. Maria Rodriguez', 'California');"}
{"sql_prompt": "Add new compliance data for 'Oregon'", "sql": "INSERT INTO compliance (id, state, violation, date) VALUES (2, 'Oregon', 'Improper Labeling', '2021-03-15');", "sql_context": "CREATE TABLE compliance (id INT, state TEXT, violation TEXT, date DATE); INSERT INTO compliance (id, state, violation, date) VALUES (1, 'California', 'Pesticide Use', '2021-02-01');"}
{"sql_prompt": "What is the total calorie count for each type of cuisine?", "sql": "SELECT CuisineType, SUM(CalorieCount) as total_calories FROM Cuisines C JOIN Meals M ON C.CuisineID = M.CuisineID GROUP BY CuisineType;", "sql_context": "CREATE TABLE Cuisines (CuisineID INT, CuisineType VARCHAR(50)); CREATE TABLE Meals (MealID INT, CuisineID INT, MealName VARCHAR(50), CalorieCount INT); INSERT INTO Cuisines (CuisineID, CuisineType) VALUES (1, 'American'), (2, 'Italian'); INSERT INTO Meals (MealID, CuisineID, MealName, CalorieCount) VALUES (1, 1, 'Classic Burger', 550), (2, 1, 'Turkey Sandwich', 700), (3, 2, 'Margherita Pizza', 800), (4, 2, 'Spaghetti Bolognese', 1000);"}
{"sql_prompt": "What is the maximum trip duration for shared bicycles in 'New York'?", "sql": "SELECT MAX(duration) FROM Trips JOIN Vehicles ON Trips.vehicle_id = Vehicles.id WHERE Vehicles.type = 'Shared Bicycle' AND Vehicles.city_id = (SELECT id FROM Cities WHERE name = 'New York');", "sql_context": "CREATE TABLE if not exists Cities (id int, name text); INSERT INTO Cities (id, name) VALUES (1, 'Los Angeles'), (2, 'New York'); CREATE TABLE if not exists Vehicles (id int, type text, capacity int, city_id int); INSERT INTO Vehicles (id, type, capacity, city_id) VALUES (1, 'Electric Bus', 50, 1), (2, 'Diesel Bus', 60, 1), (3, 'Electric Bus', 40, 2), (4, 'Shared Bicycle', 1, 2); CREATE TABLE if not exists Trips (id int, vehicle_id int, duration int); INSERT INTO Trips (id, vehicle_id, duration) VALUES (1, 1, 120), (2, 1, 180), (3, 2, 210), (4, 3, 150), (5, 4, 100), (6, 4, 130);"}
{"sql_prompt": "Identify dishes with an average price above the overall average price.", "sql": "SELECT dish, category, price FROM menu WHERE price > (SELECT AVG(price) FROM menu);", "sql_context": "CREATE TABLE menu(dish VARCHAR(255), category VARCHAR(255), price DECIMAL(5,2)); INSERT INTO menu(dish, category, price) VALUES ('Tofu Stir Fry', 'Starter', 9.99), ('Lentil Soup', 'Starter', 7.99), ('Chickpea Curry', 'Main', 12.99), ('Tofu Curry', 'Main', 13.99), ('Quinoa Salad', 'Side', 6.99);"}
{"sql_prompt": "Which agencies have spent exactly the overall average budget, displayed in alphabetical order?", "sql": "SELECT agency_name FROM agencies WHERE budget = (SELECT AVG(budget) FROM agencies) ORDER BY agency_name ASC;", "sql_context": "CREATE TABLE agencies (agency_name TEXT, budget INT); INSERT INTO agencies (agency_name, budget) VALUES ('Agency1', 1000000), ('Agency2', 1000000), ('Agency3', 1200000), ('Agency4', 800000), ('Agency5', 1000000);"}
{"sql_prompt": "What is the average carbon offset per project for renewable energy projects in the European Union?", "sql": "SELECT AVG(carbon_offset) FROM carbon_offsets JOIN eu_projects ON carbon_offsets.project_id = eu_projects.project_id WHERE country_name IN ('Germany', 'France', 'Spain');", "sql_context": "CREATE TABLE carbon_offsets (project_id INT, country_name VARCHAR(50), carbon_offset INT); INSERT INTO carbon_offsets (project_id, country_name, carbon_offset) VALUES (1, 'Germany', 5000), (2, 'France', 7000), (3, 'Spain', 6000); CREATE TABLE eu_projects (project_id INT, project_name VARCHAR(100)); INSERT INTO eu_projects (project_id, project_name) VALUES (1, 'EU Project A'), (2, 'EU Project B'), (3, 'EU Project C');"}
{"sql_prompt": "How many wheelchair accessible vehicles are there in the fleet?", "sql": "SELECT COUNT(*) FROM vehicles WHERE is_wheelchair_accessible = true;", "sql_context": "CREATE TABLE vehicles (vehicle_id varchar(255), vehicle_type varchar(255), is_wheelchair_accessible boolean); INSERT INTO vehicles (vehicle_id, vehicle_type, is_wheelchair_accessible) VALUES ('V1', 'Bus', true), ('V2', 'Bus', false), ('V3', 'Train', false), ('V4', 'Tram', true);"}
{"sql_prompt": "What is the distribution of social good technology programs by region and budget?", "sql": "SELECT region, program, AVG(budget) as avg_budget FROM Social_Good_Programs_Region GROUP BY region, program;", "sql_context": "CREATE TABLE Social_Good_Programs_Region (region VARCHAR(255), program VARCHAR(255), budget INT); INSERT INTO Social_Good_Programs_Region (region, program, budget) VALUES ('Asia', 'Education for All', 1000000), ('Africa', 'Clean Water Initiative', 500000), ('South America', 'Green Energy', 300000), ('Europe', 'Affordable Internet', 800000), ('North America', 'Healthcare for All', 1200000);"}
{"sql_prompt": "Update the 'humidity' value to 80% in the 'Plot4' on 2022-10-31.", "sql": "UPDATE Plot4 SET humidity = 80 WHERE date = '2022-10-31';", "sql_context": "CREATE TABLE Plot4 (date DATE, humidity FLOAT);"}
{"sql_prompt": "List all countries involved in marine life research in the 'Pacific' and 'Atlantic' regions.", "sql": "SELECT DISTINCT country FROM marine_life_research WHERE region IN ('Pacific', 'Atlantic');", "sql_context": "CREATE TABLE marine_life_research (id INT, country TEXT, region TEXT);INSERT INTO marine_life_research (id, country, region) VALUES (1, 'India', 'Indian'), (2, 'Indonesia', 'Indian'), (3, 'Australia', 'Pacific'), (4, 'Canada', 'Atlantic'), (5, 'USA', 'Atlantic');"}
{"sql_prompt": "What is the total number of emergency responses and disaster recovery efforts in each region, separated by type and sorted by total cost in descending order?", "sql": "SELECT R.Name, ER.Type, SUM(ER.Cost) + SUM(DR.Cost) AS TotalCost FROM Regions R LEFT JOIN EmergencyResponses ER ON R.RId = ER.RId LEFT JOIN DisasterRecovery DR ON R.RId = DR.RId GROUP BY R.Name, ER.Type ORDER BY TotalCost DESC;", "sql_context": "CREATE TABLE Regions (RId INT, Name VARCHAR(50)); CREATE TABLE EmergencyResponses (ResponseId INT, RId INT, Type VARCHAR(50), Cost INT); CREATE TABLE DisasterRecovery (RecoveryId INT, RId INT, Type VARCHAR(50), Cost INT);"}
{"sql_prompt": "How many graduate students are there in the Computer Science department?", "sql": "SELECT COUNT(*) FROM students WHERE department = 'Computer Science' AND graduate_student = 'Yes';", "sql_context": "CREATE TABLE students (id INT, name VARCHAR(50), gender VARCHAR(10), department VARCHAR(50), graduate_student VARCHAR(50)); INSERT INTO students (id, name, gender, department, graduate_student) VALUES (1, 'Alice', 'Female', 'Computer Science', 'Yes'), (2, 'Bob', 'Male', 'Computer Science', 'No'), (3, 'Charlie', 'Non-binary', 'Computer Science', 'Yes');"}
{"sql_prompt": "Update the city of a citizen with a specific id in the 'Citizens' table", "sql": "UPDATE Citizens SET city = 'New York' WHERE citizen_id = 2;", "sql_context": "CREATE TABLE Citizens (citizen_id INT, name VARCHAR(50), age INT, city VARCHAR(50));"}
{"sql_prompt": "Count the number of anxiety patients who have participated in online therapy sessions in the US.", "sql": "SELECT COUNT(patients.patient_id) FROM patients JOIN therapy_sessions ON patients.patient_id = therapy_sessions.patient_id WHERE patients.condition = 'Anxiety' AND patients.country = 'USA' AND therapy_sessions.session_type = 'Online';", "sql_context": "CREATE TABLE patients (patient_id INT, patient_name VARCHAR(50), condition VARCHAR(50), country VARCHAR(50)); INSERT INTO patients (patient_id, patient_name, condition, country) VALUES (1, 'John Doe', 'Anxiety', 'USA'); CREATE TABLE therapy_sessions (session_id INT, patient_id INT, session_type VARCHAR(50)); INSERT INTO therapy_sessions (session_id, patient_id, session_type) VALUES (1, 1, 'Online');"}
{"sql_prompt": "Find the top 5 models with the highest fairness score, for models trained on the 'Europe' or 'North America' regions.", "sql": "SELECT model_id, fairness_score FROM (SELECT model_id, fairness_score, region_id, ROW_NUMBER() OVER (PARTITION BY region_id ORDER BY fairness_score DESC) rn FROM model_details WHERE region_id IN (2, 1)) md WHERE rn <= 5;", "sql_context": "CREATE TABLE model_details (model_id INT, fairness_score FLOAT, region_id INT);"}
{"sql_prompt": "How many suppliers in India have been certified with 'GOTS' (Global Organic Textile Standard)?", "sql": "SELECT COUNT(DISTINCT suppliers.supplier_id) FROM suppliers JOIN supplier_certifications ON suppliers.supplier_id = supplier_certifications.supplier_id JOIN certifications ON supplier_certifications.certification_id = certifications.certification_id WHERE suppliers.country = 'India' AND certifications.certification_name = 'GOTS';", "sql_context": "CREATE TABLE certifications(certification_id INT, certification_name TEXT); INSERT INTO certifications(certification_id, certification_name) VALUES (1, 'GOTS'), (2, 'Fair Trade'), (3, 'SA8000'); CREATE TABLE suppliers(supplier_id INT, supplier_name TEXT, country TEXT); INSERT INTO suppliers(supplier_id, supplier_name, country) VALUES (1, 'Sustainable Textiles India', 'India'); CREATE TABLE supplier_certifications(supplier_id INT, certification_id INT); INSERT INTO supplier_certifications(supplier_id, certification_id) VALUES (1, 1);"}
{"sql_prompt": "What is the average mental health score of students in the 'Education' database?", "sql": "SELECT AVG(mental_health_score) FROM student_mental_health;", "sql_context": "CREATE TABLE student_mental_health (student_id INT, mental_health_score INT); INSERT INTO student_mental_health (student_id, mental_health_score) VALUES (1, 80), (2, 85), (3, 70);"}
{"sql_prompt": "What is the average salary of male and female employees, partitioned by department?", "sql": "SELECT Department, AVG(Salary) OVER (PARTITION BY Department, Gender) AS Avg_Salary FROM Employees;", "sql_context": "CREATE TABLE Employees (EmployeeID INT, Gender VARCHAR(10), Department VARCHAR(20), Salary DECIMAL(10,2)); INSERT INTO Employees (EmployeeID, Gender, Department, Salary) VALUES (1, 'Male', 'IT', 80000.00), (2, 'Female', 'IT', 75000.00), (3, 'Non-binary', 'HR', 70000.00), (4, 'Male', 'HR', 78000.00);"}
{"sql_prompt": "What's the most common age group for TV show viewers?", "sql": "SELECT age_group, COUNT(*) AS viewer_count FROM tv_show_viewers GROUP BY age_group ORDER BY viewer_count DESC LIMIT 1;", "sql_context": "CREATE TABLE tv_show_viewers(viewer_id INT, age_group VARCHAR(10), show_id INT); INSERT INTO tv_show_viewers(viewer_id, age_group, show_id) VALUES (1, '18-24', 1), (2, '18-24', 2), (3, '25-34', 2), (4, '35-44', 3), (5, '25-34', 1), (6, '45-54', 3), (7, '55-64', 1), (8, '18-24', 3);"}
{"sql_prompt": "What is the average donation amount for 'Education'?", "sql": "SELECT AVG(donation_amount) AS avg_donation_amount FROM education_donations WHERE cause_id = 1;", "sql_context": "CREATE TABLE education_donations (donation_id INT, donation_amount DECIMAL(10, 2), cause_id INT); INSERT INTO education_donations (donation_id, donation_amount, cause_id) VALUES (1, 5000.00, 1), (2, 7500.00, 1), (3, 12000.00, 1);"}
{"sql_prompt": "How many hospitals are there in Berlin and Rome?", "sql": "SELECT SUM(Number) FROM Hospitals WHERE City IN ('Berlin', 'Rome');", "sql_context": "CREATE TABLE Hospitals (City VARCHAR(20), Number INT); INSERT INTO Hospitals (City, Number) VALUES ('Berlin', 9), ('Rome', 7);"}
{"sql_prompt": "What is the sum of all grants received by the organization in 2021?", "sql": "SELECT SUM(grant_amount) FROM grants WHERE grant_date >= '2021-01-01' AND grant_date < '2022-01-01';", "sql_context": "CREATE TABLE grants (grant_id INT, grant_amount DECIMAL(10,2), grant_date DATE, organization_id INT);"}
{"sql_prompt": "Views by age group for TV Show \"Stranger Things\"?", "sql": "SELECT age, COUNT(*) as views FROM TV_Views WHERE tv_show = 'Stranger Things' GROUP BY age;", "sql_context": "CREATE TABLE TV_Views (viewer_id INT, age INT, tv_show VARCHAR(255), view_date DATE);"}
{"sql_prompt": "Insert a new record for an 'Accessible' bus named 'BusE' with bus_id 'BUS-789'", "sql": "INSERT INTO vehicles (vehicle_id, vehicle_type, vehicle_name) VALUES ('BUS-789', 'Bus', 'BusE'), ('TRAIN-123', 'Train', 'TrainA');", "sql_context": "CREATE TABLE vehicles (vehicle_id VARCHAR(20), vehicle_type VARCHAR(20), vehicle_name VARCHAR(20));"}
{"sql_prompt": "Find the total number of dishes that contain any combination of meat, dairy, and/or eggs.", "sql": "SELECT COUNT(*) FROM Dishes WHERE Type LIKE '%Meat%' OR Type LIKE '%Dairy%' OR Type LIKE '%Eggs%';", "sql_context": "CREATE TABLE Dishes (DishID INT, DishName VARCHAR(50), Type VARCHAR(50)); INSERT INTO Dishes (DishID, DishName, Type) VALUES (1, 'Beef Lasagna', 'Meat-dairy'), (2, 'Cheese Pizza', 'Dairy'), (3, 'Chicken Caesar Salad', 'Meat-dairy-eggs'), (4, 'Veggie Pizza', 'Dairy'), (5, 'Quiche', 'Dairy-eggs'), (6, 'Fried Rice', 'No animal products');"}
{"sql_prompt": "Find the top 5 citizens who provided the most feedback", "sql": "SELECT citizen_id, COUNT(*) as feedback_count FROM feedback GROUP BY citizen_id ORDER BY feedback_count DESC LIMIT 5;", "sql_context": "CREATE TABLE feedback (citizen_id INT, service_id INT, rating INT); INSERT INTO feedback (citizen_id, service_id, rating) VALUES (1, 123, 5), (2, 123, 4), (3, 123, 5), (1, 456, 3), (2, 456, 4), (3, 456, 5), (4, 789, 2), (5, 789, 2), (6, 789, 3), (1, 987, 4), (2, 987, 4), (3, 987, 5);"}
{"sql_prompt": "What is the average funding round size for startups founded by women?", "sql": "SELECT AVG(funding_round_size) FROM startup WHERE founder_gender = 'Female';", "sql_context": "CREATE TABLE startup (id INT, name TEXT, founder_gender TEXT, funding_round_size INT); INSERT INTO startup (id, name, founder_gender, funding_round_size) VALUES (1, 'StartupX', 'Female', 5000000);"}
{"sql_prompt": "What is the average accuracy of supervised models in the AI safety domain?", "sql": "SELECT AVG(accuracy) as avg_accuracy FROM ai_model WHERE type = 'Supervised' AND domain = 'Safety';", "sql_context": "CREATE TABLE ai_model (id INT, name VARCHAR, type VARCHAR, domain VARCHAR, accuracy FLOAT); INSERT INTO ai_model (id, name, type, domain, accuracy) VALUES (5, 'ModelE', 'Supervised', 'Safety', 0.96); INSERT INTO ai_model (id, name, type, domain, accuracy) VALUES (6, 'ModelF', 'Supervised', 'Safety', 0.94);"}
{"sql_prompt": "What is the total number of lifelong learning course enrollments by age group?", "sql": "SELECT age_group, SUM(num_students) FROM enrollment INNER JOIN age_group ON enrollment.age_group_id = age_group.age_group_id GROUP BY age_group;", "sql_context": "CREATE TABLE age_group (age_group_id INT, age_group TEXT); CREATE TABLE enrollment (enrollment_id INT, age_group_id INT, num_students INT); INSERT INTO age_group (age_group_id, age_group) VALUES (1, 'Under 18'), (2, '18-24'), (3, '25-34'), (4, '35-44'), (5, '45-54'), (6, '55-64'), (7, '65+'); INSERT INTO enrollment (enrollment_id, age_group_id, num_students) VALUES (101, 2, 150), (102, 3, 120), (103, 4, 200), (104, 5, 250), (105, 6, 180), (106, 7, 130);"}
{"sql_prompt": "What is the total number of traditional art pieces donated by individuals and organizations, along with their respective donation dates?", "sql": "SELECT COUNT(d.donation_id) as total_donations, d.donation_date FROM Donations d INNER JOIN TraditionalArt ta ON d.art_id = ta.art_id GROUP BY d.donation_date;", "sql_context": "CREATE TABLE Donations (donation_id INT, donor_type VARCHAR(10), art_id INT, donation_date DATE); CREATE TABLE TraditionalArt (art_id INT, art_name VARCHAR(20), art_type VARCHAR(20));"}
{"sql_prompt": "What is the total number of publications for each department?", "sql": "SELECT d.name, SUM(f.publications) FROM departments d INNER JOIN faculty f ON d.name = f.department GROUP BY d.name;", "sql_context": "CREATE TABLE departments (id INT, name TEXT, budget INT); INSERT INTO departments (id, name, budget) VALUES (1, 'Computer Science', 1000000), (2, 'Mathematics', 750000); CREATE TABLE faculty (id INT, name TEXT, department TEXT, publications INT); INSERT INTO faculty (id, name, department, publications) VALUES (1, 'John Doe', 'Computer Science', 2), (2, 'Jane Smith', 'Mathematics', 3), (3, 'Alice Johnson', 'Computer Science', 1);"}
{"sql_prompt": "List the top 3 organic items with the lowest inventory value?", "sql": "SELECT item_name, quantity * unit_price as total_value FROM organic_inventory ORDER BY total_value LIMIT 3;", "sql_context": "CREATE TABLE organic_inventory (item_id INT, item_name VARCHAR(255), category VARCHAR(255), quantity INT, unit_price DECIMAL(5,2)); INSERT INTO organic_inventory (item_id, item_name, category, quantity, unit_price) VALUES (1, 'Apples', 'Fruits', 100, 0.99), (2, 'Bananas', 'Fruits', 150, 0.69), (3, 'Carrots', 'Vegetables', 75, 1.49), (4, 'Quinoa', 'Grains', 50, 3.99), (5, 'Almonds', 'Nuts', 30, 8.99);"}
{"sql_prompt": "Find the longest running military innovation project in the Middle East", "sql": "SELECT project_name, DATEDIFF(end_date, start_date) AS duration FROM military_innovation_projects WHERE region = 'Middle East' ORDER BY duration DESC LIMIT 1;", "sql_context": "CREATE TABLE military_innovation_projects (project_id INT, region VARCHAR(255), project_name VARCHAR(255), start_date DATE, end_date DATE); INSERT INTO military_innovation_projects (project_id, region, project_name, start_date, end_date) VALUES (1, 'Middle East', 'Project A', '2010-01-01', '2015-12-31'), (2, 'Middle East', 'Project B', '2012-06-15', '2021-05-31');"}
{"sql_prompt": "What is the maximum production capacity for each chemical category, for chemical manufacturing in the Africa region?", "sql": "SELECT category, MAX(production_capacity) as max_capacity FROM chemicals WHERE region = 'Africa' GROUP BY category;", "sql_context": "CREATE TABLE chemicals (id INT, name VARCHAR(255), category VARCHAR(255), production_capacity FLOAT, region VARCHAR(255));"}
{"sql_prompt": "What is the average life expectancy in Asian countries with a population over 10 million?", "sql": "SELECT AVG(LifeExpectancy) FROM Countries WHERE Population > 10000000 AND CountryName IN ('India', 'China', 'Indonesia', 'Pakistan', 'Bangladesh', 'Japan', 'Philippines', 'Vietnam', 'Thailand', 'Myanmar', 'South Korea');", "sql_context": "CREATE TABLE Countries (CountryName VARCHAR(50), Population INT, LifeExpectancy FLOAT); INSERT INTO Countries (CountryName, Population, LifeExpectancy) VALUES ('India', 1380004385, 69.7), ('China', 1439323776, 76.7), ('Indonesia', 273523615, 71.7), ('Pakistan', 220892340, 66.7), ('Bangladesh', 164689383, 72.6), ('Japan', 126476461, 84.6), ('Philippines', 109581078, 71.1), ('Vietnam', 97338583, 75.8), ('Thailand', 69799978, 75.3), ('Myanmar', 54409794, 69.8), ('South Korea', 51709098, 82.9);"}
{"sql_prompt": "What is the average revenue per stream for the Pop genre in the US for the past month?", "sql": "SELECT AVG(revenue) FROM streams WHERE genre = 'Pop' AND country = 'US' AND timestamp >= '2022-02-01' AND timestamp < '2022-03-01';", "sql_context": "CREATE TABLE streams (stream_id INT, track_id INT, genre VARCHAR(50), country VARCHAR(50), timestamp TIMESTAMP, revenue FLOAT); INSERT INTO streams (stream_id, track_id, genre, country, timestamp, revenue) VALUES (1, 3001, 'Pop', 'US', '2022-01-01 00:00:00', 0.05), (2, 3002, 'Pop', 'US', '2022-01-02 12:30:00', 0.07);"}
{"sql_prompt": "Display the veteran employment statistics for each state in the US.", "sql": "SELECT state, employed_veterans, total_veterans, (employed_veterans::FLOAT/total_veterans)*100 AS employment_rate FROM veteran_employment;", "sql_context": "CREATE TABLE veteran_employment(id INT, state VARCHAR(20), employed_veterans INT, total_veterans INT);"}
{"sql_prompt": "Update the local economic impact of a hotel in Spain", "sql": "UPDATE hotel_impact SET local_impact = 55000 WHERE hotel_name = 'Eco-Hotel' AND country = 'Spain';", "sql_context": "CREATE TABLE hotel_impact (hotel_id INT, hotel_name TEXT, country TEXT, local_impact INT); INSERT INTO hotel_impact (hotel_id, hotel_name, country, local_impact) VALUES (1, 'Eco-Hotel', 'Spain', 50000);"}
{"sql_prompt": "How many clinical trials were conducted for a specific therapeutic area, 'Oncology', between 2015 and 2020?", "sql": "SELECT COUNT(*) as total_trials FROM clinical_trials WHERE therapeutic_area = 'Oncology' AND start_year BETWEEN 2015 AND 2020;", "sql_context": "CREATE TABLE clinical_trials (trial_id INT, therapeutic_area VARCHAR(50), start_year INT, end_year INT); INSERT INTO clinical_trials (trial_id, therapeutic_area, start_year, end_year) VALUES (1, 'Oncology', 2015, 2017), (2, 'Oncology', 2016, 2018), (3, 'Cardiology', 2017, 2019), (4, 'Oncology', 2018, 2020);"}
{"sql_prompt": "What is the total revenue for each artist?", "sql": "SELECT ArtistID, SUM(Revenue) as TotalRevenue FROM ArtSales GROUP BY ArtistID;", "sql_context": "CREATE TABLE ArtSales (SaleID INT, ArtistID INT, Revenue INT); INSERT INTO ArtSales (SaleID, ArtistID, Revenue) VALUES (1, 1, 1000), (2, 1, 2000), (3, 2, 3000), (4, 2, 1500), (5, 3, 2500);"}
{"sql_prompt": "List all restaurants in California that source ingredients from sustainable suppliers.", "sql": "SELECT Restaurant.name FROM Restaurant INNER JOIN RestaurantSupplier ON Restaurant.id = RestaurantSupplier.restaurant_id INNER JOIN Supplier ON RestaurantSupplier.supplier_id = Supplier.id WHERE Restaurant.location = 'California' AND Supplier.sustainable = true;", "sql_context": "CREATE TABLE Restaurant (id INT, name VARCHAR(50), type VARCHAR(50), location VARCHAR(50)); INSERT INTO Restaurant (id, name, type, location) VALUES (1, 'Plant-Based Bistro', 'Vegan', 'California'); INSERT INTO Restaurant (id, name, type, location) VALUES (2, 'Seafood Shack', 'Seafood', 'Florida'); CREATE TABLE Supplier (id INT, name VARCHAR(50), location VARCHAR(50), sustainable BOOLEAN); INSERT INTO Supplier (id, name, location, sustainable) VALUES (1, 'Green Growers', 'California', true); INSERT INTO Supplier (id, name, location, sustainable) VALUES (2, 'Fresh Catch', 'Florida', false); CREATE TABLE RestaurantSupplier (restaurant_id INT, supplier_id INT); INSERT INTO RestaurantSupplier (restaurant_id, supplier_id) VALUES (1, 1);"}
{"sql_prompt": "What is the average attendance for events in each city?", "sql": "SELECT city, AVG(attendees) FROM events GROUP BY city;", "sql_context": "CREATE TABLE events (id INT, name VARCHAR(255), city VARCHAR(255), attendees INT); INSERT INTO events (id, name, city, attendees) VALUES (1, 'Concert', 'New York', 500), (2, 'Play', 'Los Angeles', 300), (3, 'Exhibit', 'New York', 200), (4, 'Festival', 'Chicago', 800), (5, 'Workshop', 'New York', 150);"}
{"sql_prompt": "How many cultural heritage sites are there in Brazil?", "sql": "SELECT COUNT(*) FROM sites WHERE country = 'Brazil';", "sql_context": "CREATE TABLE sites (site_id INT, site_name TEXT, country TEXT); INSERT INTO sites (site_id, site_name, country) VALUES (1, 'Ancient City', 'Brazil'), (2, 'Historic Site', 'Brazil');"}
{"sql_prompt": "What is the most common exhibition_duration for exhibitions?", "sql": "SELECT exhibition_duration, COUNT(*) as duration_count FROM Exhibitions GROUP BY exhibition_duration ORDER BY duration_count DESC LIMIT 1;", "sql_context": "CREATE TABLE Exhibitions (exhibition_name TEXT, exhibition_duration INT);"}
{"sql_prompt": "What is the maximum budget for road projects in New York?", "sql": "SELECT MAX(budget) FROM road_projects WHERE state = 'NY';", "sql_context": "CREATE TABLE road_projects (id INT, name TEXT, state TEXT, budget FLOAT); INSERT INTO road_projects (id, name, state, budget) VALUES (1, 'NY-1 Expressway Reconstruction', 'NY', 20000000);"}
{"sql_prompt": "Delete all records in the Accommodations table for students with disability 'Visual Impairment'", "sql": "DELETE FROM Accommodations WHERE Disability = 'Visual Impairment';", "sql_context": "CREATE TABLE Accommodations (AccommodationID INT PRIMARY KEY, Description VARCHAR(50), StudentID INT, Disability VARCHAR(20), FOREIGN KEY (StudentID) REFERENCES Students(StudentID));"}
{"sql_prompt": "What is the earliest shipment date for each warehouse?", "sql": "SELECT warehouse_id, MIN(shipment_date) FROM shipments GROUP BY warehouse_id;", "sql_context": "CREATE TABLE shipments (shipment_id INT, shipment_date DATE, warehouse_id INT); INSERT INTO shipments (shipment_id, shipment_date, warehouse_id) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 2), (3, '2021-01-03', 3);"}
{"sql_prompt": "Update the vendor name for contract 001 to 'Vendor C'", "sql": "UPDATE Contracts SET Vendor = 'Vendor C' WHERE ID = 1;", "sql_context": "CREATE TABLE Contracts (ID INT, Vendor TEXT, Amount DECIMAL(10,2)); INSERT INTO Contracts (ID, Vendor, Amount) VALUES (1, 'Vendor A', 100000.00), (2, 'Vendor B', 200000.00);"}
{"sql_prompt": "How many carbon offset programs were initiated per year in the carbon_offset_programs table?", "sql": "SELECT start_year, COUNT(program_id) FROM carbon_offset_programs GROUP BY start_year;", "sql_context": "CREATE TABLE carbon_offset_programs (program_id INT, program_name TEXT, start_year INT);"}
{"sql_prompt": "Calculate the average response time for medical emergencies in each district", "sql": "SELECT district_id, AVG(response_time) as avg_response_time FROM emergency_responses WHERE incident_type = 'Medical' GROUP BY district_id;", "sql_context": "CREATE TABLE emergency_responses (id SERIAL PRIMARY KEY, district_id INTEGER, incident_type VARCHAR(255), response_time INTEGER); INSERT INTO emergency_responses (district_id, incident_type, response_time) VALUES (1, 'Medical', 8), (1, 'Fire', 6), (2, 'Medical', 10), (2, 'Fire', 7), (3, 'Medical', 12);"}
{"sql_prompt": "What is the total research spending for chemicals produced in European plants?", "sql": "SELECT SUM(research_spending_per_product) FROM research_spending WHERE production_plant LIKE '%Europe%';", "sql_context": "CREATE TABLE research_spending (id INT PRIMARY KEY, chemical_name VARCHAR(255), production_plant VARCHAR(255), research_spending_per_product DECIMAL(5,2)); INSERT INTO research_spending (id, chemical_name, production_plant, research_spending_per_product) VALUES (1, 'Hydrochloric Acid', 'Plant C', 5000); INSERT INTO research_spending (id, chemical_name, production_plant, research_spending_per_product) VALUES (2, 'Acetic Acid', 'Plant D', 6000);"}
{"sql_prompt": "What is the average investment (in USD) in energy efficiency measures per building in each city?", "sql": "SELECT city, AVG(investment_USD) as avg_investment_USD FROM energy_efficiency_measures GROUP BY city;", "sql_context": "CREATE TABLE energy_efficiency_measures (building_id INT, building_name VARCHAR(255), city VARCHAR(255), investment_USD INT); INSERT INTO energy_efficiency_measures (building_id, building_name, city, investment_USD) VALUES (1, 'Green Building 1', 'NYC', 50000); INSERT INTO energy_efficiency_measures (building_id, building_name, city, investment_USD) VALUES (2, 'Green Building 2', 'LA', 75000); INSERT INTO energy_efficiency_measures (building_id, building_name, city, investment_USD) VALUES (3, 'Green Building 3', 'NYC', 100000);"}
{"sql_prompt": "What is the average salary of male employees per department?", "sql": "SELECT Department, AVG(Salary) as Avg_Salary FROM Employees WHERE Gender = 'Male' GROUP BY Department;", "sql_context": "CREATE TABLE Employees (EmployeeID int, EmployeeName varchar(50), Department varchar(50), Salary float, Gender varchar(10)); INSERT INTO Employees (EmployeeID, EmployeeName, Department, Salary, Gender) VALUES (1, 'John Doe', 'IT', 80000, 'Male'), (2, 'Jane Smith', 'HR', 70000, 'Female'), (3, 'Mike Johnson', 'IT', 85000, 'Male');"}
{"sql_prompt": "How many pieces of artwork are there in the 'artwork' table for each medium type?", "sql": "SELECT medium, COUNT(*) FROM artwork GROUP BY medium;", "sql_context": "CREATE TABLE artwork (id INT, title VARCHAR(50), year INT, artist_id INT, medium VARCHAR(50));"}
{"sql_prompt": "What is the average number of volunteer hours per volunteer for each program in 2021?", "sql": "SELECT program_id, AVG(hours) as avg_volunteer_hours FROM volunteer_hours GROUP BY program_id;", "sql_context": "CREATE TABLE programs (id INT, name VARCHAR(255)); INSERT INTO programs (id, name) VALUES (1, 'Mentoring'), (2, 'After-School Tutoring'), (3, 'Community Garden'); CREATE TABLE volunteer_hours (id INT, program_id INT, volunteer_id INT, hours INT); INSERT INTO volunteer_hours (id, program_id, volunteer_id, hours) VALUES (1, 1, 1, 25), (2, 2, 2, 30), (3, 1, 3, 20), (4, 3, 4, 40), (5, 2, 5, 35), (6, 1, 6, 22), (7, 3, 7, 45), (8, 2, 8, 33), (9, 1, 9, 27), (10, 3, 10, 50), (11, 1, 1, 20), (12, 2, 2, 25), (13, 1, 3, 30), (14, 3, 4, 35), (15, 2, 5, 30), (16, 1, 6, 25), (17, 3, 7, 40), (18, 2, 8, 35), (19, 1, 9, 30), (20, 3, 10, 45);"}
{"sql_prompt": "Insert a new record into the 'habitat_preservation' table for the 'Amazon Rainforest' with a 'threat_level' of 'high'", "sql": "INSERT INTO habitat_preservation (id, habitat_name, threat_level, area_protected) VALUES (1, 'Amazon Rainforest', 'high', NULL);", "sql_context": "CREATE TABLE habitat_preservation (id INT, habitat_name VARCHAR(50), threat_level VARCHAR(10), area_protected INT);"}
{"sql_prompt": "What is the minimum biomass of any whale species in the Arctic Ocean?", "sql": "SELECT MIN(biomass) FROM whale_biomass WHERE location = 'Arctic';", "sql_context": "CREATE TABLE whale_biomass (species TEXT, location TEXT, biomass INTEGER); INSERT INTO whale_biomass (species, location, biomass) VALUES ('Blue Whale', 'Arctic', 200000), ('Humpback Whale', 'Arctic', 70000), ('Sperm Whale', 'Arctic', 300000), ('Beluga Whale', 'Arctic', 60000);"}
{"sql_prompt": "What is the minimum budget for all projects in the infrastructure development database?", "sql": "SELECT MIN(budget) FROM Projects;", "sql_context": "CREATE TABLE if not exists Projects (id INT, name VARCHAR(50), type VARCHAR(50), budget DECIMAL(10,2)); INSERT INTO Projects (id, name, type, budget) VALUES (1, 'Seawall', 'Resilience', 5000000.00), (2, 'Floodgate', 'Resilience', 3000000.00), (3, 'Bridge', 'Transportation', 8000000.00), (4, 'Highway', 'Transportation', 12000000.00);"}
{"sql_prompt": "Delete records in digital_divide table where internet_speed is slower than 10 Mbps", "sql": "DELETE FROM digital_divide WHERE internet_speed < 10;", "sql_context": "CREATE TABLE digital_divide (region VARCHAR(255), internet_speed FLOAT, updated_on DATE);"}
{"sql_prompt": "What is the average annual temperature change for each continent since 1950?", "sql": "SELECT continent, AVG(temperature - (SELECT temperature FROM TemperatureData WHERE country = 'Canada' AND year = 1950 AND continent = 'North America')) as 'Average Annual Temperature Change' FROM TemperatureData WHERE year > 1950 GROUP BY continent;", "sql_context": "CREATE TABLE TemperatureData (country VARCHAR(50), year INT, continent VARCHAR(50), temperature FLOAT); INSERT INTO TemperatureData (country, year, continent, temperature) VALUES ('Canada', 1950, 'North America', 6.5), ('Mexico', 1950, 'North America', 22.0), ('Brazil', 1950, 'South America', 26.0);"}
{"sql_prompt": "List all unique species in marine protected areas with pollution levels greater than 5", "sql": "SELECT DISTINCT species FROM marine_protected_areas WHERE pollution_level > 5;", "sql_context": "CREATE TABLE marine_protected_areas (id INT, species TEXT, pollution_level INT);"}
{"sql_prompt": "How many marine conservation initiatives were launched in the Arctic region between 2017 and 2020?", "sql": "SELECT COUNT(*) FROM marine_conservation_initiatives WHERE year BETWEEN 2017 AND 2020 AND location = 'Arctic';", "sql_context": "CREATE TABLE marine_conservation_initiatives (id INT, name TEXT, year INT, location TEXT); INSERT INTO marine_conservation_initiatives (id, name, year, location) VALUES (1, 'Arctic Conservation Program', 2017, 'Arctic'), (2, 'Arctic Marine Ecosystems Protection Act', 2018, 'Arctic'), (3, 'Arctic Clean Oceans Project', 2019, 'Arctic'), (4, 'Arctic Marine Life Restoration', 2020, 'Arctic');"}
{"sql_prompt": "What is the percentage of funding by program category in 2022?", "sql": "SELECT program_category, (amount / SUM(amount) OVER (PARTITION BY funding_year)) * 100 AS funding_percentage  FROM program_categories WHERE funding_year = 2022 ORDER BY funding_percentage DESC;", "sql_context": "CREATE TABLE program_categories (id INT, program_category VARCHAR(255), funding_year INT, amount DECIMAL(10, 2));"}
{"sql_prompt": "What is the average dissolved oxygen level for each location, grouped by location, from the 'fish_stock' and 'ocean_health' tables?", "sql": "SELECT f.location, AVG(f.dissolved_oxygen + o.dissolved_oxygen)/2 FROM fish_stock f INNER JOIN ocean_health o ON f.location = o.location GROUP BY f.location;", "sql_context": "CREATE TABLE fish_stock (location VARCHAR(255), dissolved_oxygen FLOAT); CREATE TABLE ocean_health (location VARCHAR(255), dissolved_oxygen FLOAT); INSERT INTO fish_stock (location, dissolved_oxygen) VALUES ('Location A', 6.5), ('Location B', 7.1); INSERT INTO ocean_health (location, dissolved_oxygen) VALUES ('Location A', 6.8), ('Location B', 7.4);"}
{"sql_prompt": "What is the maximum age of employees in the sales department who have not completed any training?", "sql": "SELECT MAX(age) as max_age FROM employee_database WHERE department = 'Sales' AND training_completed = 'None';", "sql_context": "CREATE TABLE employee_database (id INT, department TEXT, age INT, training_completed TEXT); INSERT INTO employee_database (id, department, age, training_completed) VALUES (1, 'Sales', 45, 'None'), (2, 'Sales', 30, 'Diversity'), (3, 'Sales', 50, 'None');"}
{"sql_prompt": "Find the total number of concerts for each artist", "sql": "SELECT artist_name, COUNT(*) as total_concerts FROM concerts GROUP BY artist_name;", "sql_context": "CREATE TABLE concerts (id INT, artist_name VARCHAR(255), concert_date DATE); INSERT INTO concerts (id, artist_name, concert_date) VALUES (1, 'Taylor Swift', '2022-06-01'), (2, 'BTS', '2022-07-01'), (3, 'Taylor Swift', '2022-08-01'), (4, 'Ariana Grande', '2022-09-01');"}
{"sql_prompt": "What is the total number of marine species discovered in the Arctic Ocean since 2000?", "sql": "SELECT COUNT(*) FROM marine_species ms WHERE ms.ocean_id = (SELECT id FROM arctic_ocean WHERE name = 'Arctic Ocean') AND ms.discovery_year >= 2000;", "sql_context": "CREATE TABLE arctic_ocean (id INT, name VARCHAR(100), region VARCHAR(50)); CREATE TABLE marine_species (id INT, name VARCHAR(100), species_type VARCHAR(50), discovery_year INT, ocean_id INT); INSERT INTO arctic_ocean (id, name, region) VALUES (1, 'Arctic Ocean', 'Arctic'); INSERT INTO marine_species (id, name, species_type, discovery_year, ocean_id) VALUES (1, 'Polar Bear', 'Mammal', 2002, 1), (2, 'Narwhal', 'Mammal', 2005, 1);"}
{"sql_prompt": "How many social good technology projects were completed in Q1, Q2, Q3, and Q4 of 2021, categorized by project status?", "sql": "SELECT Social_Good_Tech_Quarters.quarter, Social_Good_Tech_Quarters.status, SUM(Social_Good_Tech_Quarters.projects) FROM Social_Good_Tech_Quarters WHERE Social_Good_Tech_Quarters.quarter IN ('Q1', 'Q2', 'Q3', 'Q4') GROUP BY Social_Good_Tech_Quarters.quarter, Social_Good_Tech_Quarters.status;", "sql_context": "CREATE TABLE Social_Good_Tech_Quarters (quarter VARCHAR(10), status VARCHAR(20), projects INT); INSERT INTO Social_Good_Tech_Quarters (quarter, status, projects) VALUES ('Q1', 'completed', 20), ('Q1', 'in_progress', 15), ('Q2', 'completed', 25), ('Q2', 'in_progress', 20), ('Q3', 'completed', 30), ('Q3', 'in_progress', 25), ('Q4', 'completed', 35), ('Q4', 'in_progress', 30);"}
{"sql_prompt": "What is the total Shariah-compliant loan amount issued per month in the Middle East?", "sql": "SELECT region, DATE_FORMAT(loan_date, '%Y-%m') as month, SUM(amount) as total_amount FROM shariah_compliant_loans_by_region WHERE region = 'Middle East' GROUP BY month ORDER BY month;", "sql_context": "CREATE TABLE shariah_compliant_loans_by_region (id INT, loan_date DATE, region VARCHAR(50), amount FLOAT); INSERT INTO shariah_compliant_loans_by_region (id, loan_date, region, amount) VALUES (1, '2021-01-01', 'Middle East', 350000), (2, '2021-02-01', 'Middle East', 400000), (3, '2021-03-01', 'Middle East', 450000), (4, '2021-01-01', 'Africa', 200000), (5, '2021-02-01', 'Africa', 300000);"}
{"sql_prompt": "What is the percentage of hotels in Japan that have adopted AI technology?", "sql": "SELECT 100.0 * COUNT(*) / (SELECT COUNT(*) FROM hotels WHERE country = 'Japan') AS percentage FROM hotels WHERE ai_adoption = TRUE AND country = 'Japan';", "sql_context": "CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, country TEXT, ai_adoption BOOLEAN);"}
{"sql_prompt": "What are the earliest artifacts in each excavation site?", "sql": "SELECT site_name, MIN(date_found) as earliest_date FROM excavation_sites s JOIN artifacts a ON s.site_id = a.site_id GROUP BY site_name;", "sql_context": "CREATE TABLE excavation_sites (site_id INT, site_name VARCHAR(255)); CREATE TABLE artifacts (artifact_id INT, site_id INT, artifact_type VARCHAR(255), date_found DATE); INSERT INTO excavation_sites (site_id, site_name) VALUES (1, 'site_a'), (2, 'site_b'), (3, 'site_c'); INSERT INTO artifacts (artifact_id, site_id, artifact_type, date_found) VALUES (1, 1, 'Pottery', '2020-01-01'), (2, 1, 'Bone Fragments', '2019-01-01'), (3, 2, 'Pottery', '2021-01-01'), (4, 2, 'Coins', '2020-01-01'), (5, 3, 'Bone Fragments', '2018-01-01'), (6, 3, 'Bronze Tools', '2019-01-01');"}
{"sql_prompt": "Number of eco-friendly hotels in each country?", "sql": "SELECT country, COUNT(*) FROM eco_hotels_extended GROUP BY country;", "sql_context": "CREATE TABLE eco_hotels_extended (hotel_id INT, name TEXT, country TEXT); INSERT INTO eco_hotels_extended (hotel_id, name, country) VALUES (1, 'Le Hameau de la Vall\u00e9e', 'France'), (2, 'Hotel Eco Vie', 'France'), (3, 'Eco Resort', 'Italy'), (4, 'Green Hotel', 'Spain');"}
{"sql_prompt": "Update the department of a graduate student", "sql": "UPDATE GraduateStudents SET Department = 'Electrical Engineering' WHERE StudentID = 1001;", "sql_context": "CREATE TABLE GraduateStudents (StudentID INT, Name VARCHAR(50), Department VARCHAR(50), AdvisorID INT); INSERT INTO GraduateStudents (StudentID, Name, Department, AdvisorID) VALUES (1001, 'Sara Smith', 'Computer Science', 2001), (1002, 'Bob Brown', 'Physics', NULL), (1003, 'Charlie Davis', 'Mathematics', 3001);"}
{"sql_prompt": "Determine the average monthly CO2 emissions for the top 5 facilities, sorted by the highest average.", "sql": "SELECT facility_name, AVG(co2_emissions) as avg_co2_emissions FROM facility_emissions GROUP BY facility_name ORDER BY avg_co2_emissions DESC LIMIT 5;", "sql_context": "CREATE TABLE facility_emissions (facility_id INT, facility_name VARCHAR(50), month INT, year INT, co2_emissions FLOAT); INSERT INTO facility_emissions (facility_id, facility_name, month, year, co2_emissions) VALUES (1, 'Facility A', 1, 2021, 5000), (2, 'Facility B', 1, 2021, 4500), (3, 'Facility C', 1, 2021, 5200), (4, 'Facility D', 1, 2021, 4800), (5, 'Facility E', 1, 2021, 5600), (1, 'Facility A', 2, 2021, 5100), (2, 'Facility B', 2, 2021, 4600), (3, 'Facility C', 2, 2021, 5300), (4, 'Facility D', 2, 2021, 4900), (5, 'Facility E', 2, 2021, 5700);"}
{"sql_prompt": "What is the total number of evidence-based policy making initiatives in the European Union?", "sql": "SELECT COUNT(*) FROM ebp_initiatives WHERE region = 'EU';", "sql_context": "CREATE TABLE ebp_initiatives (id INT, name VARCHAR(255), region VARCHAR(255)); INSERT INTO ebp_initiatives (id, name, region) VALUES (1, 'Initiative 1', 'EU'), (2, 'Initiative 2', 'EU'), (3, 'Initiative 3', 'EU');"}
{"sql_prompt": "Insert a new record into the 'energy_storage' table for a lithium-ion battery with 10 MWh capacity, located in 'New York'", "sql": "INSERT INTO energy_storage (technology, capacity, location) VALUES ('lithium-ion', 10, 'New York');", "sql_context": "CREATE TABLE energy_storage (id INT PRIMARY KEY, technology VARCHAR(255), capacity FLOAT, location VARCHAR(255));"}
{"sql_prompt": "Which countries have the highest and lowest number of articles in the 'politics' category?", "sql": "SELECT country, COUNT(*) as count FROM articles WHERE category = 'politics' GROUP BY country ORDER BY count DESC, country ASC LIMIT 1; SELECT country, COUNT(*) as count FROM articles WHERE category = 'politics' GROUP BY country ORDER BY count ASC, country ASC LIMIT 1;", "sql_context": "CREATE TABLE articles (article_id INT, title VARCHAR(50), category VARCHAR(20), country VARCHAR(20)); INSERT INTO articles (article_id, title, category, country) VALUES (1, 'Politics in 2022', 'politics', 'USA'), (2, 'British Politics', 'politics', 'UK'), (3, 'Indian Economy', 'economy', 'India');"}
{"sql_prompt": "What is the total waste generation for textiles and electronics, globally, from 2018 to 2021?", "sql": "SELECT waste_type, SUM(amount) FROM waste_generation_global WHERE waste_type IN ('textiles', 'electronics') AND year BETWEEN 2018 AND 2021 GROUP BY waste_type;", "sql_context": "CREATE TABLE waste_generation_global (waste_type TEXT, amount INTEGER, year INTEGER, area TEXT);"}
{"sql_prompt": "Add new ethical labor practice record 'Fair Trade' to 'labor_practice' table", "sql": "INSERT INTO labor_practice (practice_id, name, description) VALUES ('FT', 'Fair Trade', 'Workers are paid fairly for their work');", "sql_context": "CREATE TABLE labor_practice (practice_id VARCHAR(10), name VARCHAR(50), description TEXT, primary key (practice_id));"}
{"sql_prompt": "List the top 3 brands with the highest percentage of products that are both cruelty-free and vegan, in descending order.", "sql": "SELECT b.brand_name, ROUND(100.0 * COUNT(p.product_id) FILTER (WHERE p.is_cruelty_free AND p.is_vegan) / COUNT(p.product_id), 2) as pct_cruelty_free_vegan FROM brands b JOIN products p ON b.brand_id = p.brand_id GROUP BY b.brand_name ORDER BY pct_cruelty_free_vegan DESC LIMIT 3;", "sql_context": "CREATE TABLE brands (brand_id INT, brand_name VARCHAR(50)); CREATE TABLE products (product_id INT, brand_id INT, is_cruelty_free BOOLEAN, is_vegan BOOLEAN);"}
{"sql_prompt": "List all hotels in Canada that offer both vegan and gluten-free meal options.", "sql": "SELECT Hotels.hotel_name FROM Hotels INNER JOIN MealOptions ON Hotels.hotel_id = MealOptions.hotel_id WHERE Hotels.country = 'Canada' AND MealOptions.vegan = true AND MealOptions.gluten_free = true;", "sql_context": "CREATE TABLE MealOptions (hotel_id INT, vegan BOOLEAN, gluten_free BOOLEAN); INSERT INTO MealOptions (hotel_id, vegan, gluten_free) VALUES (1, true, true), (2, false, true), (3, true, false); CREATE TABLE Hotels (hotel_id INT, hotel_name VARCHAR(50), country VARCHAR(50)); INSERT INTO Hotels (hotel_id, hotel_name, country) VALUES (1, 'GreenHotel Ottawa', 'Canada'), (2, 'EcoLodge Montreal', 'Canada'), (3, 'SustainableResort Toronto', 'Canada');"}
{"sql_prompt": "What is the average budget for carbon offset initiatives in Rio de Janeiro, Brazil, since 2016?", "sql": "SELECT AVG(budget) FROM carbon_offsets WHERE city = 'Rio de Janeiro' AND country = 'Brazil' AND year >= 2016;", "sql_context": "CREATE TABLE carbon_offsets (id INT, city VARCHAR(20), country VARCHAR(20), year INT, budget FLOAT); INSERT INTO carbon_offsets (id, city, country, year, budget) VALUES (1, 'Rio de Janeiro', 'Brazil', 2016, 5000000), (2, 'Rio de Janeiro', 'Brazil', 2017, 6000000), (3, 'Rio de Janeiro', 'Brazil', 2018, 7000000), (4, 'Rio de Janeiro', 'Brazil', 2019, 8000000);"}
{"sql_prompt": "Insert a new sustainable sourcing record for restaurant 2 with a rating of 95. Use the sustainable_sourcing table.", "sql": "INSERT INTO sustainable_sourcing (restaurant_id, rating) VALUES (2, 95);", "sql_context": "CREATE TABLE sustainable_sourcing (restaurant_id INT, rating INT); INSERT INTO sustainable_sourcing (restaurant_id, rating) VALUES (2, 95);"}
{"sql_prompt": "Delete all records of organic waste generated by commercial sectors in the city of New York in 2019.", "sql": "DELETE FROM WasteGeneration WHERE WasteType = 'Organic Waste' AND Sector = 'Commercial' AND City = 'New York' AND Year = 2019;", "sql_context": "CREATE TABLE WasteGeneration (ID INT PRIMARY KEY, WasteType VARCHAR(50), Sector VARCHAR(50), City VARCHAR(50), Year INT, Quantity DECIMAL(10,2)); INSERT INTO WasteGeneration (ID, WasteType, Sector, City, Year, Quantity) VALUES (5, 'Organic Waste', 'Commercial', 'New York', 2019, 6000.00);"}
{"sql_prompt": "What is the total budget allocated for infrastructure development in 2019 and 2020?", "sql": "SELECT SUM(Budget) FROM InfrastructureBudget WHERE Year IN (2019, 2020);", "sql_context": "CREATE TABLE InfrastructureBudget (Year INTEGER, Budget INTEGER); INSERT INTO InfrastructureBudget (Year, Budget) VALUES (2019, 12000000), (2020, 15000000);"}
{"sql_prompt": "What is the maximum CO2 emission reduction for each smart city initiative?", "sql": "SELECT Initiative, MAX(CO2EmissionReduction) AS Max_Reduction FROM SmartCities GROUP BY Initiative;", "sql_context": "CREATE TABLE SmartCities (City VARCHAR(255), Initiative VARCHAR(255), CO2EmissionReduction FLOAT); INSERT INTO SmartCities (City, Initiative, CO2EmissionReduction) VALUES ('NYC', 'SmartGrid', 15000,), ('LA', 'SmartTransit', 20000), ('Chicago', 'SmartBuildings', 10000);"}
{"sql_prompt": "Update the 'contract_amount' field in the 'defense_contracts' table, decreasing it by 5% for contracts awarded in Q3 2021", "sql": "UPDATE defense_contracts SET contract_amount = contract_amount * 0.95 WHERE award_date BETWEEN '2021-07-01' AND '2021-09-30';", "sql_context": "CREATE TABLE defense_contracts (contract_id INT, contract_amount FLOAT, award_date DATE);"}
{"sql_prompt": "Insert new records in the 'articles' table", "sql": "INSERT INTO articles (article_id, title, content, publication_date) VALUES (1, 'New Funding for Local Schools', 'The city council has approved new funding...', '2023-02-01'), (2, 'Renovations Begin on Community Center', 'Construction crews have started...', '2023-02-03');", "sql_context": "CREATE TABLE articles (article_id INT, title VARCHAR(255), content TEXT, publication_date DATE);"}
{"sql_prompt": "What is the total number of registered users and their average age who signed up for the 'Philadelphia 76ers' newsletter in the 'Eastern' conference from the cities 'Philadelphia' and 'New York'. Assume the 'fan_registration' table has columns 'team_name', 'conference', 'city', 'registration_date' and 'age'.", "sql": "SELECT AVG(age), COUNT(*) FROM fan_registration WHERE team_name = 'Philadelphia 76ers' AND conference = 'Eastern' AND city IN ('Philadelphia', 'New York');", "sql_context": "CREATE TABLE TEAMS (team_name VARCHAR(50), conference VARCHAR(50)); INSERT INTO TEAMS (team_name, conference) VALUES ('Philadelphia 76ers', 'Eastern'); CREATE TABLE fan_registration (team_name VARCHAR(50), conference VARCHAR(50), city VARCHAR(50), registration_date DATE, age INT); INSERT INTO fan_registration (team_name, conference, city, registration_date, age) VALUES ('Philadelphia 76ers', 'Eastern', 'Philadelphia', '2022-01-01', 25), ('Philadelphia 76ers', 'Eastern', 'New York', '2022-01-02', 30);"}
{"sql_prompt": "Find the number of unique IP addresses involved in each type of attack, ordered by the highest number of unique IP addresses?", "sql": "SELECT attack_type, COUNT(DISTINCT ip_address) as unique_ip_addresses FROM attacks GROUP BY attack_type ORDER BY unique_ip_addresses DESC;", "sql_context": "CREATE TABLE attacks (attack_type VARCHAR(255), ip_address VARCHAR(255)); INSERT INTO attacks (attack_type, ip_address) VALUES ('DDOS', '192.168.1.1'), ('DDOS', '192.168.1.2'), ('Phishing', '192.168.1.3'), ('Phishing', '192.168.1.4'), ('Phishing', '192.168.1.5'), ('Malware', '192.168.1.6');"}
{"sql_prompt": "How many socially responsible lenders in North America have a return on investment (ROI) of over 5%?", "sql": "SELECT COUNT(*) FROM Lenders WHERE SociallyResponsible = 1 AND Location = 'North America' AND ROI > 0.05;", "sql_context": "CREATE TABLE Lenders (LenderID int, Name varchar(50), Location varchar(50), SociallyResponsible bit, ROI decimal(10,2)); INSERT INTO Lenders (LenderID, Name, Location, SociallyResponsible, ROI) VALUES (1, 'Lender A', 'North America', 1, 0.05);"}
{"sql_prompt": "List the top 5 broadband plans with the highest price?", "sql": "SELECT * FROM broadband_plans ORDER BY price DESC LIMIT 5;", "sql_context": "CREATE TABLE broadband_plans (id INT, name VARCHAR(255), type VARCHAR(255), price DECIMAL(10,2));"}
{"sql_prompt": "What was the total flight time for all aircraft in the fleet for each month in 2021?", "sql": "SELECT DATE_FORMAT(flight_date, '%Y-%m') as month, SUM(flight_hours) as total_flight_time FROM aircraft_fleet GROUP BY month;", "sql_context": "CREATE TABLE aircraft_fleet (id INT, model VARCHAR(50), flight_hours DECIMAL(5,2), flight_date DATE); INSERT INTO aircraft_fleet (id, model, flight_hours, flight_date) VALUES (1, 'Boeing 737', 250.3, '2021-01-01'), (2, 'Airbus A320', 280.2, '2021-01-05'), (3, 'Boeing 787', 300.8, '2021-01-10');"}
{"sql_prompt": "List the top 3 most energy efficient states in terms of solar power (kWh/m2/day)?", "sql": "SELECT state, AVG(efficiency_kwh) as avg_efficiency FROM solar_projects GROUP BY state ORDER BY avg_efficiency DESC LIMIT 3;", "sql_context": "CREATE TABLE solar_projects (project_id INT, project_name TEXT, state TEXT, efficiency_kwh FLOAT); INSERT INTO solar_projects (project_id, project_name, state, efficiency_kwh) VALUES (1, 'Solar Farm 1', 'California', 0.18), (2, 'Solar Farm 2', 'Nevada', 0.20), (3, 'Solar Farm 3', 'Arizona', 0.19);"}
{"sql_prompt": "Calculate the average calorie count of vegan dishes in restaurants located in the USA.", "sql": "SELECT AVG(Meals.calories) FROM Meals JOIN Restaurants ON Meals.RestaurantId = Restaurants.id WHERE Meals.type = 'Vegan' AND Restaurants.country = 'USA';", "sql_context": "CREATE TABLE Restaurants (id INT, name TEXT, country TEXT); CREATE TABLE Meals (id INT, name TEXT, type TEXT, calories INT, RestaurantId INT, FOREIGN KEY (RestaurantId) REFERENCES Restaurants(id)); INSERT INTO Restaurants (id, name, country) VALUES (1, 'Restaurant A', 'USA'), (2, 'Restaurant B', 'USA'), (3, 'Restaurant C', 'Canada'); INSERT INTO Meals (id, name, type, calories, RestaurantId) VALUES (1, 'Meal 1', 'Vegan', 600, 1), (2, 'Meal 2', 'Vegan', 550, 1), (3, 'Meal 3', 'Non-vegan', 700, 1), (4, 'Meal 4', 'Vegan', 450, 2), (5, 'Meal 5', 'Non-vegan', 800, 2), (6, 'Meal 6', 'Vegan', 650, 3);"}
{"sql_prompt": "List all psychologists in Oregon who have treated more than 10 patients", "sql": "SELECT name FROM psychologists WHERE patients > 10 AND state = 'Oregon';", "sql_context": "CREATE TABLE psychologists (id INT, name TEXT, specialization TEXT, experience INT, patients INT, state TEXT); INSERT INTO psychologists (id, name, specialization, experience, patients, state) VALUES (1, 'Dr. Emily Thompson', 'CBT', 12, 12, 'Oregon'); INSERT INTO psychologists (id, name, specialization, experience, patients, state) VALUES (2, 'Dr. Robert Brown', 'DBT', 15, 8, 'California'); INSERT INTO psychologists (id, name, specialization, experience, patients, state) VALUES (3, 'Dr. Sofia Martinez', 'CBT', 10, 20, 'Oregon'); INSERT INTO psychologists (id, name, specialization, experience, patients, state) VALUES (4, 'Dr. James Johnson', 'Psychodynamic', 8, 15, 'Oregon');"}
{"sql_prompt": "What is the minimum ESG score for investments in the 'Education' sector?", "sql": "SELECT MIN(esg_score) FROM esg_scores_2 WHERE sector = 'Education';", "sql_context": "CREATE TABLE esg_scores_2 (investment_id INT, sector VARCHAR(20), esg_score FLOAT); INSERT INTO esg_scores_2 (investment_id, sector, esg_score) VALUES (1, 'Healthcare', 80.5), (2, 'Education', 87.3), (3, 'Healthcare', 84.2), (4, 'Finance', 82.1);"}
{"sql_prompt": "Show the number of startups founded by women in each industry", "sql": "SELECT c.industry, COUNT(*) FROM company c WHERE founder_gender = 'Female' GROUP BY industry;", "sql_context": "CREATE TABLE company (id INT, name TEXT, industry TEXT, founder_gender TEXT);"}
{"sql_prompt": "What is the average carbon sequestration in coniferous forests?", "sql": "SELECT AVG(carbon_sequestration) FROM coniferous_forests;", "sql_context": "CREATE TABLE coniferous_forests (id INT, carbon_sequestration FLOAT); INSERT INTO coniferous_forests VALUES (1, 45.67), (2, 56.78), (3, 67.89);"}
{"sql_prompt": "What was the total number of volunteers registered in 'Oregon' and 'Washington' in the year 2022?", "sql": "SELECT SUM(state = 'Oregon') + SUM(state = 'Washington') FROM Volunteers WHERE registration_year = 2022;", "sql_context": "CREATE TABLE Volunteers (volunteer_id INT, registration_date DATE, state VARCHAR(20), registration_year INT); INSERT INTO Volunteers (volunteer_id, registration_date, state, registration_year) VALUES (1, '2022-01-01', 'Oregon', 2022), (2, '2022-02-01', 'Washington', 2022);"}
{"sql_prompt": "Recycling rates for all regions in 2020?", "sql": "SELECT region, rate FROM recycling_rates WHERE year = 2020;", "sql_context": "CREATE TABLE recycling_rates (region VARCHAR(50), year INT, rate DECIMAL(4,2)); INSERT INTO recycling_rates (region, year, rate) VALUES ('Africa', 2020, 0.35), ('Asia', 2020, 0.47), ('Europe', 2020, 0.60), ('North America', 2020, 0.48), ('South America', 2020, 0.42), ('Oceania', 2020, 0.53);"}
{"sql_prompt": "What is the percentage of soybean fields in Brazil that have a pH level above 7.5, based on IoT sensor data?", "sql": "SELECT 100.0 * COUNT(*) / (SELECT COUNT(*) FROM pH_data WHERE location LIKE '%Brazil Soybean Field%') FROM pH_data WHERE pH > 7.5 AND location LIKE '%Brazil Soybean Field%';", "sql_context": "CREATE TABLE pH_data (location VARCHAR(255), date DATE, pH FLOAT); INSERT INTO pH_data (location, date, pH) VALUES ('Brazil Soybean Field 1', '2021-06-01', 8.2), ('Brazil Soybean Field 1', '2021-06-02', 8.3), ('Brazil Soybean Field 2', '2021-06-01', 7.4);"}
{"sql_prompt": "Count the number of smart city projects in each country", "sql": "SELECT location, COUNT(*) FROM smart_cities GROUP BY location;", "sql_context": "CREATE TABLE smart_cities (id INT, project_name TEXT, location TEXT, start_date DATE);"}
{"sql_prompt": "What is the average ESG score for healthcare companies in the Asia-Pacific region in 2022?", "sql": "SELECT region, AVG(esg_score) as avg_esg_score FROM company_esg WHERE year = 2022 AND sector = 'Healthcare' AND region = 'Asia-Pacific' GROUP BY region;", "sql_context": "CREATE TABLE company_esg (company_id INT, company_name VARCHAR(255), esg_score INT, year INT, sector VARCHAR(255), region VARCHAR(255)); INSERT INTO company_esg (company_id, company_name, esg_score, year, sector, region) VALUES (1, 'AsiaPacific Healthcare', 75, 2022, 'Healthcare', 'Asia-Pacific'), (2, 'GlobalTech', 85, 2022, 'Technology', 'North America'), (3, 'EuroGreen', 90, 2022, 'Renewable Energy', 'Europe');"}
{"sql_prompt": "Calculate the total CO2 emission reduction (in metric tons) of projects implemented in 'North America'.", "sql": "SELECT SUM(CO2_reduction_tons) AS total_reduction FROM projects WHERE location = 'North America';", "sql_context": "CREATE TABLE projects (id INT, location VARCHAR(20), CO2_reduction_tons INT); INSERT INTO projects (id, location, CO2_reduction_tons) VALUES (1, 'North America', 1500), (2, 'Asia', 1200), (3, 'North America', 2000), (4, 'Europe', 2500);"}
{"sql_prompt": "What is the total square footage of properties owned by each person?", "sql": "SELECT person.name, SUM(property.sqft) FROM person INNER JOIN property ON person.id = property.owner_id GROUP BY person.name;", "sql_context": "CREATE TABLE property (id INT, sqft INT, owner_id INT); CREATE TABLE person (id INT, name VARCHAR(50));"}
{"sql_prompt": "What is the minimum GPA of graduate students in the 'math' program?", "sql": "SELECT MIN(gpa) FROM student WHERE program = 'math';", "sql_context": "CREATE TABLE student (id INT, program TEXT, gpa REAL); INSERT INTO student (id, program, gpa) VALUES (1, 'math', 3.8), (2, 'math', 3.9), (3, 'math', 4.0);"}
{"sql_prompt": "How many cases did each attorney win in California?", "sql": "SELECT attorneys.name, COUNT(cases.id) FROM attorneys INNER JOIN cases ON attorneys.id = cases.attorney_id WHERE attorneys.state = 'California' AND cases.result = 'won' GROUP BY attorneys.name;", "sql_context": "CREATE TABLE attorneys (id INT, name TEXT, state TEXT); INSERT INTO attorneys (id, name, state) VALUES (1, 'Barry Zuckerkorn', 'California'); CREATE TABLE cases (id INT, attorney_id INT, result TEXT, state TEXT); INSERT INTO cases (id, attorney_id, result, state) VALUES (1, 1, 'won', 'California');"}
{"sql_prompt": "Show defense contract data for the year 2019", "sql": "SELECT * FROM defense_contracts WHERE year = 2019;", "sql_context": "CREATE TABLE defense_contracts (contract_id INT, agency VARCHAR(255), vendor VARCHAR(255), amount DECIMAL(10, 2), year INT);"}
{"sql_prompt": "How many community development initiatives were completed in Mexico between 2010 and 2015?", "sql": "SELECT COUNT(*) FROM community_development_initiatives WHERE country = 'Mexico' AND completion_year BETWEEN 2010 AND 2015;", "sql_context": "CREATE TABLE community_development_initiatives (id INT, initiative_name VARCHAR(50), country VARCHAR(50), completion_year INT); INSERT INTO community_development_initiatives (id, initiative_name, country, completion_year) VALUES (1, 'Fome Zero', 'Brazil', 2003), (2, 'Bolsa Fam\u00edlia', 'Brazil', 2015), (3, 'Minha Casa, Minha Vida', 'Brazil', 2019), (4, 'Programa Nacional de Estancias Infantiles', 'Mexico', 2010), (5, 'Programa de la Cruzada Nacional contra el Hambre', 'Mexico', 2013);"}
{"sql_prompt": "List the top 3 climate finance initiatives with the highest budget in the Middle East and North Africa, ordered by budget.", "sql": "SELECT * FROM v_middle_east_north_africa_finance_initiatives ORDER BY budget DESC LIMIT 3;", "sql_context": "CREATE TABLE climate_finance_initiatives (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), budget DECIMAL(10,2));CREATE VIEW v_middle_east_north_africa_finance_initiatives AS SELECT cfi.name, cfi.location, cfi.budget FROM climate_finance_initiatives cfi WHERE cfi.location LIKE 'Middle East%' OR cfi.location LIKE 'North Africa%';"}
{"sql_prompt": "delete the athlete with id 100 from the athletes table", "sql": "DELETE FROM athletes WHERE id = 100;", "sql_context": "CREATE TABLE athletes (id INT PRIMARY KEY, name VARCHAR(100), age INT, sport VARCHAR(50), team VARCHAR(50));"}
{"sql_prompt": "What is the number of cases handled by attorneys with the title 'Of Counsel'?", "sql": "SELECT COUNT(*) FROM cases JOIN attorneys ON cases.attorney_id = attorneys.id WHERE attorneys.title = 'Of Counsel';", "sql_context": "CREATE TABLE cases (id INT, attorney_id INT, billing_amount INT); INSERT INTO cases (id, attorney_id, billing_amount) VALUES (1, 1, 4000); CREATE TABLE attorneys (id INT, name TEXT, title TEXT); INSERT INTO attorneys (id, name, title) VALUES (1, 'Alicia Alvarez', 'Of Counsel');"}
{"sql_prompt": "What is the average lifelong learning score of students in each school?", "sql": "SELECT school_id, AVG(lifelong_learning_score) as avg_score FROM student_scores GROUP BY school_id;", "sql_context": "CREATE TABLE student_scores (student_id INT, school_id INT, lifelong_learning_score INT); INSERT INTO student_scores (student_id, school_id, lifelong_learning_score) VALUES (1, 101, 85), (2, 101, 90), (3, 102, 75), (4, 102, 80), (5, 103, 95);"}
{"sql_prompt": "What is the average mental health score of students who have not completed any lifelong learning courses?", "sql": "SELECT AVG(mental_health_score) FROM lifelong_learning WHERE student_id NOT IN (SELECT student_id FROM lifelong_learning WHERE course IS NOT NULL);", "sql_context": "CREATE TABLE lifelong_learning (student_id INT, course TEXT, completion_date DATE, mental_health_score FLOAT); INSERT INTO lifelong_learning (student_id, course, completion_date, mental_health_score) VALUES (1, 'Data Science', '2022-01-10', 70.5), (2, 'Programming', '2021-06-15', 85.2), (3, 'Data Science', '2022-03-25', 68.1);"}
{"sql_prompt": "Which biotech startups have received funding in Australia?", "sql": "SELECT name FROM startups WHERE location = 'AU' AND industry = 'Biotech';", "sql_context": "CREATE TABLE startups (id INT, name VARCHAR(100), location VARCHAR(50), industry VARCHAR(50), funding FLOAT); INSERT INTO startups (id, name, location, industry, funding) VALUES (1, 'StartupA', 'AU', 'Biotech', 1000000.0); INSERT INTO startups (id, name, location, industry, funding) VALUES (2, 'StartupB', 'CA', 'Software', 2000000.0); INSERT INTO startups (id, name, location, industry, funding) VALUES (3, 'StartupC', 'AU', 'Biotech', 1500000.0);"}
{"sql_prompt": "Insert new cargo records into the cargo_tracking table with cargo_name 'Fertilizer', destination 'Sydney', and eta '2023-04-15'", "sql": "INSERT INTO cargo_tracking (cargo_name, destination, eta) VALUES ('Fertilizer', 'Sydney', '2023-04-15');", "sql_context": "CREATE TABLE cargo_tracking (cargo_id INT, cargo_name VARCHAR(50), destination VARCHAR(50), eta DATE);"}
{"sql_prompt": "What is the total budget for agricultural innovation projects in Europe?", "sql": "SELECT SUM(budget) FROM agricultural_innovation WHERE location LIKE '%Europe%';", "sql_context": "CREATE TABLE agricultural_innovation (id INT, project_name VARCHAR(50), location VARCHAR(50), budget FLOAT); INSERT INTO agricultural_innovation (id, project_name, location, budget) VALUES (1, 'Precision Farming', 'France', 600000.00);"}
{"sql_prompt": "What are the names of the top 5 artists with the highest number of streams on the \"platformA\" platform, considering only the \"pop\" genre?", "sql": "SELECT artist_name FROM platformA WHERE genre = 'pop' GROUP BY artist_name ORDER BY SUM(streams) DESC LIMIT 5;", "sql_context": "CREATE TABLE platformA (artist_name TEXT, genre TEXT, streams BIGINT);"}
{"sql_prompt": "Determine the number of smart city initiatives in the 'smart_city_initiatives' table for each city, ordered by the city with the most initiatives first.", "sql": "SELECT city_name, COUNT(*) as total_initiatives FROM smart_city_initiatives GROUP BY city_name ORDER BY total_initiatives DESC;", "sql_context": "CREATE TABLE smart_city_initiatives (id INT, city_name VARCHAR(255), initiative_type VARCHAR(255)); INSERT INTO smart_city_initiatives (id, city_name, initiative_type) VALUES (1, 'CityA', 'Smart Lighting'), (2, 'CityA', 'Smart Waste'), (3, 'CityB', 'Smart Transportation'), (4, 'CityB', 'Smart Grid'), (5, 'CityC', 'Smart Parking');"}
{"sql_prompt": "Identify menu items with a price above the 75th percentile of their category's prices.", "sql": "SELECT MenuItem, Category, Price FROM (SELECT MenuItem, Category, Price, NTILE(4) OVER (PARTITION BY Category ORDER BY Price DESC) AS PriceQuantile FROM Menu) AS Subquery WHERE PriceQuantile = 1;", "sql_context": "CREATE TABLE Menu (MenuID INT, MenuItem VARCHAR(50), Category VARCHAR(50), Price DECIMAL(5,2));"}
{"sql_prompt": "How many local vendors have participated in sustainable events in Spain?", "sql": "SELECT SUM(Events) FROM LocalVendors WHERE Country = 'Spain';", "sql_context": "CREATE TABLE LocalVendors (VendorID INT, Country VARCHAR(50), Events INT); INSERT INTO LocalVendors (VendorID, Country, Events) VALUES (1, 'Spain', 3), (2, 'Spain', 2);"}
{"sql_prompt": "What is the minimum number of community policing events held in the state of Texas in the year 2021?", "sql": "SELECT MIN(events) FROM community_policing WHERE state = 'Texas' AND year = 2021;", "sql_context": "CREATE TABLE community_policing (id INT, state VARCHAR(20), year INT, events INT);"}
{"sql_prompt": "Who are the top 5 donors by total donation amount in 2021?", "sql": "SELECT DonorName, SUM(Donations.DonationAmount) AS TotalDonationAmount FROM Donors INNER JOIN Donations ON Donors.DonorID = Donations.DonorID GROUP BY DonorName ORDER BY TotalDonationAmount DESC LIMIT 5;", "sql_context": "CREATE TABLE Donors (DonorID INT, DonorName TEXT, Country TEXT); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (1, 'John Doe', 'USA'); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (2, 'Jane Smith', 'Canada'); CREATE TABLE Donations (DonationID INT, DonorID INT, DonationAmount DECIMAL, DonationDate DATE); INSERT INTO Donations (DonationID, DonorID, DonationAmount, DonationDate) VALUES (1, 1, 500.00, '2021-01-01'); INSERT INTO Donations (DonationID, DonorID, DonationAmount, DonationDate) VALUES (2, 2, 750.00, '2021-12-31');"}
{"sql_prompt": "Insert a new record in the 'audience' table", "sql": "INSERT INTO audience (id, age, gender, location) VALUES (1, 30, 'Female', 'New York');", "sql_context": "CREATE TABLE audience (id INT, age INT, gender VARCHAR(10), location VARCHAR(100));"}
{"sql_prompt": "What is the total number of public transportation trips in New York and London?", "sql": "SELECT COUNT(*) FROM nyc_transit WHERE mode = 'Public Transport'   UNION ALL   SELECT COUNT(*) FROM london_transit WHERE mode = 'Public Transport';", "sql_context": "CREATE TABLE nyc_transit (trip_id INT, mode VARCHAR(20), start_time TIMESTAMP);   CREATE TABLE london_transit (journey_id INT, mode VARCHAR(20), start_time TIMESTAMP);"}
{"sql_prompt": "Identify distinct languages in each heritage site.", "sql": "SELECT heritage_site_id, COUNT(DISTINCT language_name) FROM Languages GROUP BY heritage_site_id;", "sql_context": "CREATE TABLE Heritage_Sites (id INT, site_name VARCHAR(100), country VARCHAR(50), year_established INT, UNIQUE (id));CREATE TABLE Languages (language_id INT, language_name VARCHAR(50), language_status VARCHAR(50), heritage_site_id INT, PRIMARY KEY (language_id), FOREIGN KEY (heritage_site_id) REFERENCES Heritage_Sites(id));"}
{"sql_prompt": "What is the total research grant amount awarded to the top 3 graduate programs with the highest grant amounts?", "sql": "SELECT program_name, SUM(grant_amount) as total_grant_amount FROM (SELECT program_name, grant_amount, ROW_NUMBER() OVER (ORDER BY SUM(grant_amount) DESC) as program_rank FROM graduate_programs JOIN research_grants ON graduate_programs.program_id = research_grants.program_id GROUP BY program_name) as top_programs WHERE program_rank <= 3 GROUP BY program_name;", "sql_context": "CREATE TABLE graduate_programs (program_id INT, program_name VARCHAR(50), discipline VARCHAR(50)); INSERT INTO graduate_programs (program_id, program_name, discipline) VALUES (1, 'Physics', 'sciences'), (2, 'Biology', 'sciences'), (3, 'Chemistry', 'sciences'); CREATE TABLE research_grants (grant_id INT, program_id INT, grant_amount DECIMAL(10,2)); INSERT INTO research_grants (grant_id, program_id, grant_amount) VALUES (1, 1, 50000), (2, 1, 75000), (3, 2, 35000), (4, 3, 10000), (5, 3, 15000);"}
{"sql_prompt": "What is the total supply of the OMG digital asset in the Ethereum network?", "sql": "SELECT total_supply FROM ethereum_network WHERE network_name = 'Ethereum' AND digital_asset = 'OMG';", "sql_context": "CREATE TABLE ethereum_network (network_name VARCHAR(20), digital_asset VARCHAR(10), total_supply DECIMAL(20,2)); INSERT INTO ethereum_network (network_name, digital_asset, total_supply) VALUES ('Ethereum', 'OMG', 140297422.28);"}
{"sql_prompt": "List the number of completed missions and total mission duration (in days) for each space agency.", "sql": "SELECT MissionData.Agency, COUNT(MissionData.MissionID) as CompletedMissions, SUM(MissionData.Duration) as TotalMissionDurationInDays FROM MissionData WHERE MissionData.Status = 'Completed' GROUP BY MissionData.Agency;", "sql_context": "CREATE TABLE MissionData (MissionID INT, Agency VARCHAR(50), Status VARCHAR(50), Duration INT);"}
{"sql_prompt": "List the names and types of all farms in the 'farming' database that use sustainable practices.", "sql": "SELECT name, type FROM farm WHERE sustainability = 'sustainable';", "sql_context": "CREATE TABLE farm (id INT, name VARCHAR(255), type VARCHAR(255), sustainability VARCHAR(255)); INSERT INTO farm (id, name, type, sustainability) VALUES (1, 'Smith Farm', 'organic', 'sustainable'), (2, 'Johnson Farm', 'conventional', 'non-sustainable'), (3, 'Brown Farm', 'organic', 'sustainable'), (4, 'Davis Farm', 'conventional', 'non-sustainable');"}
{"sql_prompt": "What is the average trip distance for bike-sharing in Paris?", "sql": "SELECT AVG(trip_distance) FROM bike_sharing WHERE start_station = 'Paris';", "sql_context": "CREATE TABLE bike_sharing (id INT, trip_id INT, start_time TIMESTAMP, end_time TIMESTAMP, start_station TEXT, end_station TEXT, trip_distance FLOAT);"}
{"sql_prompt": "What was the total cargo weight for vessel 'Aurelia'?", "sql": "SELECT SUM(weight) FROM cargos WHERE vessel_id = (SELECT id FROM vessels WHERE name = 'Aurelia');", "sql_context": "CREATE TABLE vessels (id INT, name VARCHAR(20)); INSERT INTO vessels (id, name) VALUES (1, 'Aurelia'), (2, 'Belfast'), (3, 'Caledonia'); CREATE TABLE cargos (vessel_id INT, weight INT); INSERT INTO cargos (vessel_id, weight) VALUES (1, 5000), (1, 7000), (2, 6000), (3, 8000), (3, 9000);"}
{"sql_prompt": "What is the distribution of user locations for articles about climate change?", "sql": "SELECT user_location, COUNT(*) as count FROM articles WHERE category = 'climate change' GROUP BY user_location;", "sql_context": "CREATE TABLE articles (title text, category text, user_location text); INSERT INTO articles (title, category, user_location) VALUES ('Article 1', 'climate change', 'USA'); INSERT INTO articles (title, category, user_location) VALUES ('Article 2', 'climate change', 'Canada');"}
{"sql_prompt": "Number of infectious disease cases in each village of Bali, ordered by the highest number of cases.", "sql": "SELECT village, cases, RANK() OVER (ORDER BY cases DESC) AS rank FROM infectious_disease_bali;", "sql_context": "CREATE TABLE infectious_disease_bali (village VARCHAR(20), cases INT); INSERT INTO infectious_disease_bali (village, cases) VALUES ('Ubud', 100), ('Kuta', 150), ('Seminyak', 200), ('Canggu', 50);"}
{"sql_prompt": "What is the number of unique users who have streamed music from each genre?", "sql": "SELECT genre, COUNT(DISTINCT user_id) as unique_users FROM user_genre_streams WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY genre;", "sql_context": "CREATE TABLE user_genre_streams (stream_id int, user_id int, timestamp datetime, genre varchar(255)); INSERT INTO user_genre_streams (stream_id, user_id, timestamp, genre) VALUES (1, 123, '2022-01-01 10:00:00', 'Rock');"}
{"sql_prompt": "What is the percentage of financially capable individuals in each region of the country?", "sql": "SELECT region, (COUNT(*) FILTER (WHERE capable = TRUE)) * 100.0 / COUNT(*) AS percentage FROM financial_capability_regions GROUP BY region;", "sql_context": "CREATE TABLE financial_capability_regions (region TEXT, capable BOOLEAN); INSERT INTO financial_capability_regions (region, capable) VALUES ('North', TRUE), ('South', FALSE), ('East', TRUE), ('West', FALSE);"}
{"sql_prompt": "What is the minimum area required for a sustainable farm in India?", "sql": "SELECT MIN(size) FROM farm_sizes WHERE country = 'India';", "sql_context": "CREATE TABLE farm_sizes (id INT, size INT, country VARCHAR(255)); INSERT INTO farm_sizes (id, size, country) VALUES (1, 2, 'India');"}
{"sql_prompt": "Which satellite has the least number of total launches in 2019?", "sql": "SELECT satellite, MIN(launches) AS least_launches FROM satellite_launches WHERE year = 2019 GROUP BY satellite HAVING least_launches = (SELECT MIN(launches) FROM satellite_launches WHERE year = 2019);", "sql_context": "CREATE TABLE satellite_launches (id INT, satellite VARCHAR(255), year INT, launches INT); INSERT INTO satellite_launches (id, satellite, year, launches) VALUES (1, 'Starlink-1', 2019, 3), (2, 'Galileo IOV-1', 2019, 2), (3, 'Starlink-2', 2019, 4);"}
{"sql_prompt": "What is the average number of visitors to each Australian cultural site per month?", "sql": "SELECT site, AVG(visitors) as avg_visitors FROM cultural_sites WHERE country = 'Australia' GROUP BY site;", "sql_context": "CREATE TABLE cultural_sites (country VARCHAR(20), site VARCHAR(50), visitors INT, month INT); INSERT INTO cultural_sites (country, site, visitors, month) VALUES ('Australia', 'Sydney Opera House', 250000, 1), ('Australia', 'Uluru', 150000, 1), ('Australia', 'Sydney Opera House', 220000, 2), ('Australia', 'Uluru', 140000, 2);"}
{"sql_prompt": "Insert a new record into the regulatory_compliance table with the following data: vessel_id 1301, compliance_status 'Compliant'", "sql": "INSERT INTO regulatory_compliance (vessel_id, compliance_status) VALUES (1301, 'Compliant');", "sql_context": "CREATE TABLE regulatory_compliance (id INT, vessel_id INT, compliance_status VARCHAR(20));"}
{"sql_prompt": "What is the maximum number of hospital beds in a rural hospital in Nigeria and Kenya?", "sql": "SELECT country, MAX(num_beds) FROM rural_hospitals GROUP BY country;", "sql_context": "CREATE TABLE rural_hospitals (country VARCHAR(20), hospital_name VARCHAR(50), num_beds INT); INSERT INTO rural_hospitals (country, hospital_name, num_beds) VALUES ('Nigeria', 'Hospital DD', 100), ('Nigeria', 'Hospital EE', 150), ('Kenya', 'Hospital FF', 200), ('Kenya', 'Hospital GG', 250);"}
{"sql_prompt": "Display the total number of employees by gender at each mining site.", "sql": "SELECT mining_sites.name, gender, COUNT(*) FROM mining_sites INNER JOIN employees ON mining_sites.id = employees.site_id GROUP BY mining_sites.name, gender;", "sql_context": "CREATE TABLE mining_sites(id INT, name VARCHAR, location VARCHAR); CREATE TABLE employees(site_id INT, gender VARCHAR, role VARCHAR); INSERT INTO mining_sites(id, name, location) VALUES (1, 'Acme Mining', 'Northern MN'), (2, 'Beta Mining', 'Southern MN'); INSERT INTO employees(site_id, gender, role) VALUES (1, 'Male', 'Engineer'), (1, 'Female', 'Operator'), (2, 'Male', 'Manager');"}
{"sql_prompt": "What is the total number of seismic assessments conducted in the state of California in the last 10 years and their respective assessment companies?", "sql": "SELECT COUNT(*), assessment_company FROM assessment WHERE state = 'California' AND assessment_year >= 2011 GROUP BY assessment_company;", "sql_context": "CREATE TABLE assessment (id INT, name TEXT, state TEXT, assessment_year INT, assessment_company TEXT); INSERT INTO assessment (id, name, state, assessment_year, assessment_company) VALUES (1, 'Assessment A', 'California', 2019, 'Company A'); INSERT INTO assessment (id, name, state, assessment_year, assessment_company) VALUES (2, 'Assessment B', 'California', 2017, 'Company B');"}
{"sql_prompt": "Find the number of districts where more than 50% of citizens have participated in public hearings", "sql": "SELECT District FROM Districts WHERE CitizensParticipated > (TotalCitizens * 0.5);", "sql_context": "CREATE TABLE Districts (DistrictID INT, District TEXT, TotalCitizens INT, CitizensParticipated INT); INSERT INTO Districts (DistrictID, District, TotalCitizens, CitizensParticipated) VALUES (1, 'District1', 1000, 600), (2, 'District2', 2000, 1200), (3, 'District3', 1500, 800);"}
{"sql_prompt": "What is the average depth of the Puerto Rico Trench in the Atlantic Ocean?", "sql": "SELECT ocean, AVG(avg_depth) FROM marine_trenches WHERE ocean = 'Atlantic' AND trench = 'Puerto Rico Trench' GROUP BY ocean;", "sql_context": "CREATE TABLE marine_trenches (ocean TEXT, trench TEXT, avg_depth INTEGER);INSERT INTO marine_trenches (ocean, trench, avg_depth) VALUES ('Pacific', 'Mariana Trench', 5000), ('Atlantic', 'Puerto Rico Trench', 8376);"}
{"sql_prompt": "Find the top five chemicals with the highest environmental impact.", "sql": "SELECT chemical, impact FROM (SELECT chemical, impact, RANK() OVER (ORDER BY impact DESC) as rank FROM environmental_impact) as subquery WHERE rank <= 5;", "sql_context": "CREATE TABLE environmental_impact (chemical VARCHAR(50), impact FLOAT); INSERT INTO environmental_impact (chemical, impact) VALUES ('Methane', 100); INSERT INTO environmental_impact (chemical, impact) VALUES ('Carbon Monoxide', 80);"}
{"sql_prompt": "Which suppliers from 'Country B' provide parts to factories without Industry 4.0 practices, listed in descending order of the number of factories they supply?", "sql": "SELECT Suppliers.Country, Suppliers.ID, COUNT(Factories.ID) AS 'Number of Factories' FROM Suppliers LEFT JOIN Factories ON Suppliers.ID = Factories.Supplier_ID WHERE Suppliers.Country = 'Country B' AND Factories.Industry_4_0 = FALSE GROUP BY Suppliers.ID ORDER BY COUNT(Factories.ID) DESC;", "sql_context": "CREATE TABLE Suppliers (ID INT, Country VARCHAR(20)); CREATE TABLE Factories (ID INT, Supplier_ID INT, Industry_4_0 BOOLEAN); INSERT INTO Suppliers (ID, Country) VALUES (1, 'Country A'); INSERT INTO Suppliers (ID, Country) VALUES (2, 'Country B'); INSERT INTO Factories (ID, Supplier_ID, Industry_4_0) VALUES (1, 1, TRUE); INSERT INTO Factories (ID, Supplier_ID, Industry_4_0) VALUES (2, 1, TRUE); INSERT INTO Factories (ID, Supplier_ID, Industry_4_0) VALUES (3, 2, FALSE); INSERT INTO Factories (ID, Supplier_ID, Industry_4_0) VALUES (4, 2, FALSE);"}
{"sql_prompt": "Which community has the highest obesity rate in the US?", "sql": "SELECT Name, ObesityRate FROM Community WHERE State = 'US' ORDER BY ObesityRate DESC LIMIT 1;", "sql_context": "CREATE TABLE Community (Name TEXT, State TEXT, ObesityRate FLOAT); INSERT INTO Community (Name, State, ObesityRate) VALUES ('Community A', 'California', 20.0); INSERT INTO Community (Name, State, ObesityRate) VALUES ('Community B', 'Texas', 25.0);"}
{"sql_prompt": "List the top 2 cultural heritage sites in Paris by visitor count.", "sql": "SELECT name, visitors FROM cultural_sites_paris WHERE city = 'Paris' ORDER BY visitors DESC LIMIT 2;", "sql_context": "CREATE TABLE cultural_sites_paris (site_id INT, name TEXT, city TEXT, visitors INT); INSERT INTO cultural_sites_paris (site_id, name, city, visitors) VALUES (1, 'Eiffel Tower', 'Paris', 7000000), (2, 'Notre Dame Cathedral', 'Paris', 6000000), (3, 'Louvre Museum', 'Paris', 5000000);"}
{"sql_prompt": "How many articles are there in the 'sports' category?", "sql": "SELECT COUNT(*) FROM news WHERE category = 'Sports';", "sql_context": "CREATE TABLE news (title VARCHAR(255), author VARCHAR(255), age INT, category VARCHAR(255)); INSERT INTO news (title, author, age, category) VALUES ('Sample News', 'Jane Smith', 5, 'Sports');"}
{"sql_prompt": "AI adoption rate in 'Europe' and 'Americas'?", "sql": "SELECT region, AVG(ai_adoption) FROM hotel_ai GROUP BY region HAVING region IN ('Europe', 'Americas');", "sql_context": "CREATE TABLE hotel_ai (hotel_id INT, hotel_name TEXT, region TEXT, ai_adoption BOOLEAN); INSERT INTO hotel_ai (hotel_id, hotel_name, region, ai_adoption) VALUES (1, 'Royal Castle', 'Europe', true), (2, 'Paris Luxury Hotel', 'Europe', true), (3, 'New York Palace', 'Americas', true), (4, 'Buenos Aires Hotel', 'Americas', false);"}
{"sql_prompt": "List safety incidents for VESSEL009", "sql": "SELECT incident_type FROM safety_incidents WHERE vessel_id = 'VES009';", "sql_context": "CREATE TABLE vessels (id VARCHAR(20), name VARCHAR(20)); INSERT INTO vessels (id, name) VALUES ('VES009', 'VESSEL009'), ('VES010', 'VESSEL010'); CREATE TABLE safety_incidents (vessel_id VARCHAR(20), incident_type VARCHAR(50)); INSERT INTO safety_incidents (vessel_id, incident_type) VALUES ('VES009', 'Collision'), ('VES009', 'Fire'), ('VES010', 'Grounding');"}
{"sql_prompt": "Sum cost of art restoration projects with budget over 50000", "sql": "SELECT SUM(ProjectCost) AS TotalCost FROM RestorationProjects WHERE ProjectBudget > 50000;", "sql_context": "CREATE TABLE RestorationProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(255), ProjectCost DECIMAL(10,2), ProjectBudget DECIMAL(10,2)); INSERT INTO RestorationProjects (ProjectID, ProjectName, ProjectCost, ProjectBudget) VALUES (1, 'Mona Lisa Restoration', 12000.00, 25000.00), (2, 'David Restoration', 15000.00, 50000.00), (3, 'The Last Supper Restoration', 20000.00, 75000.00), (4, 'Guernica Restoration', 10000.00, 40000.00);"}
{"sql_prompt": "Update the community_education table to reflect the current fiscal year, 2023", "sql": "UPDATE community_education SET fiscal_year = 2023;", "sql_context": "CREATE TABLE community_education (event VARCHAR(50), fiscal_year INT); INSERT INTO community_education (event, fiscal_year) VALUES ('Wildlife Conservation Workshop', 2021), ('Habitat Restoration Symposium', 2022);"}
{"sql_prompt": "What is the average age of trees in 'Mediterranean Forests'?", "sql": "SELECT avg_age FROM forests WHERE name = 'Mediterranean Forests';", "sql_context": "CREATE TABLE forests (id INT, name VARCHAR(50), avg_age INT); INSERT INTO forests (id, name, avg_age) VALUES (2, 'Mediterranean Forests', 100);"}
{"sql_prompt": "What is the average age of artifacts excavated in each year, grouped by excavation site?", "sql": "SELECT excavation_site, year, AVG(age) OVER (PARTITION BY excavation_site, year) as avg_age FROM ancient_artifacts ORDER BY excavation_site, year;", "sql_context": "CREATE TABLE ancient_artifacts (id INT, artifact_name VARCHAR(50), age INT, year INT, excavation_site VARCHAR(50));"}
{"sql_prompt": "Delete all records of public meetings in the 'Transportation' department from before 2022.", "sql": "DELETE FROM meetings WHERE dept = 'Transportation' AND meeting_date < '2022-01-01';", "sql_context": "CREATE TABLE meetings (id INT, dept VARCHAR(255), meeting_date DATE); INSERT INTO meetings (id, dept, meeting_date) VALUES (1, 'Urban Development', '2022-03-01'), (2, 'Transportation', '2021-05-15'), (3, 'Transportation', '2022-03-04');"}
{"sql_prompt": "Update the explainability score for ModelB to 0.85.", "sql": "UPDATE explainability_scores SET score = 0.85 WHERE model_id = (SELECT id FROM models WHERE name = 'ModelB');", "sql_context": "CREATE TABLE explainability_scores (id INT, model_id INT, score FLOAT); INSERT INTO explainability_scores (id, model_id, score) VALUES (1, 1, 0.75), (2, 2, 0.91); CREATE TABLE models (id INT, name TEXT); INSERT INTO models (id, name) VALUES (1, 'ModelA'), (2, 'ModelB');"}
{"sql_prompt": "Who are the top 5 users in Brazil by number of posts?", "sql": "SELECT users.id, users.country, COUNT(posts.id) AS post_count FROM users JOIN posts ON users.id = posts.user_id WHERE users.country = 'Brazil' GROUP BY users.id ORDER BY post_count DESC LIMIT 5;", "sql_context": "CREATE TABLE users (id INT, country VARCHAR(255)); CREATE TABLE posts (id INT, user_id INT, content TEXT); INSERT INTO users (id, country) VALUES (1, 'Brazil'), (2, 'Brazil'), (3, 'Brazil'), (4, 'France'), (5, 'Germany'); INSERT INTO posts (id, user_id, content) VALUES (1, 1, 'Hello'), (2, 1, 'World'), (3, 2, 'AI'), (4, 2, 'Data'), (5, 3, 'Science');"}
{"sql_prompt": "What is the minimum donation amount in the \"theater_donors\" table?", "sql": "SELECT MIN(donation_amount) FROM theater_donors;", "sql_context": "CREATE TABLE theater_donors (donor_id INT, donation_amount FLOAT, donation_date DATE); INSERT INTO theater_donors (donor_id, donation_amount, donation_date) VALUES (1, 25.00, '2021-01-01'), (2, 30.00, '2021-02-01'), (3, 35.00, '2021-03-01');"}
{"sql_prompt": "Delete the production record for well 'W011' on '2021-03-05' from the Oil_Production table?", "sql": "DELETE FROM Oil_Production WHERE well = 'W011' AND production_date = '2021-03-05';", "sql_context": "CREATE TABLE Oil_Production (well text, production_date date, quantity real); INSERT INTO Oil_Production (well, production_date, quantity) VALUES ('W011', '2021-03-01', 150.5), ('W011', '2021-03-05', 190.0);"}
{"sql_prompt": "What is the total revenue for 'Burger' and 'Pizza' items?", "sql": "SELECT SUM(revenue) FROM revenue WHERE item_name IN ('Burger', 'Pizza');", "sql_context": "CREATE TABLE revenue (item_name TEXT, revenue INTEGER); INSERT INTO revenue (item_name, revenue) VALUES ('Burger', 500), ('Pizza', 700), ('Pasta', 600), ('Salad', 400);"}
{"sql_prompt": "delete records from the InfectiousDiseaseData table where the DiseaseName is 'Measles' and the ReportDate is before '2020-01-01'", "sql": "DELETE FROM InfectiousDiseaseData WHERE DiseaseName = 'Measles' AND ReportDate < '2020-01-01';", "sql_context": "CREATE TABLE InfectiousDiseaseData (ID INT, DiseaseName TEXT, ReportDate DATE, Cases INT, County TEXT); INSERT INTO InfectiousDiseaseData (ID, DiseaseName, ReportDate, Cases, County) VALUES (1, 'Measles', '2019-12-31', 5, 'LA'), (2, 'Flu', '2020-02-01', 20, 'NY');"}
{"sql_prompt": "How many projects were completed in the energy sector last year?", "sql": "SELECT COUNT(*) FROM projects WHERE category = 'Energy' AND status = 'Completed' AND year = 2021;", "sql_context": "CREATE TABLE projects (id INT, name VARCHAR(255), category VARCHAR(255), year INT, status VARCHAR(255)); INSERT INTO projects (id, name, category, year, status) VALUES (3, 'Solar Farm Construction', 'Energy', 2021, 'Completed');"}
{"sql_prompt": "What is the total revenue generated by second-hand products in Asia?", "sql": "SELECT SUM(price) FROM products JOIN vendors ON products.vendor_id = vendors.vendor_id WHERE second_hand = true AND region = 'Asia';", "sql_context": "CREATE TABLE vendors (vendor_id INT, vendor_name TEXT, region TEXT);CREATE TABLE products (product_id INT, product_name TEXT, price DECIMAL, second_hand BOOLEAN, vendor_id INT); INSERT INTO vendors (vendor_id, vendor_name, region) VALUES (1, 'VendorA', 'China'), (2, 'VendorB', 'India'); INSERT INTO products (product_id, product_name, price, second_hand, vendor_id) VALUES (1, 'ProductX', 15.99, true, 1), (2, 'ProductY', 12.49, false, 1), (3, 'ProductZ', 19.99, true, 2);"}
{"sql_prompt": "Delete records in landfill_capacity table where capacity is greater than 30000 tons", "sql": "DELETE FROM landfill_capacity WHERE capacity > 30000;", "sql_context": "CREATE TABLE landfill_capacity (location VARCHAR(50), capacity INT);"}
{"sql_prompt": "Insert a new record for a new species 'Kob' into the fish_species table", "sql": "INSERT INTO fish_species (species_id, species, conservation_status) VALUES (10, 'Kob', 'Least Concern');", "sql_context": "CREATE TABLE fish_species (species_id INT, species VARCHAR(50), conservation_status VARCHAR(50));"}
{"sql_prompt": "Find the total number of wildlife sightings in Svalbard in 2018.", "sql": "SELECT SUM(sightings) FROM WildlifeSightings WHERE location = 'Svalbard' AND year = 2018;", "sql_context": "CREATE TABLE WildlifeSightings (location TEXT, year INTEGER, sightings INTEGER);"}
{"sql_prompt": "Who are the top 5 cities with the most public libraries?", "sql": "SELECT c.name, COUNT(l.id) AS library_count FROM cities c JOIN libraries l ON c.id = l.city_id GROUP BY c.name ORDER BY library_count DESC LIMIT 5;", "sql_context": "CREATE TABLE cities (id INT, name VARCHAR(255)); CREATE TABLE libraries (id INT, city_id INT, name VARCHAR(255));"}
{"sql_prompt": "What was the manufacturing cost of the first spacecraft?", "sql": "SELECT manufacturing_cost FROM Spacecrafts WHERE id = 1;", "sql_context": "CREATE TABLE Spacecrafts (id INT, name VARCHAR(255), launch_date DATE, manufacturing_cost FLOAT); INSERT INTO Spacecrafts (id, name, launch_date, manufacturing_cost) VALUES (1, 'Sputnik 1', '1957-10-04', 140000); INSERT INTO Spacecrafts (id, name, launch_date, manufacturing_cost) VALUES (2, 'Explorer 1', '1958-01-31', 150000); INSERT INTO Spacecrafts (id, name, launch_date, manufacturing_cost) VALUES (3, 'Vostok 1', '1961-04-12', 240000);"}
{"sql_prompt": "What is the total number of tourists who visited sustainable tourism destinations in Asia and Oceania in 2022?", "sql": "SELECT COUNT(*) as Total FROM Visitors JOIN TourismDestinations ON Visitors.DestinationID = TourismDestinations.DestinationID WHERE VisitYear = 2022 AND (Continent = 'Asia' OR Continent = 'Oceania') AND DestinationType IN ('SustainableTourism', 'EcoTourism');", "sql_context": "CREATE TABLE TourismDestinations (DestinationID INT, DestinationType VARCHAR(20), Continent VARCHAR(20)); INSERT INTO TourismDestinations (DestinationID, DestinationType, Continent) VALUES (1, 'SustainableTourism', 'Asia'), (2, 'EcoTourism', 'Oceania'); CREATE TABLE Visitors (VisitorID INT, Nationality VARCHAR(20), DestinationID INT, VisitYear INT); INSERT INTO Visitors (VisitorID, Nationality, DestinationID, VisitYear) VALUES (1, 'Chinese', 1, 2022), (2, 'Australian', 2, 2022);"}
{"sql_prompt": "Identify companies in the transportation sector with no diversity metrics reported, and list their names and founding dates.", "sql": "SELECT companies.name, companies.founded_date FROM companies LEFT JOIN diversity ON companies.id = diversity.company_id WHERE diversity.gender_diversity IS NULL AND diversity.ethnic_diversity IS NULL AND companies.industry = 'Transportation';", "sql_context": "CREATE TABLE companies (id INT, name TEXT, industry TEXT, founded_date DATE); CREATE TABLE diversity (company_id INT, gender_diversity INT, ethnic_diversity INT); INSERT INTO companies (id, name, industry, founded_date) VALUES (1, 'WheelGo', 'Transportation', '2010-01-01'); INSERT INTO diversity (company_id, gender_diversity, ethnic_diversity) VALUES (NULL, NULL, NULL);"}
{"sql_prompt": "Delete all records from the 'Volunteers' table where the volunteer name is 'Brian Chen'", "sql": "DELETE FROM Volunteers WHERE volunteer_name = 'Brian Chen';", "sql_context": "CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), hours_volunteered DECIMAL(10,2)); INSERT INTO Volunteers (id, volunteer_name, hours_volunteered) VALUES (1, 'Alice Lee', 3.00), (2, 'Brian Chen', 5.00);"}
{"sql_prompt": "Find the models that have been trained on both the 'creative_ai' and 'ai_safety' datasets.", "sql": "SELECT model_name FROM model_datasets WHERE dataset_name IN ('creative_ai', 'ai_safety') GROUP BY model_name HAVING COUNT(DISTINCT dataset_name) = 2;", "sql_context": "CREATE TABLE model_datasets (model_id INT, model_name VARCHAR(50), dataset_name VARCHAR(50)); INSERT INTO model_datasets (model_id, model_name, dataset_name) VALUES (1, 'CNN', 'creative_ai'), (2, 'LSTM', 'creative_ai'), (3, 'GRU', 'ai_safety'), (4, 'MLP', 'ai_safety');"}
{"sql_prompt": "display risk assessment scores and their corresponding descriptions", "sql": "SELECT score, description FROM risk_assessments ORDER BY score;", "sql_context": "CREATE TABLE if not exists risk_assessments (id INT PRIMARY KEY, score INT, description TEXT);"}
{"sql_prompt": "What is the number of hospitals in each state, and how many of them are specialized in mental health?", "sql": "SELECT h.State, COUNT(*) AS TotalHospitals, SUM(CASE WHEN h.Specialized THEN 1 ELSE 0 END) AS SpecializedMentalHealthHospitals FROM Hospitals h INNER JOIN StateData sd ON h.State = sd.State GROUP BY h.State;", "sql_context": "CREATE TABLE Hospitals (Name VARCHAR(255), State VARCHAR(255), Specialized BOOLEAN); INSERT INTO Hospitals (Name, State, Specialized) VALUES ('Hospital A', 'State A', TRUE), ('Hospital B', 'State A', FALSE), ('Hospital C', 'State B', TRUE), ('Hospital D', 'State B', FALSE); CREATE TABLE StateData (State VARCHAR(255), TotalHospitals DECIMAL(5,0)); INSERT INTO StateData (State, TotalHospitals) VALUES ('State A', 200), ('State B', 150);"}
{"sql_prompt": "What is the average purchase amount for in-game items by players from the United States?", "sql": "SELECT AVG(amount) FROM in_game_purchases igp JOIN players p ON igp.player_id = p.id WHERE p.country = 'United States';", "sql_context": "CREATE TABLE players (id INT, country VARCHAR(255)); INSERT INTO players (id, country) VALUES (1, 'United States'), (2, 'Canada'); CREATE TABLE in_game_purchases (id INT, player_id INT, amount DECIMAL(5,2)); INSERT INTO in_game_purchases (id, player_id, amount) VALUES (1, 1, 10.50), (2, 1, 12.25), (3, 2, 5.00);"}
{"sql_prompt": "How many public transportation trips were taken in urban areas compared to rural areas in 2020?", "sql": "SELECT A.type, SUM(TT.trips) as Total_Trips FROM Transportation_Trips TT JOIN Areas A ON TT.area_id = A.id WHERE TT.year = 2020 GROUP BY A.type;", "sql_context": "CREATE TABLE Areas (id INT, type VARCHAR(50)); INSERT INTO Areas (id, type) VALUES (1, 'Urban'), (2, 'Rural'); CREATE TABLE Transportation_Trips (area_id INT, year INT, trips INT); INSERT INTO Transportation_Trips (area_id, year, trips) VALUES (1, 2020, 1000000), (2, 2020, 500000), (1, 2021, 1200000), (2, 2021, 600000);"}
{"sql_prompt": "Delete all fares collected on buses before 2022.", "sql": "DELETE FROM fares WHERE type = 'Bus' AND collection_date < '2022-01-01';", "sql_context": "CREATE TABLE fares (id INT, type TEXT, amount DECIMAL, collection_date DATE);   INSERT INTO fares (id, type, amount, collection_date) VALUES (1, 'Train', 5.00, '2022-01-01'), (2, 'Train', 5.00, '2022-01-02'), (3, 'Bus', 2.00, '2021-12-31');"}
{"sql_prompt": "What is the total number of marine mammals and reptiles observed in the Southern Ocean?", "sql": "SELECT SUM(count) FROM southern_marine_life WHERE species IN ('Seal', 'Whale', 'Turtle');", "sql_context": "CREATE TABLE southern_marine_life (species VARCHAR(255), count INT); INSERT INTO southern_marine_life (species, count) VALUES ('Seal', 300), ('Whale', 250), ('Turtle', 150), ('Dolphin', 200);"}
{"sql_prompt": "Calculate the percentage of biotech startups that received funding in South Korea.", "sql": "SELECT country, 100.0 * SUM(CAST(received_funding AS FLOAT)) / COUNT(*) as percentage FROM startups_funding GROUP BY country;", "sql_context": "CREATE TABLE startups_funding (id INT, name TEXT, country TEXT, received_funding BOOLEAN); INSERT INTO startups_funding (id, name, country, received_funding) VALUES (1, 'Startup1', 'South Korea', TRUE), (2, 'Startup2', 'South Korea', FALSE), (3, 'Startup3', 'USA', TRUE);"}
{"sql_prompt": "What is the total number of crimes committed in each borough, sorted by crime count?", "sql": "SELECT b.borough_name, SUM(c.crime_count) AS total_crime_count FROM boroughs b INNER JOIN crimes c ON b.bid = c.bid GROUP BY b.borough_name ORDER BY total_crime_count DESC;", "sql_context": "CREATE TABLE boroughs (bid INT, borough_name VARCHAR(255)); CREATE TABLE crimes (cid INT, bid INT, crime_count INT);"}
{"sql_prompt": "Delete all soil moisture data for farm_id 123", "sql": "DELETE FROM soil_moisture WHERE farm_id = 123;", "sql_context": "CREATE TABLE soil_moisture (id INT, farm_id INT, moisture_level FLOAT, measurement_date DATE);"}
{"sql_prompt": "What is the average quantity of sustainable materials used per production?", "sql": "SELECT AVG(quantity) FROM production JOIN materials ON production.material_id = materials.material_id WHERE is_sustainable = TRUE;", "sql_context": "CREATE TABLE production (production_id INT, material_id INT, quantity INT); CREATE TABLE materials (material_id INT, material_name TEXT, is_sustainable BOOLEAN); INSERT INTO production (production_id, material_id, quantity) VALUES (1, 1, 100), (2, 1, 200), (3, 2, 50), (4, 2, 150), (5, 1, 75); INSERT INTO materials (material_id, material_name, is_sustainable) VALUES (1, 'Organic Cotton', TRUE), (2, 'Polyester', FALSE);"}
{"sql_prompt": "List the dams in Texas that were constructed before 1970.", "sql": "SELECT name FROM Dams WHERE location = 'Texas' AND built < '1970-01-01';", "sql_context": "CREATE TABLE Dams(id INT, name TEXT, location TEXT, built DATE); INSERT INTO Dams(id, name, location, built) VALUES (1, 'Amistad Dam', 'Texas', '1969-09-28');"}
{"sql_prompt": "Update the phone number for the farmer named 'Maria Lopez' in the 'farmers' table to '555-987-6543'.", "sql": "UPDATE farmers SET phone = '555-987-6543' WHERE name = 'Maria Lopez';", "sql_context": "CREATE TABLE farmers (id INT, name VARCHAR(255), state VARCHAR(255), phone VARCHAR(255)); INSERT INTO farmers (id, name, state, phone) VALUES (1, 'Maria Lopez', 'California', '555-123-4567');"}
{"sql_prompt": "What is the maximum number of employees in a single mining operation?", "sql": "SELECT MAX(num_employees) FROM mining_operations;", "sql_context": "CREATE TABLE mining_operations (id INT PRIMARY KEY, operation_name VARCHAR(50), location VARCHAR(50), num_employees INT);"}
{"sql_prompt": "Which cities have only one type of facility?", "sql": "SELECT city FROM (SELECT city, COUNT(DISTINCT facility_type) AS num_types FROM city_facility_types GROUP BY city) AS temp WHERE num_types = 1;", "sql_context": "CREATE TABLE city_facility_types (city TEXT, facility_type TEXT); INSERT INTO city_facility_types (city, facility_type) VALUES ('CityA', 'hospital'), ('CityB', 'hospital'), ('CityC', 'hospital'), ('CityA', 'school'), ('CityB', 'school'), ('CityC', 'school'), ('CityA', 'library'), ('CityB', 'library'), ('CityC', 'library');"}
{"sql_prompt": "List the number of workers and their average hourly wage per country, for factories with 'fair_trade' certification.", "sql": "SELECT country, AVG(hourly_wage) as avg_wage, COUNT(DISTINCT id) as worker_count FROM Workers JOIN Factories ON Workers.factory_id = Factories.id WHERE certification = 'fair_trade' GROUP BY country;", "sql_context": "CREATE TABLE Workers (id INT, factory_id INT, country VARCHAR(50), hourly_wage DECIMAL(4,2));CREATE TABLE Factories (id INT, name VARCHAR(50), certification VARCHAR(20)); INSERT INTO Workers (id, factory_id, country, hourly_wage) VALUES (1, 1001, 'Bangladesh', 2.50), (2, 1002, 'Cambodia', 2.25), (3, 1003, 'India', 2.75), (4, 1004, 'Vietnam', 2.10); INSERT INTO Factories (id, name, certification) VALUES (1001, 'Green Valley', 'fair_trade'), (1002, 'Eco Fields', 'not_certified'), (1003, 'Sustainable Peak', 'fair_trade'), (1004, 'Fast Fashion Inc', 'not_certified');"}
{"sql_prompt": "What is the average billing amount for cases handled by attorneys with more than 10 years of experience?", "sql": "SELECT AVG(BillingAmount) FROM Cases INNER JOIN Attorneys ON Cases.AttorneyID = Attorneys.AttorneyID WHERE YearsOfExperience > 10;", "sql_context": "CREATE TABLE Attorneys (AttorneyID INT, YearsOfExperience INT, Specialization VARCHAR(255)); INSERT INTO Attorneys (AttorneyID, YearsOfExperience, Specialization) VALUES (1, 12, 'Civil Law'); INSERT INTO Attorneys (AttorneyID, YearsOfExperience, Specialization) VALUES (2, 15, 'Criminal Law'); INSERT INTO Attorneys (AttorneyID, YearsOfExperience, Specialization) VALUES (3, 5, 'Family Law'); CREATE TABLE Cases (CaseID INT, AttorneyID INT, BillingAmount DECIMAL(10, 2)); INSERT INTO Cases (CaseID, AttorneyID, BillingAmount) VALUES (1, 1, 2000.00); INSERT INTO Cases (CaseID, AttorneyID, BillingAmount) VALUES (2, 2, 3000.00); INSERT INTO Cases (CaseID, AttorneyID, BillingAmount) VALUES (3, 3, 1500.00);"}
{"sql_prompt": "What is the average cost of accommodations per student who received accommodations in the MobilityImpairment category in the AssistiveTechnology table?", "sql": "SELECT AVG(cost) FROM AssistiveTechnology WHERE studentID IN (SELECT studentID FROM AssistiveTechnology WHERE accommodationType = 'MobilityImpairment');", "sql_context": "CREATE TABLE AssistiveTechnology (studentID INT, accommodationType VARCHAR(50), cost DECIMAL(5,2));"}
{"sql_prompt": "How many students are enrolled in each school type (public, private, or charter) in the 'school_enrollment' table?", "sql": "SELECT school_type, SUM(student_count) FROM school_enrollment GROUP BY school_type;", "sql_context": "CREATE TABLE school_enrollment (school_id INT, student_count INT, school_type VARCHAR(10));"}
{"sql_prompt": "List all types of vessels in the registry.", "sql": "SELECT DISTINCT Type FROM Vessels INNER JOIN Registry ON Vessels.ID = Registry.Vessel_ID;", "sql_context": "CREATE TABLE Vessels (ID VARCHAR(10), Name VARCHAR(20), Type VARCHAR(20)); INSERT INTO Vessels (ID, Name, Type) VALUES ('1', 'Vessel A', 'Cargo'), ('2', 'Vessel B', 'Tanker'); CREATE TABLE Registry (ID VARCHAR(10), Vessel_ID VARCHAR(10), Registered_Country VARCHAR(20)); INSERT INTO Registry (ID, Vessel_ID, Registered_Country) VALUES ('1', '1', 'USA'), ('2', '2', 'Canada');"}
{"sql_prompt": "Insert new player records for the \"Virtual Racers\" game", "sql": "INSERT INTO players (player_id, name, country, date_registered) VALUES (1, 'John Doe', 'USA', '2022-01-01'), (2, 'Jane Smith', 'Canada', '2022-01-02'); INSERT INTO player_scores (player_id, game_name, score, date) VALUES (1, 'Virtual Racers', 800, '2022-01-01'), (2, 'Virtual Racers', 900, '2022-01-02');", "sql_context": "CREATE TABLE players (player_id INT, name VARCHAR(255), country VARCHAR(255), date_registered DATE); CREATE TABLE player_scores (player_id INT, game_name VARCHAR(255), score INT, date DATE);"}
{"sql_prompt": "What is the total revenue generated by players from Europe in 2018?", "sql": "SELECT SUM(Transactions.Amount) FROM Transactions JOIN PlayerLocation ON Transactions.PlayerID = PlayerLocation.PlayerID WHERE PlayerLocation.Location IN ('Germany', 'France', 'UK', 'Italy', 'Spain') AND Transactions.TransactionYear = 2018;", "sql_context": "CREATE TABLE Transactions (TransactionID INT, PlayerID INT, Amount DECIMAL(10, 2), TransactionYear INT); INSERT INTO Transactions (TransactionID, PlayerID, Amount, TransactionYear) VALUES (1, 1, 100, 2019), (2, 2, 150, 2018), (3, 3, 200, 2019), (4, 4, 75, 2018), (5, 5, 250, 2018), (6, 6, 120, 2018), (7, 7, 180, 2019), (8, 8, 90, 2018), (9, 9, 220, 2019), (10, 10, 300, 2018); CREATE TABLE PlayerLocation (PlayerID INT, Location VARCHAR(20)); INSERT INTO PlayerLocation (PlayerID, Location) VALUES (1, 'USA'), (2, 'Germany'), (3, 'USA'), (4, 'France'), (5, 'UK'), (6, 'France'), (7, 'USA'), (8, 'Germany'), (9, 'Italy'), (10, 'Spain');"}
{"sql_prompt": "Update the age of an athlete", "sql": "UPDATE athletes SET age = 31 WHERE id = 1;", "sql_context": "CREATE TABLE athletes (id INT, name VARCHAR(50), age INT, sport VARCHAR(50)); INSERT INTO athletes (id, name, age, sport) VALUES (1, 'John Doe', 30, 'Basketball'), (2, 'Jane Smith', 28, 'Soccer');"}
{"sql_prompt": "How many military vehicles has Raytheon Technologies delivered to the Middle East?", "sql": "SELECT SUM(quantity) FROM Raytheon_Deliveries WHERE corporation = 'Raytheon Technologies' AND region = 'Middle East' AND equipment = 'Military Vehicles';", "sql_context": "CREATE TABLE Raytheon_Deliveries (id INT, corporation VARCHAR(20), region VARCHAR(20), quantity INT, equipment VARCHAR(20)); INSERT INTO Raytheon_Deliveries (id, corporation, region, quantity, equipment) VALUES (1, 'Raytheon Technologies', 'Middle East', 20, 'Military Vehicles');"}
{"sql_prompt": "Update the 'construction_projects' table to set the 'project_budget' to '5000000' for all records where 'project_name' is 'Highway Expansion'", "sql": "UPDATE construction_projects SET project_budget = 5000000 WHERE project_name = 'Highway Expansion';", "sql_context": "CREATE TABLE construction_projects (project_id INT, project_name TEXT, project_budget INT, project_location TEXT);"}
{"sql_prompt": "What is the minimum rating of TV shows produced in the USA and Canada?", "sql": "SELECT MIN(rating) FROM TVShows WHERE production_country IN ('USA', 'Canada');", "sql_context": "CREATE TABLE TVShows (tv_show_id INT, title VARCHAR(255), rating FLOAT, production_country VARCHAR(50)); INSERT INTO TVShows (tv_show_id, title, rating, production_country) VALUES (1, 'TVShow1', 7.5, 'USA'), (2, 'TVShow2', 8.2, 'Canada'), (3, 'TVShow3', 6.9, 'Mexico');"}
{"sql_prompt": "Show the number of users per country for a specific social media platform.", "sql": "SELECT country, COUNT(*) as user_count FROM social_media_users GROUP BY country ORDER BY user_count DESC;", "sql_context": "CREATE TABLE social_media_users (id INT, user_name VARCHAR(255), country VARCHAR(255));"}
{"sql_prompt": "Find the number of sustainable properties in each city and their total property price.", "sql": "SELECT city, COUNT(*) as num_sustainable_properties, SUM(price) as total_price FROM properties WHERE sustainable = TRUE GROUP BY city;", "sql_context": "CREATE TABLE properties (property_id INT, price FLOAT, sustainable BOOLEAN, city VARCHAR(255));"}
{"sql_prompt": "What is the total biomass of fish in marine farms in the Arctic region that have a water depth of more than 30 meters?", "sql": "SELECT SUM(biomass) FROM marine_farms WHERE region = 'Arctic' AND water_depth > 30;", "sql_context": "CREATE TABLE marine_farms (id INT, name TEXT, region TEXT, water_depth INT, biomass FLOAT); INSERT INTO marine_farms (id, name, region, water_depth, biomass) VALUES (1, 'Farm A', 'Arctic', 40, 15000), (2, 'Farm B', 'Arctic', 35, 12000), (3, 'Farm C', 'Antarctic', 50, 18000);"}
{"sql_prompt": "Which city had the most art exhibitions in 2018?", "sql": "SELECT city, COUNT(*) AS exhibition_count FROM Exhibitions WHERE year = 2018 GROUP BY city ORDER BY exhibition_count DESC LIMIT 1;", "sql_context": "CREATE TABLE Exhibitions (id INT, city VARCHAR(50), year INT);INSERT INTO Exhibitions (id, city, year) VALUES (1, 'New York', 2018), (2, 'London', 2018), (3, 'London', 2018), (4, 'Paris', 2017);"}
{"sql_prompt": "What is the total number of community policing initiatives implemented in districts 1 and 3?", "sql": "SELECT district_id, COUNT(*) as initiatives_per_district FROM community_policing WHERE district_id IN (1, 3) GROUP BY district_id;", "sql_context": "CREATE TABLE community_policing (id INT, district_id INT, initiative_name VARCHAR(255)); INSERT INTO community_policing (id, district_id, initiative_name) VALUES (1, 1, 'Neighborhood Watch'), (2, 2, 'Bike Patrol'), (3, 3, 'Foot Patrol');"}
{"sql_prompt": "How many recycling centers are there in each region?", "sql": "SELECT region, COUNT(DISTINCT center_id) FROM RecyclingCenters GROUP BY region;", "sql_context": "CREATE TABLE RecyclingCenters (region VARCHAR(50), center_id INT); INSERT INTO RecyclingCenters (region, center_id) VALUES ('Region1', 101), ('Region1', 102), ('Region2', 201), ('Region2', 202), ('Region2', 203);"}
{"sql_prompt": "List the top 3 contributors to humanitarian assistance during peacekeeping operations?", "sql": "SELECT Country, Contribution FROM (SELECT Country, Contribution, ROW_NUMBER() OVER (ORDER BY Contribution DESC) AS Rank FROM Contributors) AS RankedContributors WHERE Rank <= 3;", "sql_context": "CREATE TABLE Contributors (Country VARCHAR(255), Contribution DECIMAL(10,2)); INSERT INTO Contributors (Country, Contribution) VALUES ('USA', 35000000), ('UK', 22000000), ('France', 18000000), ('Germany', 15000000);"}
{"sql_prompt": "What is the maximum and minimum risk score for each risk category in the R&D department?", "sql": "SELECT department, risk_category, MAX(value) AS max_score, MIN(value) AS min_score FROM risk_scores GROUP BY department, risk_category;", "sql_context": "CREATE TABLE risk_scores (score_id INT, department VARCHAR(50), risk_category VARCHAR(50), value DECIMAL(10, 2)); INSERT INTO risk_scores (score_id, department, risk_category, value) VALUES (1, 'R&D', 'Operational Risk', 7.25), (2, 'R&D', 'Compliance Risk', 7.50), (3, 'Marketing', 'Operational Risk', 6.75), (4, 'Marketing', 'Compliance Risk', 7.00);"}
{"sql_prompt": "What is the total number of yellow cards given to players from Germany?", "sql": "SELECT SUM(yellow_cards) FROM card_stats WHERE country = 'Germany';", "sql_context": "CREATE TABLE card_stats (id INT, player TEXT, yellow_cards INT, country TEXT); INSERT INTO card_stats (id, player, yellow_cards, country) VALUES (1, 'Klose', 5, 'Germany'), (2, 'Schweinsteiger', 4, 'Germany'), (3, 'Lahm', 3, 'Germany');"}
{"sql_prompt": "What percentage of the total revenue comes from accessories made of recycled materials?", "sql": "SELECT (SUM(CASE WHEN Materials.is_recycled THEN Orders.revenue ELSE 0 END) / SUM(Orders.revenue)) * 100 AS percentage FROM Orders INNER JOIN Products ON Orders.product_id = Products.product_id INNER JOIN Materials ON Products.material_id = Materials.material_id;", "sql_context": "CREATE TABLE Orders (order_id INT, product_id INT, revenue FLOAT); INSERT INTO Orders (order_id, product_id, revenue) VALUES (1, 1, 50.0), (2, 2, 30.0), (3, 3, 20.0), (4, 1, 45.0), (5, 3, 25.0); CREATE TABLE Products (product_id INT, name VARCHAR(255), category VARCHAR(255), material_id INT); INSERT INTO Products (product_id, name, category, material_id) VALUES (1, 'Organic Cotton T-Shirt', 'Clothing', 2), (2, 'Bamboo Socks', 'Clothing', 1), (3, 'Recycled Plastic Water Bottle', 'Accessories', 3); CREATE TABLE Materials (material_id INT, name VARCHAR(255), is_recycled BOOLEAN); INSERT INTO Materials (material_id, name, is_recycled) VALUES (1, 'Bamboo', FALSE), (2, 'Organic Cotton', FALSE), (3, 'Recycled Plastic', TRUE);"}
{"sql_prompt": "Find retailers that have made sales over $40,000 with a 'Local' or 'Fair Trade' sustainability status.", "sql": "SELECT name, country, sales, sustainability_status FROM retailers WHERE sustainability_status IN ('Local', 'Fair Trade') AND sales > 40000;", "sql_context": "CREATE TABLE retailers (id INT PRIMARY KEY, name VARCHAR(50), country VARCHAR(50), sales DECIMAL(10,2), sustainability_status VARCHAR(15)); INSERT INTO retailers (id, name, country, sales, sustainability_status) VALUES (1, 'Fair Trade Fashions', 'USA', 35000.00, 'Fair Trade'); INSERT INTO retailers (id, name, country, sales, sustainability_status) VALUES (2, 'Eco-Friendly Apparel', 'Canada', 28000.00, 'Local'); INSERT INTO retailers (id, name, country, sales, sustainability_status) VALUES (3, 'Green Garments', 'UK', 42000.00, 'Certified'); INSERT INTO retailers (id, name, country, sales, sustainability_status) VALUES (4, 'Sustainable Styles', 'Australia', 51000.00, 'Local');"}
{"sql_prompt": "Find the number of conservation events per location, ordered by the number of events in descending order", "sql": "SELECT location, COUNT(*) FROM conservation_events GROUP BY location ORDER BY COUNT(*) DESC;", "sql_context": "CREATE TABLE animals (id INT, name VARCHAR(50), status VARCHAR(20)); CREATE TABLE habitat_preservation (id INT, location VARCHAR(100), acres FLOAT); CREATE TABLE community_education (id INT, event_name VARCHAR(50), date DATE, attendees INT); CREATE TABLE conservation_events (id INT, event_name VARCHAR(50), location VARCHAR(100), event_date DATE);"}
{"sql_prompt": "What is the total number of comments on posts in the 'beauty' category on Instagram?", "sql": "SELECT SUM(comment_id) FROM post_comments INNER JOIN post_data ON post_comments.post_id = post_data.post_id WHERE post_data.category = 'beauty' AND post_data.platform = 'Instagram';", "sql_context": "CREATE TABLE post_data (post_id INT, category VARCHAR(50), platform VARCHAR(20)); INSERT INTO post_data (post_id, category, platform) VALUES (1, 'beauty', 'Instagram'), (2, 'fashion', 'Instagram'); CREATE TABLE post_comments (comment_id INT, post_id INT, platform VARCHAR(20)); INSERT INTO post_comments (comment_id, post_id, platform) VALUES (1, 1, 'Instagram'), (2, 1, 'Instagram'), (3, 2, 'Instagram');"}
{"sql_prompt": "How many safety incidents were reported per month in the chemical manufacturing plant located in Ontario in 2020?", "sql": "SELECT date_format(incident_date, '%Y-%m') as month, count(*) as total_incidents FROM safety_incidents_canada WHERE plant_location = 'Ontario chemical plant' GROUP BY month;", "sql_context": "CREATE TABLE safety_incidents_canada (plant_location VARCHAR(50), incident_date DATE); INSERT INTO safety_incidents_canada (plant_location, incident_date) VALUES ('Ontario chemical plant', '2020-01-01'); INSERT INTO safety_incidents_canada (plant_location, incident_date) VALUES ('Ontario chemical plant', '2020-02-01');"}
{"sql_prompt": "What is the average age of patients diagnosed with eating disorders?", "sql": "SELECT AVG(age) FROM patient WHERE condition IN ('Anorexia Nervosa', 'Bulimia Nervosa');", "sql_context": "CREATE TABLE patient (patient_id INT, name VARCHAR(50), age INT, gender VARCHAR(10), condition VARCHAR(50)); INSERT INTO patient (patient_id, name, age, gender, condition) VALUES (1, 'Sophia Garcia', 28, 'Female', 'Anorexia Nervosa'), (2, 'David Kim', 40, 'Male', 'Bipolar Disorder'), (3, 'Emily Chen', 33, 'Female', 'Bulimia Nervosa');"}
{"sql_prompt": "What is the total amount of water saved through conservation initiatives in the year 2020?", "sql": "SELECT SUM(amount) FROM savings WHERE year = 2020;", "sql_context": "CREATE TABLE savings (id INT, amount FLOAT, year INT); INSERT INTO savings (id, amount, year) VALUES (1, 1000, 2020), (2, 1500, 2019), (3, 2000, 2018);"}
{"sql_prompt": "What are the total installed capacities (in MW) of solar farms in Spain and Italy?", "sql": "SELECT SUM(capacity_mw) FROM solar_farm_spain WHERE location = 'Spain' UNION SELECT SUM(capacity_mw) FROM solar_farm_italy WHERE location = 'Italy';", "sql_context": "CREATE TABLE solar_farm_spain (id INT, name TEXT, location TEXT, capacity_mw FLOAT); INSERT INTO solar_farm_spain (id, name, location, capacity_mw) VALUES (1, 'Solana Generating Station', 'Spain', 200.0); CREATE TABLE solar_farm_italy (id INT, name TEXT, location TEXT, capacity_mw FLOAT); INSERT INTO solar_farm_italy (id, name, location, capacity_mw) VALUES (1, 'Montalto di Castro Solar Park', 'Italy', 84.0);"}
{"sql_prompt": "Display citizen feedback for each public service.", "sql": "SELECT p.service, f.feedback FROM public_services p INNER JOIN citizen_feedback f ON p.location = f.city;", "sql_context": "CREATE TABLE citizen_feedback (id INT PRIMARY KEY, city VARCHAR(255), age INT, feedback TEXT); CREATE TABLE public_services (id INT PRIMARY KEY, service VARCHAR(255), location VARCHAR(255), budget DECIMAL(10, 2), provider VARCHAR(255));"}
{"sql_prompt": "What is the minimum number of calories burned in a single workout by users from Australia?", "sql": "SELECT MIN(calories) FROM workouts WHERE country = 'Australia';", "sql_context": "CREATE TABLE workouts (id INT, user_id INT, workout_date DATE, calories INT, country VARCHAR(50)); INSERT INTO workouts (id, user_id, workout_date, calories, country) VALUES (1, 123, '2022-01-01', 300, 'USA'); INSERT INTO workouts (id, user_id, workout_date, calories, country) VALUES (2, 456, '2022-01-02', 400, 'Canada');"}
{"sql_prompt": "What is the total funding raised by biotech startups in the top 2 countries with the most funding, grouped by their industry sector and founding year?", "sql": "SELECT founding_year, country, industry_sector, SUM(total_funding) FROM biotech_startups WHERE country IN (SELECT country FROM biotech_startups GROUP BY country ORDER BY SUM(total_funding) DESC LIMIT 2) GROUP BY founding_year, country, industry_sector;", "sql_context": "CREATE TABLE biotech_startups (id INT PRIMARY KEY, name VARCHAR(255), total_funding DECIMAL(10,2), founding_year INT, country VARCHAR(255), industry_sector VARCHAR(255));"}
{"sql_prompt": "Identify the number of accommodations provided for students in each age group, and the percentage of total accommodations for each age group?", "sql": "SELECT s.age, COUNT(a.accommodation_id) as accommodations_count, ROUND(COUNT(a.accommodation_id) * 100.0 / (SELECT COUNT(*) FROM accommodations) , 2) as percentage_of_total FROM students s JOIN accommodations a ON s.student_id = a.student_id GROUP BY s.age;", "sql_context": "CREATE TABLE students (student_id INT, student_name VARCHAR(255), age INT); CREATE TABLE accommodations (accommodation_id INT, student_id INT, accommodation_date DATE);"}
{"sql_prompt": "Show the intelligence operations in the Pacific region that used more than one military technology.", "sql": "SELECT Intelligence_Operations.Name FROM Intelligence_Operations GROUP BY Intelligence_Operations.Name HAVING COUNT(Technology) > 1 AND Location = 'Pacific Ocean';", "sql_context": "CREATE TABLE Intelligence_Operations (Name VARCHAR(255), Technology VARCHAR(255), Location VARCHAR(255)); INSERT INTO Intelligence_Operations (Name, Technology, Location) VALUES ('Operation Pacific Prowler', 'M1 Abrams', 'Pacific Ocean'), ('Operation Pacific Haven', 'AH-64 Apache', 'Pacific Ocean'), ('Operation Pacific Repose', 'M2 Bradley', 'Pacific Ocean');"}
{"sql_prompt": "What is the average price of cruelty-free certified products?", "sql": "SELECT AVG(price) FROM products WHERE is_cruelty_free = true;", "sql_context": "CREATE TABLE products (id INT, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2), is_cruelty_free BOOLEAN); INSERT INTO products (id, name, category, price, is_cruelty_free) VALUES (1, 'Nourishing Face Cream', 'Organic', 25.99, true), (2, 'Revitalizing Serum', 'Natural', 34.99, false), (3, 'Soothing Eye Cream', 'Organic', 19.99, true), (4, 'Hydrating Moisturizer', 'Natural', 22.99, true);"}
{"sql_prompt": "List the states with the most and fewest number of workplaces that have experienced labor disputes in the past year.", "sql": "SELECT State, Disputes FROM WorkplaceDisputes WHERE Disputes = (SELECT MAX(Disputes) FROM WorkplaceDisputes) OR Disputes = (SELECT MIN(Disputes) FROM WorkplaceDisputes);", "sql_context": "CREATE TABLE WorkplaceDisputes (State TEXT, Disputes INT); INSERT INTO WorkplaceDisputes (State, Disputes) VALUES ('California', 150), ('Texas', 100), ('New York', 200), ('Florida', 50);"}
{"sql_prompt": "What is the total number of articles in the \"articles\" table published in the first half of 2022?", "sql": "SELECT COUNT(article_id) FROM articles WHERE publication_date BETWEEN '2022-01-01' AND '2022-06-30';", "sql_context": "CREATE TABLE articles (article_id INT, title VARCHAR(100), category VARCHAR(50), publication_date DATE, views INT); INSERT INTO articles (article_id, title, category, publication_date, views) VALUES (1, 'News from the Capital', 'Politics', '2022-01-01', 1500), (2, 'Tech Innovations in 2022', 'Technology', '2022-01-02', 1200), (3, 'The Art of Persuasion', 'Psychology', '2022-01-03', 1800), (4, 'Education Reforms in Europe', 'Education', '2022-01-04', 1000), (5, 'Climate Change in Asia', 'Environment', '2022-02-05', 2000);"}
{"sql_prompt": "What is the maximum frequency of threats in the 'Asia-Pacific' region?", "sql": "SELECT MAX(frequency) FROM threats WHERE region = 'Asia-Pacific';", "sql_context": "CREATE TABLE threats (id INT, threat_name VARCHAR(255), region VARCHAR(255), frequency INT); INSERT INTO threats (id, threat_name, region, frequency) VALUES (1, 'Malware', 'Europe', 150), (2, 'Phishing', 'Asia-Pacific', 120);"}
{"sql_prompt": "What is the average dissolved oxygen level for each species of fish in the aquaculture farms?", "sql": "SELECT s.name, AVG(m.dissolved_oxygen) FROM Species s JOIN Measurement m ON s.id = m.species_id GROUP BY s.name;", "sql_context": "CREATE TABLE Farm (id INT, name VARCHAR(50), country VARCHAR(50)); CREATE TABLE Species (id INT, name VARCHAR(50), scientific_name VARCHAR(50)); CREATE TABLE Measurement (id INT, farm_id INT, species_id INT, dissolved_oxygen FLOAT, timestamp TIMESTAMP);"}
{"sql_prompt": "Which countries have the least accessible technology initiatives?", "sql": "SELECT name FROM least_accessible ORDER BY initiatives ASC;", "sql_context": "CREATE TABLE least_accessible (name VARCHAR(50), initiatives INT); INSERT INTO least_accessible (name, initiatives) VALUES ('Country A', 2), ('Country B', 3), ('Country C', 1);"}
{"sql_prompt": "List the top 2 CO2 reducing states from the transportation sector?", "sql": "SELECT state, SUM(co2_reduction) as total_reduction FROM co2_reduction WHERE sector = 'Transportation' GROUP BY state ORDER BY total_reduction DESC LIMIT 2;", "sql_context": "CREATE TABLE co2_reduction (state VARCHAR(20), sector VARCHAR(20), co2_reduction FLOAT); INSERT INTO co2_reduction (state, sector, co2_reduction) VALUES ('California', 'Transportation', 34.56), ('Texas', 'Transportation', 29.45), ('New York', 'Transportation', 25.13);"}
{"sql_prompt": "Add a new record into the \"artworks\" table for a sculpture from Egypt", "sql": "INSERT INTO artworks (id, name, medium, country) VALUES (1, 'Ancient Egyptian Statue', 'Granite', 'Egypt');", "sql_context": "CREATE TABLE artworks (id INT PRIMARY KEY, name VARCHAR(100), medium VARCHAR(50), country VARCHAR(50));"}
{"sql_prompt": "Calculate the moving average of crop yield for each crop over the last 3 years.", "sql": "SELECT Year, CropName, AVG(Yield) OVER (PARTITION BY CropName ORDER BY Year ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as MovingAvg FROM Yield;", "sql_context": "CREATE TABLE Yield (Year int, CropName varchar(50), Yield int); INSERT INTO Yield (Year, CropName, Yield) VALUES (2020, 'Corn', 180), (2021, 'Corn', 200), (2022, 'Corn', 220), (2020, 'Soybeans', 160), (2021, 'Soybeans', 180), (2022, 'Soybeans', 200), (2020, 'Wheat', 140), (2021, 'Wheat', 150), (2022, 'Wheat', 160);"}
{"sql_prompt": "List all unique station names from the stations table", "sql": "SELECT DISTINCT name FROM stations;", "sql_context": "CREATE TABLE stations (station_id INTEGER, name TEXT, latitude REAL, longitude REAL); INSERT INTO stations (station_id, name, latitude, longitude) VALUES (1, 'Downtown', 40.7128, -74.0060);"}
{"sql_prompt": "List the properties with the highest housing affordability index in each city.", "sql": "SELECT city, property_id, housing_affordability_index FROM (SELECT city, property_id, housing_affordability_index, ROW_NUMBER() OVER (PARTITION BY city ORDER BY housing_affordability_index DESC) as rn FROM city_properties) t WHERE rn = 1;", "sql_context": "CREATE TABLE city_properties (city VARCHAR(255), property_id INT, housing_affordability_index INT); INSERT INTO city_properties (city, property_id, housing_affordability_index) VALUES ('CityA', 1, 85), ('CityA', 2, 80), ('CityA', 3, 90), ('CityB', 1, 70), ('CityB', 2, 75), ('CityB', 3, 85);"}
{"sql_prompt": "What is the maximum monthly bill for broadband subscribers in the state of Texas?", "sql": "SELECT MAX(monthly_bill) FROM broadband_subscribers WHERE state = 'Texas';", "sql_context": "CREATE TABLE broadband_subscribers (subscriber_id INT, monthly_bill FLOAT, state VARCHAR(20)); INSERT INTO broadband_subscribers (subscriber_id, monthly_bill, state) VALUES (1, 60.5, 'Texas'), (2, 70.3, 'Texas'), (3, 55.7, 'California');"}
{"sql_prompt": "What is the citizen satisfaction score for each public service in the state of California?", "sql": "SELECT service_type, satisfaction_score FROM services WHERE state = 'California';", "sql_context": "CREATE TABLE services (state VARCHAR(20), service_type VARCHAR(50), satisfaction_score INT); INSERT INTO services (state, service_type, satisfaction_score) VALUES ('California', 'transportation', 8), ('California', 'education', 7), ('California', 'healthcare', 9), ('California', 'public_safety', 6), ('California', 'utilities', 8);"}
{"sql_prompt": "What is the minimum energy efficiency improvement in the Chinese industrial sector?", "sql": "SELECT MIN(improvement) FROM energy_efficiency_china WHERE sector = 'industrial';", "sql_context": "CREATE TABLE energy_efficiency_china (id INT, sector VARCHAR(50), year INT, improvement FLOAT);"}
{"sql_prompt": "What is the regulatory status of smart contracts in the United States, Canada, and Australia?", "sql": "SELECT country, regulatory_status FROM regulations WHERE country IN ('United States', 'Canada', 'Australia');", "sql_context": "CREATE TABLE regulations (country TEXT, regulatory_status TEXT); INSERT INTO regulations (country, regulatory_status) VALUES ('United States', 'Partially regulated'), ('Canada', 'Under development'), ('Australia', 'Fully regulated');"}
{"sql_prompt": "List the Europium market trends for 2018 and 2019.", "sql": "SELECT year, trend FROM EuropiumMarket WHERE year IN (2018, 2019);", "sql_context": "CREATE TABLE EuropiumMarket(year INT, trend VARCHAR(50)); INSERT INTO EuropiumMarket(year, trend) VALUES (2018, 'Stable'), (2018, 'Steady demand'), (2019, 'Price increase'), (2019, 'Growing demand');"}
{"sql_prompt": "Insert a new record into the 'energy_efficiency' table with a 'sector' value of 'Industry', 'efficiency_improvement' value of 0.1, and 'country' value of 'China'", "sql": "INSERT INTO energy_efficiency (sector, efficiency_improvement, country) VALUES ('Industry', 0.1, 'China');", "sql_context": "CREATE TABLE energy_efficiency (id INT PRIMARY KEY, sector VARCHAR(255), efficiency_improvement FLOAT, country VARCHAR(255));"}
{"sql_prompt": "What are the names and case IDs of all cases that have been dismissed in the state of California?", "sql": "SELECT case_id, case_status FROM court_cases WHERE case_state = 'California' AND case_status = 'Dismissed';", "sql_context": "CREATE TABLE court_cases (case_id INT, case_status TEXT, case_state TEXT); INSERT INTO court_cases (case_id, case_status, case_state) VALUES (33333, 'Dismissed', 'California');"}
{"sql_prompt": "What is the average response time to citizen complaints per day, with the fastest response time first?", "sql": "SELECT Day, AVG(Response_Time) as Avg_Response_Time FROM Daily_Response GROUP BY Day ORDER BY Avg_Response_Time ASC;", "sql_context": "CREATE TABLE Daily_Response(Day DATE, Response_Time INT); INSERT INTO Daily_Response VALUES ('2022-01-01', 2), ('2022-01-01', 5), ('2022-01-02', 3), ('2022-01-03', 4), ('2022-01-03', 6);"}
{"sql_prompt": "What are the names and types of properties that are both wheelchair accessible and pet-friendly in the city of Seattle?", "sql": "SELECT name, 'property' as type FROM properties WHERE city = 'Seattle' AND wheelchair_accessible = true AND pet_friendly = true;", "sql_context": "CREATE TABLE properties (property_id INT, name VARCHAR(255), city VARCHAR(255), wheelchair_accessible BOOLEAN, pet_friendly BOOLEAN); INSERT INTO properties (property_id, name, city, wheelchair_accessible, pet_friendly) VALUES (1, 'The Accessible Arbor', 'Seattle', true, true), (2, 'The Pet-friendly Palace', 'Seattle', false, true), (3, 'The Wheelchair Haven', 'Seattle', true, false);"}
{"sql_prompt": "What are the top 5 ingredients by inventory level?", "sql": "SELECT ingredient, quantity FROM inventory ORDER BY quantity DESC LIMIT 5;", "sql_context": "CREATE TABLE inventory (ingredient VARCHAR(255), quantity INT); INSERT INTO inventory (ingredient, quantity) VALUES ('Chicken', 500), ('Beef', 300), ('Potatoes', 800), ('Carrots', 200), ('Garlic', 150);"}
{"sql_prompt": "How many climate mitigation projects have been implemented in Latin America and the Caribbean?", "sql": "SELECT COUNT(*) FROM climate_mitigation_projects WHERE location IN ('Latin America', 'Caribbean');", "sql_context": "CREATE TABLE climate_mitigation_projects (id INT, project VARCHAR(50), location VARCHAR(50)); INSERT INTO climate_mitigation_projects (id, project, location) VALUES (1, 'Carbon Capture', 'Latin America'), (2, 'Energy Efficiency', 'Caribbean'), (3, 'Public Transportation', 'Latin America');"}
{"sql_prompt": "List all beauty products that are both eco-friendly and have a rating above 4.5.", "sql": "SELECT * FROM Eco_Friendly_Cosmetics WHERE eco_friendly = TRUE AND rating > 4.5;", "sql_context": "CREATE TABLE Eco_Friendly_Cosmetics (product_id INT, product_name VARCHAR(255), eco_friendly BOOLEAN, rating DECIMAL(3,1)); INSERT INTO Eco_Friendly_Cosmetics (product_id, product_name, eco_friendly, rating) VALUES (1, 'Eco Friendly Cosmetic 1', TRUE, 4.6), (2, 'Eco Friendly Cosmetic 2', FALSE, 4.8), (3, 'Eco Friendly Cosmetic 3', TRUE, 4.2), (4, 'Eco Friendly Cosmetic 4', TRUE, 4.9);"}
{"sql_prompt": "What is the average training time for models used in AI safety applications?", "sql": "SELECT AVG(training_time) FROM time_data WHERE application = 'AI safety';", "sql_context": "CREATE TABLE time_data (model_id INT, model_name VARCHAR(50), application VARCHAR(50), training_time FLOAT);"}
{"sql_prompt": "What is the total number of containers handled by each vessel in the Port of Singapore?", "sql": "SELECT v.name, SUM(ce.quantity) FROM vessels v JOIN vessel_arrivals va ON v.id = va.vessel_id JOIN container_events ce ON v.id = ce.vessel_id WHERE va.port_id = (SELECT id FROM ports WHERE name = 'Port of Singapore') GROUP BY v.name;", "sql_context": "CREATE TABLE ports (id INT, name TEXT); INSERT INTO ports (id, name) VALUES (1, 'Port of Singapore'); CREATE TABLE vessel_arrivals (id INT, port_id INT, vessel_id INT, arrival_date DATE); INSERT INTO vessel_arrivals (id, port_id, vessel_id, arrival_date) VALUES (1, 1, 1, '2022-01-01'), (2, 1, 2, '2022-01-05'), (3, 1, 1, '2022-01-15'); CREATE TABLE vessels (id INT, name TEXT); INSERT INTO vessels (id, name) VALUES (1, 'Vessel X'), (2, 'Vessel Y'); CREATE TABLE container_events (id INT, port_id INT, vessel_id INT, event_date DATE, event_type TEXT, quantity INT); INSERT INTO container_events (id, port_id, vessel_id, event_date, event_type, quantity) VALUES (1, 1, 1, '2022-01-01', 'load', 500), (2, 1, 1, '2022-01-03', 'unload', 300), (3, 1, 2, '2022-01-02', 'load', 700), (4, 1, 2, '2022-01-04', 'unload', 400);"}
{"sql_prompt": "Compare environmental impact assessments between coal and gold mining sectors.", "sql": "SELECT mine_type, AVG(num_assessments) FROM environmental_impact_assessments GROUP BY mine_type;", "sql_context": "CREATE TABLE environmental_impact_assessments (mine_type VARCHAR(20), num_assessments INT); INSERT INTO environmental_impact_assessments (mine_type, num_assessments) VALUES ('Coal', 100), ('Coal', 105), ('Coal', 95), ('Gold', 110), ('Gold', 120), ('Gold', 115);"}
{"sql_prompt": "How many small-scale farmers in Canada and Mexico are part of food justice initiatives?", "sql": "SELECT COUNT(DISTINCT small_scale_farmers.id) FROM small_scale_farmers INNER JOIN food_justice_initiatives ON small_scale_farmers.initiative_id = food_justice_initiatives.id WHERE small_scale_farmers.country IN ('CA', 'MX');", "sql_context": "CREATE TABLE small_scale_farmers (id INT, country VARCHAR(2), initiative_id INT); CREATE TABLE food_justice_initiatives (id INT, name VARCHAR(50)); INSERT INTO small_scale_farmers (id, country, initiative_id) VALUES (1, 'CA', 101), (2, 'MX', 102), (3, 'CA', 103); INSERT INTO food_justice_initiatives (id, name) VALUES (101, 'Just Food'), (102, 'Food Secure Canada'), (103, 'Growing Power');"}
{"sql_prompt": "Which research vessels were commissioned after 2015?", "sql": "SELECT name, type FROM Research_Vessels WHERE year > 2015;", "sql_context": "CREATE TABLE Research_Vessels (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), year INT); INSERT INTO Research_Vessels (id, name, type, year) VALUES (1, 'Ocean Explorer', 'Oceanographic Research Vessel', 2018);"}
{"sql_prompt": "What is the total volume of timber harvested from temperate and boreal forests, and how many hectares are associated with those forests?", "sql": "SELECT SUM(t.volume), SUM(b.hectares) FROM temperate_forests t, boreal_forests b;", "sql_context": "CREATE TABLE temperate_forests (id INT, name VARCHAR(255), country VARCHAR(255), volume DECIMAL(10,2)); INSERT INTO temperate_forests (id, name, country, volume) VALUES (1, 'Temperate Forest 1', 'USA', 5000), (2, 'Temperate Forest 2', 'USA', 7000); CREATE TABLE boreal_forests (id INT, name VARCHAR(255), country VARCHAR(255), hectares INT); INSERT INTO boreal_forests (id, name, country, hectares) VALUES (1, 'Boreal Forest 1', 'Canada', 10000), (2, 'Boreal Forest 2', 'Canada', 12000);"}
{"sql_prompt": "What is the number of 'completed_orders' and total orders for each salesperson per day, for the 'e-commerce' database, ordered by salesperson and day?", "sql": "SELECT salesperson, order_date, SUM(completed_orders) OVER (PARTITION BY salesperson ORDER BY order_date) as completed_orders, SUM(total_orders) OVER (PARTITION BY salesperson ORDER BY order_date) as total_orders FROM e_commerce;", "sql_context": "CREATE TABLE e_commerce (id INT, salesperson VARCHAR(50), completed_orders INT, total_orders INT, order_date DATE); INSERT INTO e_commerce (id, salesperson, completed_orders, total_orders, order_date) VALUES (1, 'Sophia Lee', 10, 15, '2022-01-01'); INSERT INTO e_commerce (id, salesperson, completed_orders, total_orders, order_date) VALUES (2, 'Alex Garcia', 12, 16, '2022-01-01'); INSERT INTO e_commerce (id, salesperson, completed_orders, total_orders, order_date) VALUES (3, 'Jamie Chen', 8, 12, '2022-01-02');"}
{"sql_prompt": "Which organizations have received grants from the 'Arthur Foundation'?", "sql": "SELECT o.name FROM organization o JOIN grant g ON o.id = g.organization_id WHERE g.foundation_name = 'Arthur Foundation';", "sql_context": "CREATE TABLE organization (id INT PRIMARY KEY, name VARCHAR(255));CREATE TABLE grant (id INT PRIMARY KEY, organization_id INT, foundation_name VARCHAR(255));"}
{"sql_prompt": "List all cybersecurity strategies and their respective national security advisors from the 'cybersecurity' and 'advisors' tables.", "sql": "SELECT cybersecurity.strategy_name, advisors.name FROM cybersecurity INNER JOIN advisors ON cybersecurity.strategy_id = advisors.advisor_id WHERE advisors.position = 'National Security Advisor';", "sql_context": "CREATE TABLE cybersecurity (strategy_id INT, strategy_name VARCHAR(50), description TEXT, last_updated TIMESTAMP); CREATE TABLE advisors (advisor_id INT, name VARCHAR(50), position VARCHAR(50), agency VARCHAR(50), last_updated TIMESTAMP);"}
{"sql_prompt": "What is the average rating of food trucks located in 'Los Angeles'?", "sql": "SELECT AVG(Restaurant.rating) FROM Restaurant WHERE Restaurant.location = 'Los Angeles';", "sql_context": "CREATE TABLE Restaurant (id INT PRIMARY KEY, name VARCHAR(255), rating FLOAT, location VARCHAR(255)); INSERT INTO Restaurant (id, name, rating, location) VALUES (1, 'Tasty Truck', 4.6, 'Los Angeles');"}
{"sql_prompt": "Show the number of employees hired in each location, ordered by the number of hires.", "sql": "SELECT Location, COUNT(*) FROM Employees GROUP BY Location ORDER BY COUNT(*) DESC;", "sql_context": "CREATE TABLE Employees (EmployeeID INT, HireDate DATE, Location VARCHAR(50)); INSERT INTO Employees (EmployeeID, HireDate, Location) VALUES (1, '2018-01-01', 'NYC'), (2, '2020-03-15', 'LA'), (3, '2019-08-25', 'NYC'), (4, '2019-11-04', 'NYC'), (5, '2020-02-16', 'LA');"}
{"sql_prompt": "Which fish species have a stock size greater than 5000 in the 'Pacific Ocean' region?", "sql": "SELECT species, stock_size FROM fish_stock WHERE region = 'Pacific Ocean' AND stock_size > 5000;", "sql_context": "CREATE TABLE fish_stock (region VARCHAR(255), species VARCHAR(255), stock_size INT); INSERT INTO fish_stock (region, species, stock_size) VALUES ('Pacific Ocean', 'Salmon', 6000), ('Pacific Ocean', 'Tuna', 4000), ('Atlantic Ocean', 'Mackerel', 3000);"}
{"sql_prompt": "What is the number of flights per year for each aircraft model in the FlightLogs table?", "sql": "SELECT aircraft_model, flight_year, COUNT(*) AS flights_per_year FROM FlightLogs GROUP BY aircraft_model, flight_year;", "sql_context": "CREATE TABLE FlightLogs (flight_id INT, aircraft_model VARCHAR(50), flight_year INT, flight_speed FLOAT); INSERT INTO FlightLogs (flight_id, aircraft_model, flight_year, flight_speed) VALUES (1, 'B747', 2022, 850.0), (2, 'A320', 2021, 800.0), (3, 'B747', 2022, 900.0);"}
{"sql_prompt": "How many media representation initiatives are there in the EU?", "sql": "SELECT SUM(MediaRepresentationInitiatives) FROM Countries WHERE Country IN ('Germany', 'France', 'Italy', 'Spain', 'Belgium', 'Netherlands', 'Luxembourg', 'Ireland', 'Austria', 'Portugal', 'Finland', 'Sweden', 'Denmark', 'Estonia', 'Latvia', 'Lithuania', 'Slovakia', 'Slovenia', 'Czech Republic', 'Hungary', 'Poland', 'Romania', 'Bulgaria', 'Croatia', 'Malta', 'Cyprus');", "sql_context": "CREATE TABLE Countries (Country TEXT, MediaRepresentationInitiatives INT); INSERT INTO Countries (Country, MediaRepresentationInitiatives) VALUES ('Germany', 4), ('France', 3), ('Italy', 2), ('Spain', 1);"}
{"sql_prompt": "What is the percentage of concert revenue generated by hip-hop artists in 2021?", "sql": "SELECT (SUM(ce.revenue) FILTER (WHERE ad.genre = 'Hip-Hop')) / SUM(ce.revenue) FROM concert_events ce JOIN artist_demographics ad ON ce.artist_id = ad.artist_id WHERE ce.event_date BETWEEN '2021-01-01' AND '2021-12-31';", "sql_context": "CREATE TABLE concert_events (event_id INT, artist_id INT, event_date DATE, event_location VARCHAR(255), genre VARCHAR(50), revenue DECIMAL(10,2)); INSERT INTO concert_events (event_id, artist_id, event_date, event_location, genre, revenue) VALUES (1, 1, '2022-01-01', 'NYC', 'Hip-Hop', 500000.00); CREATE TABLE artist_demographics (artist_id INT, artist_name VARCHAR(255), genre VARCHAR(50)); INSERT INTO artist_demographics (artist_id, artist_name, genre) VALUES (1, 'Jay-Z', 'Hip-Hop');"}
{"sql_prompt": "How many sustainable tourism initiatives are there in total in Denmark and Norway?", "sql": "SELECT COUNT(*) FROM sustainable_tourism WHERE country IN ('Denmark', 'Norway');", "sql_context": "CREATE TABLE sustainable_tourism (initiative_id INT, name TEXT, country TEXT); INSERT INTO sustainable_tourism VALUES (1, 'Sustainable Copenhagen Tour', 'Denmark'), (2, 'Eco-friendly Norwegian Fjords', 'Norway');"}
{"sql_prompt": "What is the earliest visit date for vessels that have visited 'Port E'?", "sql": "SELECT MIN(visit_date) FROM visits WHERE port_id = (SELECT port_id FROM ports WHERE port_name = 'Port E');", "sql_context": "CREATE TABLE ports (port_id INT, port_name TEXT, country TEXT); INSERT INTO ports (port_id, port_name, country) VALUES (1, 'Port A', 'USA'), (2, 'Port B', 'Canada'), (3, 'Port C', 'USA'), (4, 'Port D', 'Mexico'), (5, 'Port E', 'Brazil'); CREATE TABLE visits (visit_id INT, vessel_id INT, port_id INT, visit_date DATE); INSERT INTO visits (visit_id, vessel_id, port_id, visit_date) VALUES (1, 1, 1, '2021-02-01'), (2, 2, 1, '2021-03-01'), (3, 1, 2, '2021-04-01'), (4, 2, 2, '2021-05-01'), (5, 4, 5, '2021-06-01');"}
{"sql_prompt": "Delete all articles with a word count less than 500.", "sql": "DELETE FROM articles WHERE word_count < 500;", "sql_context": "CREATE TABLE articles (id INT, title VARCHAR(255), word_count INT); INSERT INTO articles (id, title, word_count) VALUES (1, 'ArticleA', 1200), (2, 'ArticleB', 800), (3, 'ArticleC', 450);"}
{"sql_prompt": "What is the total number of players who play games in the 'Strategy' genre?", "sql": "SELECT COUNT(*) FROM players WHERE game_genre = 'Strategy';", "sql_context": "CREATE TABLE players (id INT, game_genre VARCHAR(20)); INSERT INTO players (id, game_genre) VALUES (1, 'racing'), (2, 'rpg'), (3, 'Strategy'), (4, 'Strategy');"}
{"sql_prompt": "What was the average cost of spacecraft manufactured by companies in Europe?", "sql": "SELECT AVG(cost) FROM SpacecraftManufacturing WHERE country IN ('Germany', 'France', 'UK', 'Italy', 'Spain');", "sql_context": "CREATE TABLE SpacecraftManufacturing (id INT, company VARCHAR(255), cost INT, country VARCHAR(255));"}
{"sql_prompt": "Update the gender of employee with ID 4 to Non-binary.", "sql": "UPDATE Employees SET Gender = 'Non-binary' WHERE EmployeeID = 4;", "sql_context": "CREATE TABLE Employees (EmployeeID INT, Department VARCHAR(20), Gender VARCHAR(20), Salary FLOAT); INSERT INTO Employees (EmployeeID, Department, Gender, Salary) VALUES (1, 'IT', 'Male', 70000), (2, 'HR', 'Female', 60000), (3, 'IT', 'Female', 75000), (4, 'IT', 'Male', 78000), (5, 'Finance', 'Male', 85000);"}
{"sql_prompt": "What is the maximum pollution level in the Southern Ocean?", "sql": "SELECT MAX(pollution_level) FROM southern_ocean WHERE id = 1;", "sql_context": "CREATE TABLE southern_ocean (id INT, pollution_level FLOAT); INSERT INTO southern_ocean (id, pollution_level) VALUES (1, 10);"}
{"sql_prompt": "Which aircraft model has the most accidents in the aviation database?", "sql": "SELECT aircraft_model, MAX(num_accidents) FROM aviation_database GROUP BY aircraft_model ORDER BY MAX(num_accidents) DESC LIMIT 1;", "sql_context": "CREATE TABLE aviation_database (id INT, aircraft_model VARCHAR(50), manufacturer VARCHAR(50), num_accidents INT);"}
{"sql_prompt": "What is the percentage change in sales of each product category in the Asia-Pacific region from 2021 to 2022?", "sql": "SELECT a.product_category, ((a.sale_quantity - b.sale_quantity) * 100.0 / b.sale_quantity) AS sales_percentage_change FROM sales_data_5 a JOIN sales_data_5 b ON a.product_category = b.product_category AND a.region = b.region AND a.sale_year = b.sale_year + 1 WHERE a.region LIKE 'Asia-Pacific%' AND b.sale_year = 2021 GROUP BY a.product_category, a.sale_quantity, b.sale_quantity;", "sql_context": "CREATE TABLE sales_data_5 (sale_id INT, product_category VARCHAR(255), region VARCHAR(255), sale_quantity INT, sale_year INT);"}
{"sql_prompt": "How many legal aid clinics are there in the state of New York?", "sql": "SELECT COUNT(*) FROM legal_aid_clinics WHERE state = 'NY';", "sql_context": "CREATE TABLE legal_aid_clinics (clinic_id INT, state VARCHAR(2)); INSERT INTO legal_aid_clinics (clinic_id, state) VALUES (1, 'NY'); INSERT INTO legal_aid_clinics (clinic_id, state) VALUES (2, 'CA');"}
{"sql_prompt": "What is the minimum, maximum, and average duration of collective bargaining negotiations for Union B?", "sql": "SELECT MIN(Duration) as MinDuration, MAX(Duration) as MaxDuration, AVG(Duration) as AvgDuration FROM Negotiations WHERE UnionId = 2;", "sql_context": "CREATE TABLE Negotiations (Id INT, UnionId INT, Duration INT); INSERT INTO Negotiations (Id, UnionId, Duration) VALUES (1, 2, 120), (2, 2, 180), (3, 2, 90), (4, 2, 210), (5, 2, 150);"}
{"sql_prompt": "How many employees are there in the company?", "sql": "SELECT COUNT(*) FROM Employees;", "sql_context": "CREATE TABLE Employees (id INT, name VARCHAR(50)); INSERT INTO Employees (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith');"}
{"sql_prompt": "How many items are there in each category?", "sql": "SELECT category, COUNT(*) FROM Menu GROUP BY category;", "sql_context": "CREATE TABLE Menu (menu_id INT PRIMARY KEY, item_name VARCHAR(255), category VARCHAR(255), price DECIMAL(5,2));"}
{"sql_prompt": "What is the minimum explainability score for AI models grouped by model type in the 'ai_models' table?", "sql": "SELECT model_type, MIN(explainability_score) FROM ai_models GROUP BY model_type;", "sql_context": "CREATE TABLE ai_models (model_id INT, model_type TEXT, explainability_score FLOAT);"}
{"sql_prompt": "What is the average property size for co-owned properties in each city?", "sql": "SELECT city_id, AVG(size) as avg_size FROM properties WHERE coowners > 1 GROUP BY city_id;", "sql_context": "CREATE TABLE cities (id INT, name VARCHAR(255)); INSERT INTO cities (id, name) VALUES (1, 'San Francisco'), (2, 'Seattle'), (3, 'Toronto'); CREATE TABLE properties (id INT, city_id INT, size INT, coowners INT); INSERT INTO properties (id, city_id, size, coowners) VALUES (1, 1, 1200, 2), (2, 1, 1800, 1), (3, 2, 1500, 3), (4, 2, 2000, 1), (5, 3, 900, 1), (6, 3, 1300, 2);"}
{"sql_prompt": "How many military innovation projects were initiated by each organization in the 'military_innovation' table, with a budget greater than $10 million?", "sql": "SELECT organization, COUNT(*) as num_projects FROM military_innovation WHERE budget > 10000000 GROUP BY organization;", "sql_context": "CREATE TABLE military_innovation (id INT, organization VARCHAR(50), budget INT);"}
{"sql_prompt": "Update the charging stations table to add a new charging station, 'GreenTech Los Angeles', with a quantity of 10.", "sql": "UPDATE charging_stations SET quantity = quantity + 10 WHERE station_name = 'GreenTech Los Angeles';", "sql_context": "CREATE TABLE charging_stations (station_id INT, station_name VARCHAR(50), location VARCHAR(50), quantity INT);"}
{"sql_prompt": "How many investments have been made with a risk assessment score greater than 80?", "sql": "SELECT COUNT(*) FROM investments WHERE risk_assessment_score > 80;", "sql_context": "CREATE TABLE investments (id INT, sector VARCHAR(255), risk_assessment_score INT); INSERT INTO investments (id, sector, risk_assessment_score) VALUES (1, 'Technology', 80), (2, 'Healthcare', 70), (3, 'Social Impact Investing', 90);"}
{"sql_prompt": "Update 'route_type' to 'Light Rail' for records in the 'public_transportation' table where 'route_id' contains 'LRT'", "sql": "UPDATE public_transportation SET type = 'Light Rail' WHERE route_id LIKE '%LRT%';", "sql_context": "CREATE TABLE public_transportation (id INT, route_id VARCHAR(255), route_length FLOAT, type VARCHAR(255));"}
{"sql_prompt": "What is the total number of donors for each program and their average donation amount?", "sql": "SELECT p.name, COUNT(*) as total_donors, AVG(d.total_donations) as avg_donation_amount FROM programs p JOIN donors d ON p.id = d.program_id GROUP BY p.id;", "sql_context": "CREATE TABLE programs (id INT, name VARCHAR(255)); INSERT INTO programs (id, name) VALUES (1, 'Education'), (2, 'Health'), (3, 'Environment'); CREATE TABLE donors (id INT, name VARCHAR(255), program_id INT, total_donations DECIMAL(10, 2));"}
{"sql_prompt": "How many artists in the 'artists' table are from each continent?", "sql": "SELECT c.continent, COUNT(a.artist_id) as num_artists FROM artists a JOIN countries c ON a.country = c.country GROUP BY c.continent;", "sql_context": "CREATE TABLE artists (artist_id INT, name VARCHAR(50), age INT, country VARCHAR(50)); INSERT INTO artists (artist_id, name, age, country) VALUES (1, 'Pablo Picasso', 91, 'Spain'); INSERT INTO artists (artist_id, name, age, country) VALUES (2, 'Francis Bacon', 82, 'Ireland'); INSERT INTO artists (artist_id, name, age, country) VALUES (3, 'Piet Mondrian', 71, 'Netherlands'); CREATE TABLE countries (country VARCHAR(50), continent VARCHAR(50)); INSERT INTO countries (country, continent) VALUES ('Spain', 'Europe'); INSERT INTO countries (country, continent) VALUES ('Ireland', 'Europe'); INSERT INTO countries (country, continent) VALUES ('Netherlands', 'Europe');"}
{"sql_prompt": "What is the average number of hours volunteered per volunteer?", "sql": "SELECT AVG(hours) as avg_hours_per_volunteer FROM Volunteer_Hours JOIN Volunteers ON Volunteer_Hours.volunteer_id = Volunteers.id;", "sql_context": "CREATE TABLE Volunteer_Hours (id INT, hours INT, volunteer_id INT, month INT); CREATE TABLE Volunteers (id INT, name TEXT);"}
{"sql_prompt": "What is the average mental health score of students per grade?", "sql": "SELECT s.grade, AVG(s.mental_health_score) as avg_mental_health_score FROM students s GROUP BY s.grade;", "sql_context": "CREATE TABLE students (student_id INT, grade INT, mental_health_score INT); INSERT INTO students (student_id, grade, mental_health_score) VALUES (1, 9, 75), (2, 9, 80), (3, 10, 70), (4, 10, 75), (5, 11, 85);"}
{"sql_prompt": "What is the maximum property price in green neighborhoods in London?", "sql": "SELECT MAX(London_Properties.Property_Price) FROM London_Properties INNER JOIN London_Neighborhoods ON London_Properties.Neighborhood_Name = London_Neighborhoods.Neighborhood_Name WHERE London_Neighborhoods.Green_Space = true;", "sql_context": "CREATE TABLE London_Neighborhoods (Neighborhood_Name TEXT, Green_Space BOOLEAN); INSERT INTO London_Neighborhoods (Neighborhood_Name, Green_Space) VALUES ('Hyde Park', true), ('Regent''s Park', true), ('Green Park', true), ('St. James''s Park', true), ('Kensington Gardens', true); CREATE TABLE London_Properties (Neighborhood_Name TEXT, Property_Price INTEGER); INSERT INTO London_Properties (Neighborhood_Name, Property_Price) VALUES ('Hyde Park', 2000000), ('Regent''s Park', 1500000), ('Green Park', 1800000), ('St. James''s Park', 1900000), ('Kensington Gardens', 2500000);"}
{"sql_prompt": "Which tennis player won the most matches in the 'wins' table?", "sql": "SELECT player_id, MAX(wins) FROM wins;", "sql_context": "CREATE TABLE wins (win_id INT, player_id INT, match_id INT, team_id INT, wins INT); INSERT INTO wins (win_id, player_id, match_id, team_id, wins) VALUES (1, 13, 14, 715, 10);"}
{"sql_prompt": "What is the earliest and latest time a bus travels on route 456?", "sql": "SELECT route_id, MIN(start_time) AS earliest, MAX(end_time) AS latest FROM Trips WHERE route_id = 456 GROUP BY route_id;", "sql_context": "CREATE TABLE Trips(id INT, route_id INT, start_time TIME, end_time TIME);"}
{"sql_prompt": "What is the maximum age of patients who were diagnosed with Hypertension?", "sql": "SELECT MAX(Rural_Patients.Age) FROM Rural_Patients INNER JOIN Hypertension_Diagnosis ON Rural_Patients.Diagnosis = Hypertension_Diagnosis.Diagnosis;", "sql_context": "CREATE TABLE Rural_Patients (Patient_ID INT, Age INT, Gender VARCHAR(10), Diagnosis VARCHAR(20)); INSERT INTO Rural_Patients (Patient_ID, Age, Gender, Diagnosis) VALUES (1, 35, 'Male', 'Hypertension'); INSERT INTO Rural_Patients (Patient_ID, Age, Gender, Diagnosis) VALUES (2, 42, 'Female', 'Asthma'); CREATE TABLE Hypertension_Diagnosis (Diagnosis VARCHAR(20), Diagnosis_Date DATE); INSERT INTO Hypertension_Diagnosis (Diagnosis, Diagnosis_Date) VALUES ('Hypertension', '2020-01-01');"}
{"sql_prompt": "What is the maximum safety rating of trucks released in or after 2020?", "sql": "SELECT MAX(rating) FROM TruckSafetyTesting WHERE release_year >= 2020;", "sql_context": "CREATE TABLE TruckSafetyTesting (id INT, rating INT, release_year INT); INSERT INTO TruckSafetyTesting (id, rating, release_year) VALUES (1, 4, 2019), (2, 5, 2020), (3, 5, 2021), (4, 4, 2018), (5, 3, 2019), (6, 5, 2022);"}
{"sql_prompt": "What is the total quantity of eco-friendly dyes used by each textile mill, ordered from most to least?", "sql": "SELECT mill, SUM(quantity) AS total_quantity FROM TextileMills WHERE dye_type IN ('Natural Dye', 'Low-Impact Dye') GROUP BY mill ORDER BY total_quantity DESC;", "sql_context": "CREATE TABLE TextileMills (id INT, mill VARCHAR(50), dye_type VARCHAR(50), quantity INT); INSERT INTO TextileMills (id, mill, dye_type, quantity) VALUES (1, 'Mill A', 'Natural Dye', 2000), (2, 'Mill B', 'Low-Impact Dye', 3000), (3, 'Mill C', 'Natural Dye', 1500);"}
{"sql_prompt": "What is the distribution of employee tenure by job level, manager, and ethnicity?", "sql": "SELECT Employees.JobLevel, Employees.Manager, Employees.Ethnicity, AVG(Employees.Tenure) as Avg_Tenure FROM Employees GROUP BY Employees.JobLevel, Employees.Manager, Employees.Ethnicity;", "sql_context": "CREATE TABLE Employees (EmployeeID int, FirstName varchar(50), LastName varchar(50), JobLevel int, Manager varchar(50), Ethnicity varchar(50), Tenure int); INSERT INTO Employees (EmployeeID, FirstName, LastName, JobLevel, Manager, Ethnicity, Tenure) VALUES (1, 'John', 'Doe', 3, 'Jane Doe', 'Asian', 5), (2, 'Jane', 'Doe', 2, 'Bob Smith', 'Latino', 10), (3, 'Jim', 'Smith', 1, 'Bob Smith', 'African American', 2);"}
{"sql_prompt": "Show the total calories of all vegetarian dishes on the menu", "sql": "SELECT SUM(calories) FROM dishes WHERE vegetarian = true;", "sql_context": "CREATE TABLE dishes (dish_id INT, dish_name TEXT, vegetarian BOOLEAN, calories INT); INSERT INTO dishes (dish_id, dish_name, vegetarian, calories) VALUES (1, 'Pizza', false, 1200), (2, 'Spaghetti', false, 1000), (3, 'Salad', true, 500), (4, 'Sushi', true, 800);"}
{"sql_prompt": "Remove expired contracts from the database", "sql": "DELETE FROM contracts WHERE expiration_date < CURDATE();", "sql_context": "CREATE TABLE contracts(id INT, expiration_date DATE);INSERT INTO contracts(id, expiration_date) VALUES (1, '2021-12-31');"}
{"sql_prompt": "Determine the average price of artworks created by artists from Japan after 2000.", "sql": "SELECT AVG(Price) FROM Artworks INNER JOIN Artists ON Artworks.ArtistID = Artists.ArtistID WHERE Artists.Nationality = 'Japan' AND YearOfBirth > 1900 AND CreationDate >= '2000-01-01';", "sql_context": "CREATE TABLE Artists (ArtistID int, Name varchar(50), Nationality varchar(20), YearOfBirth int); CREATE TABLE Artworks (ArtworkID int, Name varchar(50), Price decimal(5,2), ArtistID int, CreationDate date);"}
{"sql_prompt": "Which satellite has the highest number of successful launches in 2020?", "sql": "SELECT satellite, MAX(success) AS highest_num_successes FROM satellite_launches WHERE year = 2020 GROUP BY satellite HAVING highest_num_successes = true;", "sql_context": "CREATE TABLE satellite_launches (id INT, satellite VARCHAR(255), year INT, success BOOLEAN); INSERT INTO satellite_launches (id, satellite, year, success) VALUES (1, 'Starlink-1', 2020, true), (2, 'Galileo IOV-1', 2020, true), (3, 'Starlink-2', 2020, true);"}
{"sql_prompt": "What is the average age of visitors who attended exhibitions in Paris last year?", "sql": "SELECT AVG(visitor_age) FROM Exhibitions WHERE city = 'Paris' AND year = 2021;", "sql_context": "CREATE TABLE Exhibitions (id INT, city VARCHAR(50), year INT, visitor_age INT);"}
{"sql_prompt": "What are the top 3 most popular local businesses in Berlin?", "sql": "SELECT name FROM local_businesses WHERE city = 'Berlin' ORDER BY popularity DESC LIMIT 3;", "sql_context": "CREATE TABLE local_businesses (business_id INT, name TEXT, city TEXT, popularity INT); INSERT INTO local_businesses (business_id, name, city, popularity) VALUES (1, 'Berlin Street Art Tour', 'Berlin', 1500), (2, 'Berlin Nightlife Tour', 'Berlin', 1200);"}
{"sql_prompt": "List all the machines that have usage hours greater than 100 and their last maintenance date.", "sql": "SELECT m.machine_name, m.last_maintenance_date FROM machine_maintenance_new3 m INNER JOIN machine_usage_new3 u ON m.machine_name = u.machine_name WHERE u.usage_hours > 100;", "sql_context": "CREATE TABLE machine_maintenance_new3 (id INT PRIMARY KEY, machine_name VARCHAR(50), last_maintenance_date DATE); CREATE TABLE machine_usage_new3 (id INT PRIMARY KEY, machine_name VARCHAR(50), usage_hours INT);"}
{"sql_prompt": "What are the total annual productions for each producer of Dysprosium and Terbium?", "sql": "SELECT p.name, SUM(CASE WHEN production.element = 'Dysprosium' THEN production.quantity ELSE 0 END) AS Dysprosium, SUM(CASE WHEN production.element = 'Terbium' THEN production.quantity ELSE 0 END) AS Terbium FROM production JOIN producers p ON production.producer_id = p.id GROUP BY p.name;", "sql_context": "CREATE TABLE producers (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255));CREATE TABLE production (year INT, producer_id INT, element VARCHAR(255), quantity INT, FOREIGN KEY (producer_id) REFERENCES producers(id));"}
{"sql_prompt": "What is the maximum duration of diversity and inclusion training programs?", "sql": "SELECT MAX(Duration) FROM TrainingPrograms WHERE Type = 'Training' AND Program LIKE '%Diversity%';", "sql_context": "CREATE TABLE TrainingPrograms (Program VARCHAR(20), Type VARCHAR(20), Duration INT); INSERT INTO TrainingPrograms (Program, Type, Duration) VALUES ('Diversity and Inclusion', 'Training', 16); INSERT INTO TrainingPrograms (Program, Type, Duration) VALUES ('Cybersecurity', 'Training', 20);"}
{"sql_prompt": "What is the average safety rating for vehicles made by 'Volvo' in the 'safety_ratings' table?", "sql": "SELECT AVG(safety_rating) FROM safety_ratings WHERE make = 'Volvo';", "sql_context": "CREATE TABLE safety_ratings (vehicle_id INT, make VARCHAR(50), model VARCHAR(50), safety_rating INT);"}
{"sql_prompt": "What is the most streamed song in California?", "sql": "SELECT song, MAX(streams) FROM streams WHERE location = 'California' GROUP BY song;", "sql_context": "CREATE TABLE streams (song VARCHAR(255), location VARCHAR(255), streams INT); INSERT INTO streams (song, location, streams) VALUES ('Take Me Home, Country Roads', 'California', 1500), ('Hotel California', 'California', 1800);"}
{"sql_prompt": "What is the average energy efficiency rating for buildings in each state in the United States?", "sql": "SELECT state, AVG(rating) as avg_rating FROM buildings GROUP BY state;", "sql_context": "CREATE TABLE buildings (id INT, state VARCHAR(2), rating FLOAT); INSERT INTO buildings (id, state, rating) VALUES (1, 'California', 90), (2, 'California', 92), (3, 'California', 88), (4, 'New York', 85), (5, 'New York', 87), (6, 'New York', 89), (7, 'Texas', 75), (8, 'Texas', 77), (9, 'Texas', 79);"}
{"sql_prompt": "What is the total timber production of all forests in the 'Asia-Pacific' region?", "sql": "SELECT SUM(timber_production) FROM forests WHERE region = 'Asia-Pacific';", "sql_context": "CREATE TABLE forests (id INT, name TEXT, area FLOAT, region TEXT, timber_production FLOAT); INSERT INTO forests (id, name, area, region, timber_production) VALUES (1, 'Sundarbans', 10000.0, 'Asia-Pacific', 12345.6), (2, 'Great Barrier Reef', 34000.0, 'Asia-Pacific', 67890.1);"}
{"sql_prompt": "How many electric vehicles were sold in each city in 2020?", "sql": "SELECT cities.name, electric_vehicles.year, SUM(electric_vehicles.sales) as total_sales FROM cities JOIN electric_vehicles ON cities.id = electric_vehicles.city_id GROUP BY cities.name, electric_vehicles.year HAVING electric_vehicles.year = 2020;", "sql_context": "CREATE TABLE cities (id INT, name VARCHAR(50), population INT); INSERT INTO cities (id, name, population) VALUES (1, 'San Francisco', 874000); INSERT INTO cities (id, name, population) VALUES (2, 'New York', 8601000); CREATE TABLE electric_vehicles (id INT, city_id INT, make VARCHAR(50), model VARCHAR(50), year INT, sales INT); INSERT INTO electric_vehicles (id, city_id, make, model, year, sales) VALUES (1, 1, 'Tesla', 'Model S', 2020, 5000); INSERT INTO electric_vehicles (id, city_id, make, model, year, sales) VALUES (2, 1, 'Tesla', 'Model 3', 2020, 8000); INSERT INTO electric_vehicles (id, city_id, make, model, year, sales) VALUES (3, 2, 'Chevrolet', 'Bolt', 2020, 3000);"}
{"sql_prompt": "What is the total number of streams for each artist on Apple Music?", "sql": "SELECT a.ArtistName, SUM(ss.StreamCount) FROM Artists a JOIN SongsStreams ss ON a.ArtistID = ss.ArtistID JOIN StreamingPlatforms sp ON ss.PlatformID = sp.PlatformID WHERE sp.PlatformName = 'Apple Music' GROUP BY a.ArtistName;", "sql_context": "CREATE TABLE Artists (ArtistID INT, ArtistName VARCHAR(100), Genre VARCHAR(50)); INSERT INTO Artists (ArtistID, ArtistName, Genre) VALUES (7, 'Rihanna', 'Pop'), (8, 'Kendrick Lamar', 'Rap/Hip-Hop'); CREATE TABLE StreamingPlatforms (PlatformID INT, PlatformName VARCHAR(50)); INSERT INTO StreamingPlatforms (PlatformID, PlatformName) VALUES (1, 'Spotify'), (2, 'Apple Music'); CREATE TABLE SongsStreams (SongID INT, ArtistID INT, PlatformID INT, StreamCount INT); INSERT INTO SongsStreams (SongID, ArtistID, PlatformID, StreamCount) VALUES (8, 7, 2, 1500000), (9, 8, 2, 1000000);"}
{"sql_prompt": "How many unique products are affected by vulnerabilities in the 'vulnerabilities' table?", "sql": "SELECT COUNT(DISTINCT affected_products) FROM vulnerabilities;", "sql_context": "CREATE TABLE vulnerabilities (id INT, name VARCHAR(255), severity VARCHAR(50), description TEXT, affected_products TEXT, date_discovered DATE);"}
{"sql_prompt": "List all food recalls in the food_recalls table that were due to contamination.", "sql": "SELECT recall_id, recall_date, food_item FROM food_recalls WHERE recall_reason LIKE '%contamination%';", "sql_context": "CREATE TABLE food_recalls (recall_id INT, recall_date DATE, food_item VARCHAR(255), recall_reason VARCHAR(255));"}
{"sql_prompt": "Show the number of eco-friendly accommodations in each country, ordered by the number of accommodations.", "sql": "SELECT country, COUNT(*) as num_eco_accommodations FROM accommodations WHERE accommodation_type = 'Eco-friendly Hotel' OR accommodation_type = 'Eco-friendly Resort' GROUP BY country ORDER BY num_eco_accommodations DESC;", "sql_context": "CREATE TABLE accommodations (id INT, country VARCHAR(50), accommodation_type VARCHAR(50), sustainability_score INT); INSERT INTO accommodations (id, country, accommodation_type, sustainability_score) VALUES (1, 'France', 'Eco-friendly Hotel', 80); INSERT INTO accommodations (id, country, accommodation_type, sustainability_score) VALUES (2, 'France', 'Eco-friendly Resort', 85); INSERT INTO accommodations (id, country, accommodation_type, sustainability_score) VALUES (3, 'Germany', 'Eco-friendly Hotel', 90);"}
{"sql_prompt": "List dishes that have never been ordered", "sql": "SELECT d.dish_name FROM dishes d LEFT JOIN orders o ON d.dish_id = o.dish_id WHERE o.order_id IS NULL;", "sql_context": "CREATE TABLE orders (order_id INT, dish_id INT, quantity INT); INSERT INTO orders (order_id, dish_id, quantity) VALUES (1, 1, 2), (2, 3, 1), (3, 2, 3), (4, 4, 1); CREATE TABLE dishes (dish_id INT, dish_name VARCHAR(255), cuisine VARCHAR(255)); INSERT INTO dishes (dish_id, dish_name, cuisine) VALUES (1, 'Quinoa Salad', 'Mediterranean'), (2, 'Chicken Caesar Wrap', 'Mediterranean'), (3, 'Tacos', 'Mexican'), (4, 'Enchiladas', 'Mexican'), (5, 'Falafel', 'Mediterranean'), (6, 'Sushi', 'Japanese');"}
{"sql_prompt": "Identify the number of deep-sea expeditions funded by the European Union.", "sql": "SELECT COUNT(*) FROM deep_sea_expeditions WHERE funding_source = 'European Union';", "sql_context": "CREATE TABLE deep_sea_expeditions (expedition_id INT, funding_source VARCHAR(255)); INSERT INTO deep_sea_expeditions (expedition_id, funding_source) VALUES (1, 'European Union'), (2, 'National Geographic'), (3, 'United Nations');"}
{"sql_prompt": "Delete all records from the 'articles' table where the 'title' contains 'Politics'", "sql": "DELETE FROM articles WHERE title LIKE '%Politics%';", "sql_context": "CREATE TABLE articles (id INT, title VARCHAR(100), published_date DATE); INSERT INTO articles (id, title, published_date) VALUES (1, 'Politics in the Capital', '2022-01-01'); INSERT INTO articles (id, title, published_date) VALUES (2, 'The Future of AI', '2022-01-02');"}
{"sql_prompt": "What is the total budget for each infrastructure project in 2022?", "sql": "SELECT location, SUM(budget) as total_budget FROM infrastructure_projects WHERE year = 2022 GROUP BY location;", "sql_context": "CREATE TABLE infrastructure_projects (id INT, project_name VARCHAR(50), location VARCHAR(50), budget DECIMAL(10,2), year INT); INSERT INTO infrastructure_projects (id, project_name, location, budget, year) VALUES (1, 'Highway 101 Expansion', 'California', 5000000, 2022), (2, 'Bridge Replacement', 'New York', 3000000, 2022), (3, 'Transit System Upgrade', 'Texas', 8000000, 2023);"}
{"sql_prompt": "What is the total number of security incidents recorded per country?", "sql": "SELECT country, COUNT(*) as total_incidents FROM security_incidents GROUP BY country;", "sql_context": "CREATE TABLE security_incidents (id INT, country VARCHAR(20), incident_type VARCHAR(20), timestamp TIMESTAMP); INSERT INTO security_incidents (id, country, incident_type, timestamp) VALUES (1, 'USA', 'Malware', '2022-01-01 10:00:00'), (2, 'Canada', 'Phishing', '2022-01-02 11:00:00');"}
{"sql_prompt": "What is the total number of veterans employed per state?", "sql": "SELECT State, SUM(Count) FROM Veterans GROUP BY State;", "sql_context": "CREATE TABLE Veterans (State VARCHAR(255), Count INT); INSERT INTO Veterans (State, Count) VALUES ('California', 5000), ('Texas', 5500), ('New York', 5200), ('Florida', 6000), ('Illinois', 4800);"}
{"sql_prompt": "Update the description of the 'Malware Attack' incident type to 'Attack using malicious software' in the 'incident_types' table", "sql": "UPDATE incident_types SET description='Attack using malicious software' WHERE name='Malware Attack';", "sql_context": "CREATE TABLE incident_types (id INT, name VARCHAR, description TEXT); INSERT INTO incident_types (id, name, description) VALUES (1, 'Malware Attack', 'Attack using malicious software');"}
{"sql_prompt": "What is the average age of players who have played the game \"Galactic Gold\" and are from the United States?", "sql": "SELECT AVG(PlayerAge) FROM Players WHERE GameName = 'Galactic Gold' AND Country = 'United States';", "sql_context": "CREATE TABLE Players (PlayerID INT, PlayerAge INT, GameName VARCHAR(20), Country VARCHAR(20)); INSERT INTO Players (PlayerID, PlayerAge, GameName, Country) VALUES (1, 25, 'Galactic Gold', 'United States'); INSERT INTO Players (PlayerID, PlayerAge, GameName, Country) VALUES (2, 32, 'Starship Showdown', 'Canada');"}
{"sql_prompt": "What is the local economic impact of tourism in Barcelona?", "sql": "SELECT economic_impact FROM tourism_impact WHERE city = 'Barcelona';", "sql_context": "CREATE TABLE tourism_impact (city TEXT, economic_impact INT); INSERT INTO tourism_impact (city, economic_impact) VALUES ('Barcelona', 10000000), ('Rome', 12000000);"}
{"sql_prompt": "What is the average age of community health workers in Texas and California?", "sql": "SELECT AVG(age) FROM community_health_workers WHERE state IN ('Texas', 'California');", "sql_context": "CREATE TABLE community_health_workers (id INT, name VARCHAR(50), age INT, state VARCHAR(2)); INSERT INTO community_health_workers (id, name, age, state) VALUES (1, 'John Doe', 45, 'Texas'), (2, 'Jane Smith', 35, 'California');"}
{"sql_prompt": "Calculate the average drought duration", "sql": "SELECT AVG(drought_duration) FROM drought_impact;", "sql_context": "CREATE TABLE drought_impact (id INT PRIMARY KEY, region VARCHAR(50), drought_duration INT);"}
{"sql_prompt": "What is the name and country of manufacturers who are not certified fair trade?", "sql": "SELECT name, country FROM manufacturers WHERE certified_fair_trade = false;", "sql_context": "CREATE TABLE manufacturers (id INT, name VARCHAR(255), country VARCHAR(255), certified_fair_trade BOOLEAN); INSERT INTO manufacturers (id, name, country, certified_fair_trade) VALUES (1, 'Manufacturer B', 'India', false);"}
{"sql_prompt": "List all accommodations and related students with visual impairments", "sql": "SELECT accommodations.accommodation_category, students.student_name FROM accommodations INNER JOIN students ON accommodations.student_id = students.student_id WHERE students.disability = 'Visual Impairment';", "sql_context": "CREATE TABLE accommodations (student_id INT, accommodation_category VARCHAR(20)); INSERT INTO accommodations (student_id, accommodation_category) VALUES (1, 'Braille Materials'), (2, 'Screen Reader'), (3, 'Large Print'); CREATE TABLE students (student_id INT, student_name VARCHAR(30), disability VARCHAR(20)); INSERT INTO students (student_id, student_name, disability) VALUES (1, 'Alex', 'Visual Impairment'), (2, 'Beth', 'Hearing Impairment'), (3, 'Charlie', 'None');"}
{"sql_prompt": "What is the minimum range of electric scooters in the \"electric_scooters\" table?", "sql": "SELECT MIN(range) FROM electric_scooters WHERE scooter_type = 'Stand-Up';", "sql_context": "CREATE TABLE electric_scooters (id INT, scooter_type VARCHAR(255), range INT); INSERT INTO electric_scooters (id, scooter_type, range) VALUES (1, 'Stand-Up', 20);"}
{"sql_prompt": "How many open data initiatives were launched in the European Union in the last 5 years?", "sql": "SELECT COUNT(*) FROM open_data_initiatives WHERE launch_year >= 2016 AND location = 'European Union';", "sql_context": "CREATE TABLE open_data_initiatives (initiative_id INT, launch_year INT, location VARCHAR(50)); INSERT INTO open_data_initiatives (initiative_id, launch_year, location) VALUES (1, 2017, 'European Union'), (2, 2016, 'United States'), (3, 2015, 'European Union'), (4, 2018, 'United Kingdom'), (5, 2017, 'Canada'), (6, 2020, 'European Union'), (7, 2019, 'European Union');"}
{"sql_prompt": "Identify the container ships that have a higher capacity than the average capacity of all container ships.", "sql": "SELECT * FROM fleet WHERE type = 'Container' AND capacity > (SELECT AVG(capacity) FROM fleet WHERE type = 'Container');", "sql_context": "CREATE TABLE fleet (id INT, name VARCHAR(50), capacity INT, type VARCHAR(50)); INSERT INTO fleet VALUES (1, 'ShipA', 10000, 'Container'), (2, 'ShipB', 12000, 'Container'), (3, 'ShipC', 8000, 'Container'), (4, 'ShipD', 5000, 'Tanker');"}
{"sql_prompt": "What is the maximum budget allocated for public transportation in urban areas?", "sql": "SELECT MAX(amount) FROM budget WHERE item = 'Public Transportation' AND area_id = (SELECT id FROM areas WHERE name = 'Urban');", "sql_context": "CREATE TABLE areas (id INT, name VARCHAR(20)); INSERT INTO areas (id, name) VALUES (1, 'Urban'), (2, 'Rural'); CREATE TABLE budget (item VARCHAR(20), area_id INT, amount INT); INSERT INTO budget (item, area_id, amount) VALUES ('Public Transportation', 1, 9000000), ('Public Transportation', 2, 5000000);"}
{"sql_prompt": "List all policies with risk assessment model scores higher than 800, ordered by score in descending order", "sql": "SELECT policies.policy_id, risk_score FROM policies INNER JOIN risk_assessment USING (policy_id) WHERE risk_score > 800 ORDER BY risk_score DESC", "sql_context": "CREATE TABLE policies (policy_id INT, policyholder_id INT, policy_start_date DATE, policy_end_date DATE); CREATE TABLE risk_assessment (risk_id INT, policy_id INT, risk_score INT); INSERT INTO policies VALUES (1, 1, '2020-01-01', '2021-01-01'); INSERT INTO policies VALUES (2, 2, '2019-01-01', '2020-01-01'); INSERT INTO risk_assessment VALUES (1, 1, 900); INSERT INTO risk_assessment VALUES (2, 2, 700);"}
{"sql_prompt": "What is the minimum fairness score for models trained on the 'explainable_ai' dataset?", "sql": "SELECT MIN(fairness_score) FROM explainable_ai WHERE dataset = 'explainable_ai';", "sql_context": "CREATE TABLE explainable_ai (model_name TEXT, dataset TEXT, fairness_score INTEGER); INSERT INTO explainable_ai (model_name, dataset, fairness_score) VALUES ('model1', 'explainable_ai', 85), ('model2', 'explainable_ai', 92), ('model3', 'explainable_ai', 88);"}
{"sql_prompt": "Identify the community engagement programs in North America that have the most diverse range of traditional art forms.", "sql": "SELECT location, COUNT(DISTINCT arts) AS diversity FROM programs WHERE location = 'North America' GROUP BY location ORDER BY diversity DESC;", "sql_context": "CREATE TABLE programs (name VARCHAR(255), location VARCHAR(255), arts VARCHAR(255)); INSERT INTO programs (name, location, arts) VALUES ('Program1', 'North America', 'Art1, Art2'), ('Program2', 'North America', 'Art2, Art3'), ('Program3', 'Europe', 'Art1');"}
{"sql_prompt": "Display the most popular cuisine type in each region.", "sql": "SELECT Location, Cuisine, COUNT(Cuisine) AS Popularity FROM Orders INNER JOIN DistinctLocations ON Orders.Location = DistinctLocations.Location GROUP BY Location, Cuisine ORDER BY Location, Popularity DESC;", "sql_context": "CREATE TABLE Orders (OrderID INT, MenuItemID INT, CustomerID INT, Location TEXT, Cuisine TEXT); CREATE VIEW DistinctLocations AS SELECT DISTINCT Location FROM Orders;"}
{"sql_prompt": "Delete records in the menu_engineering table where the sales_volume is greater than 100", "sql": "DELETE FROM menu_engineering WHERE sales_volume > 100;", "sql_context": "CREATE TABLE menu_engineering (item_name VARCHAR(50), sales_volume INT);"}
{"sql_prompt": "What is the total number of hours spent on open pedagogy projects by students in each grade level?", "sql": "SELECT g.level, SUM(p.hours) FROM projects p JOIN grades g ON p.student_id = g.id WHERE p.open_pedagogy = TRUE GROUP BY g.id;", "sql_context": "CREATE TABLE grades (id INT, level TEXT); CREATE TABLE projects (id INT, student_id INT, hours INT, open_pedagogy BOOLEAN);"}
{"sql_prompt": "What is the total cost of vehicle maintenance per route in region X and Y?", "sql": "SELECT Route.RouteName, SUM(MaintenanceCost) FROM Route JOIN Maintenance ON Route.RouteID = Maintenance.RouteID JOIN Region ON Route.RegionID = Region.RegionID WHERE Region.RegionName IN ('RegionX', 'RegionY') GROUP BY Route.RouteName;", "sql_context": "CREATE TABLE Region (RegionID INT, RegionName VARCHAR(255)); INSERT INTO Region (RegionID, RegionName) VALUES (1, 'RegionX'), (2, 'RegionY'); CREATE TABLE Route (RouteID INT, RegionID INT, RouteName VARCHAR(255)); INSERT INTO Route (RouteID, RegionID, RouteName) VALUES (1, 1, 'Route1A'), (2, 1, 'Route1B'), (3, 2, 'Route2A'), (4, 2, 'Route2B'); CREATE TABLE Maintenance (MaintenanceID INT, RouteID INT, MaintenanceCost DECIMAL(5,2)); INSERT INTO Maintenance (MaintenanceID, RouteID, MaintenanceCost) VALUES (1, 1, 1200.00), (2, 1, 1100.00), (3, 2, 1500.00), (4, 2, 1400.00), (5, 3, 1600.00), (6, 3, 1700.00), (7, 4, 1300.00), (8, 4, 1200.00);"}
{"sql_prompt": "Insert new records of edibles sold in Oregon in June 2021", "sql": "INSERT INTO Sales (SaleID, ProductID, QuantitySold, SaleDate, DispensaryID) VALUES (1, 101, 15, '2021-06-01', 1001), (2, 102, 20, '2021-06-02', 1001), (3, 103, 10, '2021-06-03', 1001);", "sql_context": "CREATE TABLE Sales (SaleID INT, ProductID INT, QuantitySold INT, SaleDate DATE, DispensaryID INT);"}
{"sql_prompt": "Count the number of renewable energy projects for each technology type", "sql": "SELECT technology_type, COUNT(*) FROM renewable_energy_projects GROUP BY technology_type;", "sql_context": "CREATE TABLE renewable_energy_projects (id INT, project_name VARCHAR(100), technology_type VARCHAR(50), installed_capacity FLOAT);"}
{"sql_prompt": "What is the average delivery time for each supplier?", "sql": "SELECT supplier_id, AVG(delivery_time) AS avg_delivery_time FROM deliveries GROUP BY supplier_id;", "sql_context": "CREATE TABLE deliveries (id INT, supplier_id INT, delivery_time INT); INSERT INTO deliveries (id, supplier_id, delivery_time) VALUES (1, 1, 5), (2, 2, 7), (3, 3, 3), (4, 1, 4), (5, 2, 6);"}
{"sql_prompt": "Find the average budget for all conservation projects", "sql": "SELECT AVG(budget) AS avg_budget FROM conservation_projects;", "sql_context": "CREATE TABLE conservation_projects (id INT, name VARCHAR(255), budget DECIMAL(10, 2)); INSERT INTO conservation_projects (id, name, budget) VALUES (1, 'Save the Tiger', 1000000), (2, 'Giraffe Habitat Restoration', 500000), (3, 'Panda Protection', 800000), (4, 'Rhino Sanctuary', 1200000), (5, 'Elephant Conservation', 1500000);"}
{"sql_prompt": "List all cases and the number of associated bills.", "sql": "SELECT c.case_id, c.case_type, COUNT(b.bill_id) as num_bills FROM cases c LEFT OUTER JOIN billing b ON c.case_id = b.case_id GROUP BY c.case_id, c.case_type;", "sql_context": "CREATE TABLE cases (case_id INT, case_type VARCHAR(255)); INSERT INTO cases (case_id, case_type) VALUES (1, 'Civil'), (2, 'Criminal'); CREATE TABLE billing (bill_id INT, case_id INT, amount DECIMAL(10, 2)); INSERT INTO billing (bill_id, case_id, amount) VALUES (1, 1, 500.00), (2, 1, 250.00), (3, 2, 750.00);"}
{"sql_prompt": "What is the percentage of companies founded by women in each country?", "sql": "SELECT country, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM companies WHERE founder_gender = 'female') as percentage FROM companies WHERE founder_gender = 'female' GROUP BY country ORDER BY percentage DESC;", "sql_context": "CREATE TABLE companies (id INT, name TEXT, country TEXT, founding_year INT, founder_gender TEXT); INSERT INTO companies (id, name, country, founding_year, founder_gender) VALUES (1, 'Acme Inc', 'USA', 2010, 'female'); INSERT INTO companies (id, name, country, founding_year, founder_gender) VALUES (2, 'Bravo Corp', 'Canada', 2012, 'male');"}
{"sql_prompt": "How many Boeing 737 MAX aircraft have been manufactured to date?", "sql": "SELECT COUNT(*) FROM Boeing737MAX WHERE manufactured_date IS NOT NULL;", "sql_context": "CREATE TABLE Boeing737MAX (id INT, manufactured_date DATE);"}
{"sql_prompt": "What is the trend of Europium price from 2016 to 2020?", "sql": "SELECT year, price FROM Europium_Price WHERE year BETWEEN 2016 AND 2020;", "sql_context": "CREATE TABLE Europium_Price (year INT, price FLOAT); INSERT INTO Europium_Price (year, price) VALUES (2015, 300), (2016, 320), (2017, 340), (2018, 360), (2019, 380), (2020, 400);"}
{"sql_prompt": "Calculate the total claim amount paid to policyholders in 'California' and 'Colorado' in June 2020.", "sql": "SELECT SUM(claim_amount) FROM claims WHERE policyholder_state IN ('California', 'Colorado') AND claim_date BETWEEN '2020-06-01' AND '2020-06-30';", "sql_context": "CREATE TABLE claims (policyholder_id INT, claim_amount DECIMAL(10,2), policyholder_state VARCHAR(20), claim_date DATE); INSERT INTO claims (policyholder_id, claim_amount, policyholder_state, claim_date) VALUES (1, 500.00, 'California', '2020-06-01'), (2, 300.00, 'Colorado', '2020-06-15'), (3, 700.00, 'California', '2020-06-30');"}
{"sql_prompt": "Which excavation sites have at least 1 unique artifact type in 'site_p' and 'site_q'?", "sql": "SELECT site_id FROM (SELECT site_id, COUNT(DISTINCT artifact_type) as count FROM site_p GROUP BY site_id HAVING count > 0 INTERSECT SELECT site_id, COUNT(DISTINCT artifact_type) as count FROM site_q GROUP BY site_id HAVING count > 0) AS subquery;", "sql_context": "CREATE TABLE site_p (site_id INT, artifact_type VARCHAR(255)); INSERT INTO site_p (site_id, artifact_type) VALUES (1, 'Pottery'), (2, 'Tools'), (3, 'Pottery'), (4, 'Beads'); CREATE TABLE site_q (site_id INT, artifact_type VARCHAR(255)); INSERT INTO site_q (site_id, artifact_type) VALUES (5, 'Jewelry'), (6, 'Tools'), (7, 'Jewelry'), (8, 'Beads');"}
{"sql_prompt": "How many traditional music instruments are documented for each country?", "sql": "SELECT country, COUNT(*) FROM MusicInstruments GROUP BY country;", "sql_context": "CREATE TABLE MusicInstruments (id INT, instrument VARCHAR(255), country VARCHAR(255)); INSERT INTO MusicInstruments (id, instrument, country) VALUES (1, 'Didgeridoo', 'Australia'), (2, 'Kora', 'Senegal'), (3, 'Sitar', 'India');"}
{"sql_prompt": "Which organization received the highest total donation in Q1 2022?", "sql": "SELECT organization_id, SUM(amount) as total_donation FROM donations WHERE donation_date BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY organization_id ORDER BY total_donation DESC LIMIT 1;", "sql_context": "CREATE TABLE donations (donor_id INT, organization_id INT, amount DECIMAL(10,2), donation_date DATE); INSERT INTO donations (donor_id, organization_id, amount, donation_date) VALUES (1, 101, 500.00, '2022-01-01'), (2, 102, 350.00, '2022-01-05'), (3, 101, 200.00, '2022-03-25');"}
{"sql_prompt": "What is the average depth of the ocean floor in the Arctic Ocean?", "sql": "SELECT AVG(depth) FROM ocean_floor_mapping WHERE location LIKE '%Arctic Ocean%';", "sql_context": "CREATE TABLE ocean_floor_mapping (map_id INT, location TEXT, depth FLOAT); INSERT INTO ocean_floor_mapping (map_id, location, depth) VALUES (1, 'Location A', 5000.1), (2, 'Location B', 6000.2), (3, 'Location C', 4000.3);"}
{"sql_prompt": "What is the total number of space missions conducted by China and Russia?", "sql": "SELECT COUNT(*) FROM space_missions WHERE country IN ('China', 'Russia');", "sql_context": "CREATE TABLE space_missions (mission_id INT, mission_name VARCHAR(100), country VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO space_missions (mission_id, mission_name, country, start_date, end_date) VALUES (1, 'Shenzhou 5', 'China', '2003-10-15', '2003-10-15'); INSERT INTO space_missions (mission_id, mission_name, country, start_date, end_date) VALUES (2, 'Soyuz TMA-1', 'Russia', '2003-10-30', '2003-11-10');"}
{"sql_prompt": "List all projects from the 'Renewable_Energy' table that are located in 'Mountain' or 'Desert' areas.", "sql": "SELECT project_name FROM Renewable_Energy WHERE location IN ('Mountain', 'Desert');", "sql_context": "CREATE TABLE Renewable_Energy (project_id INT, project_name VARCHAR(50), location VARCHAR(50)); INSERT INTO Renewable_Energy (project_id, project_name, location) VALUES (1, 'Wind Farm', 'Mountain'), (2, 'Solar Farm', 'Desert'), (3, 'Geothermal Plant', 'Volcanic Area'), (4, 'Hydroelectric Dam', 'River');"}
{"sql_prompt": "Count the number of female members in the 'labor_rights_union' table who have been active for more than 5 years.", "sql": "SELECT COUNT(*) FROM labor_rights_union WHERE gender = 'Female' AND years_active > 5;", "sql_context": "CREATE TABLE labor_rights_union (id INT, name VARCHAR(50), gender VARCHAR(50), years_active INT); INSERT INTO labor_rights_union (id, name, gender, years_active) VALUES (1, 'Dana', 'Female', 6), (2, 'Eva', 'Female', 7), (3, 'Fiona', 'Female', 8);"}
{"sql_prompt": "What is the total number of mental health parity violations and the total number of patients treated for mental health issues in each community?", "sql": "SELECT CommunityID, SUM(ViolationCount) as TotalViolations, COUNT(PatientID) as PatientCount FROM ParityViolations JOIN CommunityMentalHealth ON ParityViolations.CommunityID = CommunityMentalHealth.CommunityID GROUP BY CommunityID;", "sql_context": "CREATE TABLE ParityViolations (ViolationID int, CommunityID int, ViolationCount int);CREATE TABLE CommunityMentalHealth (CommunityID int, PatientID int);"}
{"sql_prompt": "How many renewable energy projects were completed in each country?", "sql": "SELECT country, COUNT(*) FROM renewable_energy_projects rep GROUP BY country;", "sql_context": "CREATE TABLE renewable_energy_projects (project_name VARCHAR(50), country VARCHAR(20)); INSERT INTO renewable_energy_projects (project_name, country) VALUES ('Project A', 'France'), ('Project B', 'France'), ('Project C', 'Germany'), ('Project D', 'Germany');"}
{"sql_prompt": "Identify the AI algorithm with the lowest fairness score, for applications launched in Asia.", "sql": "SELECT algorithm_id, MIN(fairness_score) AS min_fairness_score FROM ai_apps WHERE region = 'Asia' GROUP BY algorithm_id;", "sql_context": "CREATE TABLE ai_apps (app_id INT, app_name VARCHAR(255), algorithm_id INT, fairness_score FLOAT, launch_date DATE, region VARCHAR(255)); INSERT INTO ai_apps (app_id, app_name, algorithm_id, fairness_score, launch_date, region) VALUES (1, 'App1', 1, 0.85, '2022-01-01', 'China'), (2, 'App2', 2, 0.92, '2022-03-15', 'Canada'), (3, 'App3', 3, 0.78, '2022-05-07', 'India');"}
{"sql_prompt": "List the top 3 destinations for adventure tourists from Asia by total visitor count.", "sql": "SELECT city, SUM(visitor_count) as total_visitors FROM destinations WHERE tourist_type = 'adventure' AND country = 'Asia' GROUP BY city ORDER BY total_visitors DESC LIMIT 3;", "sql_context": "CREATE TABLE destinations (id INT, country VARCHAR(50), city VARCHAR(50), tourist_type VARCHAR(50), visitor_count INT); INSERT INTO destinations (id, country, city, tourist_type, visitor_count) VALUES (1, 'Thailand', 'Bangkok', 'adventure', 5000), (2, 'Nepal', 'Kathmandu', 'adventure', 3000), (3, 'Indonesia', 'Bali', 'adventure', 4000), (4, 'Japan', 'Tokyo', 'adventure', 2000), (5, 'India', 'New Delhi', 'adventure', 6000);"}
{"sql_prompt": "What is the average depth of all Pacific Ocean trenches?", "sql": "SELECT AVG(average_depth) FROM ocean_trenches WHERE location = 'Pacific Ocean';", "sql_context": "CREATE TABLE ocean_trenches (trench_name TEXT, location TEXT, average_depth NUMERIC); INSERT INTO ocean_trenches (trench_name, location, average_depth) VALUES ('Mariana Trench', 'Pacific Ocean', '8178'); INSERT INTO ocean_trenches (trench_name, location, average_depth) VALUES ('Tonga Trench', 'Pacific Ocean', '10820');"}
{"sql_prompt": "What is the total financial contribution by each department for Q2 2022?", "sql": "SELECT department_name, SUM(financial_amount) as total_financial_contribution FROM financials f JOIN departments d ON f.department_id = d.department_id WHERE financial_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY department_name;", "sql_context": "CREATE TABLE departments (department_id INT, department_name TEXT); CREATE TABLE financials (financial_id INT, department_id INT, financial_date DATE, financial_amount FLOAT); INSERT INTO financials (financial_id, department_id, financial_date, financial_amount) VALUES (1, 1, '2022-04-01', 5000.00), (2, 1, '2022-06-15', 3000.00), (3, 2, '2022-05-30', 7000.00);"}
{"sql_prompt": "Update the sales figure for DrugB in Q2 2023 to 16000.", "sql": "UPDATE sales_data SET sales = 16000 WHERE drug = 'DrugB' AND quarter = 2 AND year = 2023;", "sql_context": "CREATE TABLE sales_data (drug VARCHAR(255), quarter INT, year INT, sales FLOAT); INSERT INTO sales_data (drug, quarter, year, sales) VALUES ('DrugA', 1, 2023, 12000), ('DrugA', 2, 2023, 15000), ('DrugB', 1, 2023, 8000), ('DrugB', 2, 2023, 18000), ('DrugC', 1, 2023, 10000);"}
{"sql_prompt": "What is the minimum price of tickets sold in 'Section E' in the 'ticket_sales' table?", "sql": "SELECT MIN(price) FROM ticket_sales WHERE section = 'Section E';", "sql_context": "CREATE TABLE ticket_sales (ticket_id INT, section VARCHAR(50), price DECIMAL(5,2), quantity INT); INSERT INTO ticket_sales (ticket_id, section, price, quantity) VALUES (1, 'Section A', 50.00, 25); INSERT INTO ticket_sales (ticket_id, section, price, quantity) VALUES (2, 'Section B', 40.00, 30); INSERT INTO ticket_sales (ticket_id, section, price, quantity) VALUES (3, 'Section C', 60.00, 15); INSERT INTO ticket_sales (ticket_id, section, price, quantity) VALUES (4, 'Section D', 70.00, 10); INSERT INTO ticket_sales (ticket_id, section, price, quantity) VALUES (5, 'Section E', 80.00, 5);"}
{"sql_prompt": "What is the total installed capacity of solar energy projects in Paris, France?", "sql": "SELECT SUM(capacity) FROM solar_energy_projects WHERE city = 'Paris' AND country = 'France';", "sql_context": "CREATE TABLE solar_energy_projects (id INT, project_name VARCHAR(50), city VARCHAR(50), country VARCHAR(50), capacity FLOAT); INSERT INTO solar_energy_projects (id, project_name, city, country, capacity) VALUES (1, 'Paris Solar Farm', 'Paris', 'France', 12.8);"}
{"sql_prompt": "List the number of healthcare providers in each county, for counties with a population greater than 15,000.", "sql": "SELECT h.county, COUNT(h.id) FROM healthcare_providers h JOIN counties c ON h.county = c.county WHERE c.population > 15000 GROUP BY h.county;", "sql_context": "CREATE TABLE healthcare_providers (id INT, county VARCHAR(20), provider_type VARCHAR(20)); INSERT INTO healthcare_providers (id, county, provider_type) VALUES (1, 'Autauga County', 'Physician'); CREATE TABLE counties (county VARCHAR(20), state VARCHAR(2), population INT); INSERT INTO counties (county, state, population) VALUES ('Autauga County', 'AL', 55000);"}
{"sql_prompt": "Show the total budget for habitat preservation in 'habitat_preservation' table for the African region", "sql": "SELECT SUM(budget) FROM habitat_preservation WHERE region = 'African';", "sql_context": "CREATE TABLE habitat_preservation (id INT, region VARCHAR(50), budget DECIMAL(10,2));"}
{"sql_prompt": "Summarize the national security budget for each department and the percentage of the total budget it represents.", "sql": "SELECT department, budget, budget * 100.0 / SUM(budget) OVER () as percentage_of_total FROM national_security_budget;", "sql_context": "CREATE TABLE national_security_budget (department VARCHAR(255), budget INT);"}
{"sql_prompt": "What is the total budget for digital divide initiatives in the Americas?", "sql": "SELECT SUM(budget) FROM budget_initiatives WHERE initiative = 'digital divide' AND region = 'Americas';", "sql_context": "CREATE TABLE budget_initiatives (initiative TEXT, region TEXT, budget INT); INSERT INTO budget_initiatives (initiative, region, budget) VALUES ('digital divide', 'Americas', 80000), ('digital divide', 'Europe', 50000), ('ethical AI', 'Asia-Pacific', 120000);"}
{"sql_prompt": "What are the names of all skincare products that are not certified organic?", "sql": "SELECT name FROM products WHERE category = 'skincare' AND certified_organic = false;", "sql_context": "CREATE TABLE products (id INT, name VARCHAR(255), category VARCHAR(255), price DECIMAL(5,2), certified_organic BOOLEAN); INSERT INTO products (id, name, category, price, certified_organic) VALUES (1, 'Cleanser', 'skincare', 19.99, true), (2, 'Toner', 'skincare', 24.99, false), (3, 'Moisturizer', 'skincare', 34.99, true);"}
{"sql_prompt": "Which players are admins in any game?", "sql": "SELECT * FROM Players WHERE is_admin = true;", "sql_context": "CREATE TABLE Players (player_id INT, name VARCHAR(255), age INT, is_admin BOOLEAN); INSERT INTO Players (player_id, name, age, is_admin) VALUES (1, 'John', 27, true), (2, 'Sarah', 30, false), (3, 'Alex', 22, false), (4, 'Max', 25, true), (5, 'Zoe', 28, false);"}
{"sql_prompt": "What are the military technologies related to cybersecurity in the 'military_tech' table?", "sql": "SELECT tech FROM military_tech WHERE tech LIKE '%cyber%' OR tech LIKE '%security%';", "sql_context": "CREATE TABLE military_tech (tech VARCHAR(255)); INSERT INTO military_tech (tech) VALUES ('cyber_defense'), ('firewall'), ('encryption'), ('intrusion_detection'), ('AI');"}
{"sql_prompt": "What is the number of tourists from African countries visiting sustainable destinations in Europe?", "sql": "SELECT COUNT(*) FROM bookings b JOIN countries c ON b.country_code = c.country_code JOIN destinations d ON b.destination_id = d.destination_id WHERE d.is_sustainable = TRUE AND c.continent = 'Africa' AND d.continent = 'Europe';", "sql_context": "CREATE TABLE countries (country_code CHAR(3), country_name VARCHAR(100), continent VARCHAR(50));CREATE TABLE destinations (destination_id INT, destination_name VARCHAR(100), is_sustainable BOOLEAN, continent VARCHAR(50));CREATE TABLE bookings (booking_id INT, guest_id INT, destination_id INT, country_code CHAR(3));INSERT INTO countries (country_code, country_name, continent) VALUES ('ZAF', 'South Africa', 'Africa'), ('TZA', 'Tanzania', 'Africa'), ('EGY', 'Egypt', 'Africa'), ('COD', 'Democratic Republic of the Congo', 'Africa'), ('MAR', 'Morocco', 'Africa');"}
{"sql_prompt": "What is the average monthly temperature in each province, ranked in ascending order?", "sql": "SELECT province, AVG(temperature) AS avg_temperature FROM WeatherData GROUP BY province ORDER BY avg_temperature ASC;", "sql_context": "CREATE TABLE WeatherData (province VARCHAR(50), temperature FLOAT, measurement_date DATE); INSERT INTO WeatherData (province, temperature, measurement_date) VALUES ('Alberta', 10, '2022-01-01'), ('British Columbia', 5, '2022-01-01'), ('Ontario', 15, '2022-01-01'), ('Quebec', 20, '2022-01-01');"}
{"sql_prompt": "Which aircraft have spent the most time in flight for a specific airline?", "sql": "SELECT a.model, SUM(fh.flight_hours) as total_flight_hours FROM aircrafts a JOIN flight_hours fh ON a.aircraft_id = fh.aircraft_id WHERE a.airline_id = 101 GROUP BY a.model ORDER BY total_flight_hours DESC;", "sql_context": "CREATE TABLE aircrafts (aircraft_id INT, model VARCHAR(50), airline_id INT); INSERT INTO aircrafts (aircraft_id, model, airline_id) VALUES (1, 'B737', 101), (2, 'A320', 101), (3, 'B747', 101), (4, 'B777', 101), (5, 'B787', 101); CREATE TABLE flight_hours (flight_hour_id INT, aircraft_id INT, flight_hours DECIMAL(18, 2)); INSERT INTO flight_hours (flight_hour_id, aircraft_id, flight_hours) VALUES (1, 1, 1234.56), (2, 1, 1456.78), (3, 2, 1000.00), (4, 3, 2500.00), (5, 4, 3000.00), (6, 5, 1500.00);"}
{"sql_prompt": "Insert a new investment with organization ID 4 in the renewable energy sector with an ESG rating of 9.0", "sql": "INSERT INTO investments (id, organization_id) VALUES (4, (SELECT id FROM organizations WHERE sector = 'Renewable Energy' AND ESG_rating = 9.0)); -- Note: There are currently no organizations in the 'Renewable Energy' sector with an ESG rating of 9.0. This command will fail if such an organization doesn't exist.", "sql_context": "CREATE TABLE organizations (id INT, sector VARCHAR(20), ESG_rating FLOAT); INSERT INTO organizations (id, sector, ESG_rating) VALUES (1, 'Healthcare', 7.5), (2, 'Technology', 8.2), (3, 'Healthcare', 8.0); CREATE TABLE investments (id INT, organization_id INT); INSERT INTO investments (id, organization_id) VALUES (1, 1), (2, 2), (3, 3);"}
{"sql_prompt": "What is the maximum assets value for customers in 'Latin America'?", "sql": "SELECT MAX(assets) FROM customers WHERE region = 'Latin America';", "sql_context": "CREATE TABLE customers (id INT, name VARCHAR(50), region VARCHAR(20), assets DECIMAL(10,2)); INSERT INTO customers (id, name, region, assets) VALUES (1, 'John Doe', 'Southwest', 50000.00), (2, 'Jane Smith', 'Northeast', 75000.00), (3, 'Pedro Alvarez', 'Latin America', 200000.00);"}
{"sql_prompt": "Which sustainable hotels in South Africa have the lowest carbon footprint?", "sql": "SELECT hotel_name, carbon_footprint FROM hotel_carbon_footprint WHERE country = 'South Africa' AND is_sustainable = true ORDER BY carbon_footprint ASC;", "sql_context": "CREATE TABLE hotel_carbon_footprint(hotel_id INT, hotel_name TEXT, country TEXT, is_sustainable BOOLEAN, carbon_footprint INT); INSERT INTO hotel_carbon_footprint (hotel_id, hotel_name, country, is_sustainable, carbon_footprint) VALUES (1, 'Eco Hotel', 'South Africa', true, 40), (2, 'Luxury Resort', 'South Africa', false, 100), (3, 'Green Hotel', 'South Africa', true, 50);"}
{"sql_prompt": "List schools with accessibility ratings above 4.", "sql": "SELECT id, name FROM schools WHERE accessibility_rating > 4;", "sql_context": "CREATE TABLE schools (id INT, name VARCHAR(255), accessibility_rating INT);"}
{"sql_prompt": "Find companies in the retail sector with more than 100 employees, and list their names, founding dates, and the number of funding rounds they have completed.", "sql": "SELECT companies.name, companies.founded_date, COUNT(DISTINCT funding.round) AS funding_rounds FROM companies INNER JOIN funding ON companies.id = funding.company_id WHERE companies.industry = 'Retail' AND companies.employees > 100 GROUP BY companies.name, companies.founded_date;", "sql_context": "CREATE TABLE companies (id INT, name TEXT, industry TEXT, employees INT, founded_date DATE); CREATE TABLE funding (company_id INT, amount INT, round INT); INSERT INTO companies (id, name, industry, employees, founded_date) VALUES (1, 'ShopRite', 'Retail', 200, '2005-01-01'); INSERT INTO funding (company_id, amount, round) VALUES (1, 100000, 1);"}
{"sql_prompt": "Find the top 3 users with the highest average heart rate during their workouts", "sql": "SELECT user_id, AVG(avg_heart_rate) as avg_heart_rate FROM user_heart_rates GROUP BY user_id ORDER BY avg_heart_rate DESC LIMIT 3;", "sql_context": "CREATE TABLE user_heart_rates (user_id INT, avg_heart_rate INT);"}
{"sql_prompt": "Calculate the total quantity of products in all categories", "sql": "SELECT SUM(quantity) FROM products;", "sql_context": "CREATE TABLE products (product_id INT, category VARCHAR(20), quantity INT); INSERT INTO products (product_id, category, quantity) VALUES (1, 'apparel', 50), (2, 'accessories', 70), (3, 'home_decor', 40), (4, 'electronics', 600), (5, 'grocery', 60), (6, 'toys', 30), (7, 'furniture', 150);"}
{"sql_prompt": "List all peacekeeping operations in Africa and their duration.", "sql": "SELECT operation, location, end_date - start_date AS duration FROM PeacekeepingOperations WHERE location LIKE '%Africa%';", "sql_context": "CREATE TABLE PeacekeepingOperations (id INT, operation VARCHAR(50), location VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO PeacekeepingOperations (id, operation, location, start_date, end_date) VALUES (1, 'Operation Restore Hope', 'Somalia', '1992-12-03', '1993-05-04'), (2, 'Operation United Assistance', 'Liberia', '2014-09-25', '2016-04-30');"}
{"sql_prompt": "What is the average well-being program score for athletes in Dallas?", "sql": "SELECT AVG(program_score) FROM athletes WHERE city = 'Dallas';", "sql_context": "CREATE TABLE athletes (name VARCHAR(255), team VARCHAR(255), city VARCHAR(255), program_score INT); INSERT INTO athletes (name, team, city, program_score) VALUES ('Athlete 1', 'Dallas Mavericks', 'Dallas', 85), ('Athlete 2', 'Dallas Cowboys', 'Dallas', 88), ('Athlete 3', 'Dallas Stars', 'Dallas', 90);"}
{"sql_prompt": "What is the total revenue for mobile and broadband services in Q3 2022?", "sql": "SELECT SUM(revenue) FROM revenue WHERE (service = 'mobile' OR service = 'broadband') AND start_date >= '2022-07-01' AND end_date <= '2022-09-30';", "sql_context": "CREATE TABLE revenue (service VARCHAR(10), start_date DATE, end_date DATE, revenue DECIMAL(10,2)); INSERT INTO revenue (service, start_date, end_date, revenue) VALUES ('mobile', '2022-07-01', '2022-09-30', 20000.00), ('broadband', '2022-07-01', '2022-09-30', 15000.00);"}
{"sql_prompt": "How many Mars rovers have been launched since 2000?", "sql": "SELECT COUNT(*) FROM Mars_Rovers WHERE Launch_Year >= 2000;", "sql_context": "CREATE TABLE Mars_Rovers (ID INT, Name VARCHAR(50), Launch_Year INT); INSERT INTO Mars_Rovers (ID, Name, Launch_Year) VALUES (1, 'Sojourner', 1997), (2, 'Spirit', 2004), (3, 'Opportunity', 2004), (4, 'Curiosity', 2012), (5, 'Perseverance', 2020);"}
{"sql_prompt": "What is the maximum number of people in space at the same time?", "sql": "SELECT COUNT(DISTINCT name) FROM astronauts_in_space WHERE return_date IS NULL;", "sql_context": "CREATE TABLE astronauts_in_space (id INT, name VARCHAR(50), launch_date DATE, return_date DATE);"}
{"sql_prompt": "What was the total number of plants grown and the total weight of the harvest for each cultivator in Washington in 2020?", "sql": "SELECT name, SUM(plants_grown) AS total_plants, SUM(harvest_weight) AS total_weight FROM Cultivators WHERE state = 'WA' AND year = 2020 GROUP BY name;", "sql_context": "CREATE TABLE Cultivators (id INT, name TEXT, state TEXT, plants_grown INT, harvest_weight FLOAT, year INT); INSERT INTO Cultivators (id, name, state, plants_grown, harvest_weight, year) VALUES (1, 'Cultivator X', 'WA', 500, 1500.00, 2020), (2, 'Cultivator Y', 'WA', 700, 2100.00, 2020), (3, 'Cultivator Z', 'WA', 300, 900.00, 2020);"}
{"sql_prompt": "What is the market share of the top 3 OTAs in the MEA region (Middle East and Africa) in Q1 2023?", "sql": "SELECT SUM(market_share) FROM ota_market_share WHERE ota_id IN (1, 2, 3) AND region = 'MEA' AND date = '2023-01-01';", "sql_context": "CREATE TABLE ota_market_share (ota_id INT, region TEXT, market_share FLOAT, date DATE); INSERT INTO ota_market_share (ota_id, region, market_share, date) VALUES (1, 'UAE', 0.42, '2023-01-01'), (2, 'Saudi Arabia', 0.35, '2023-01-01'), (3, 'South Africa', 0.18, '2023-01-01'), (4, 'Egypt', 0.15, '2023-01-01');"}
{"sql_prompt": "What is the maximum production volume for products made by companies that prioritize ethical labor practices?", "sql": "SELECT MAX(production_volume) FROM companies WHERE ethical_labor = TRUE;", "sql_context": "CREATE TABLE companies (id INT, name TEXT, country TEXT, industry TEXT, ethical_labor BOOLEAN, product_type TEXT, production_volume INT); INSERT INTO companies (id, name, country, industry, ethical_labor, product_type, production_volume) VALUES (1, 'XYZ Corp', 'USA', 'Manufacturing', TRUE, 'Wrench', 1200), (2, 'ABC Inc', 'Canada', 'Manufacturing', TRUE, 'Screwdriver', 1500), (3, 'DEF Co', 'Mexico', 'Manufacturing', FALSE, 'Hammer', 2000);"}
{"sql_prompt": "Which art pieces were added to the museum collection after the year 2000?", "sql": "SELECT Name FROM ArtPieces WHERE YearAdded > 2000;", "sql_context": "CREATE TABLE ArtPieces (ArtPieceID INT, Name TEXT, YearAdded INT); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (1, 'Starry Night', 1889); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (2, 'The Persistence of Memory', 1931); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (3, 'Guernica', 1937); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (4, 'The Starry Night Over the Rhone', 1888); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (5, 'Girl with a Pearl Earring', 1665);"}
{"sql_prompt": "Show the number of sustainable accommodations in each region.", "sql": "SELECT region, COUNT(accom_id) AS num_sustainable_accoms FROM accommodations WHERE sustainability_rating >= 4 GROUP BY region;", "sql_context": "CREATE TABLE accommodations (accom_id INT, name VARCHAR(50), region VARCHAR(50), sustainability_rating INT);"}
{"sql_prompt": "What is the maximum mental health parity violation fine in each province for Canada?", "sql": "SELECT Province, MAX(Fine) as MaxFine FROM MentalHealthParityFines WHERE Province IN ('Ontario', 'Quebec', 'British Columbia') GROUP BY Province;", "sql_context": "CREATE TABLE MentalHealthParityFines (FineID INT, Province VARCHAR(255), Fine INT); INSERT INTO MentalHealthParityFines (FineID, Province, Fine) VALUES (1, 'Ontario', 50000), (2, 'Quebec', 75000), (3, 'British Columbia', 60000);"}
{"sql_prompt": "What is the total playtime (in minutes) for each game in the \"PCGamingCommunity\"?", "sql": "SELECT GameName, SUM(Playtime) FROM GameSessions JOIN Games ON GameSessions.GameName = Games.GameName WHERE Games.GamingCommunity = 'PCGamingCommunity' GROUP BY GameName;", "sql_context": "CREATE TABLE Games (GameID INT PRIMARY KEY, GameName VARCHAR(50), GamingCommunity VARCHAR(50)); CREATE TABLE GameSessions (SessionID INT PRIMARY KEY, GameName VARCHAR(50), Playtime MINUTE, FOREIGN KEY (GameName) REFERENCES Games(GameName)); INSERT INTO Games (GameID, GameName, GamingCommunity) VALUES (1, 'WorldOfWarcraft', 'PCGamingCommunity'), (2, 'CSGOMax', 'PCGamingCommunity'), (3, 'MinecraftPC', 'PCGamingCommunity'); INSERT INTO GameSessions (SessionID, GameName, Playtime) VALUES (1, 'WorldOfWarcraft', 220), (2, 'WorldOfWarcraft', 250), (3, 'CSGOMax', 180), (4, 'MinecraftPC', 300);"}
{"sql_prompt": "What is the average risk score for vulnerabilities in the 'network' category, partitioned by the 'last observed' date?", "sql": "SELECT last_observed, AVG(risk_score) OVER (PARTITION BY category ORDER BY last_observed) FROM vulnerabilities WHERE category = 'network';", "sql_context": "CREATE TABLE vulnerabilities (id INT, category VARCHAR(20), risk_score INT, last_observed DATE); INSERT INTO vulnerabilities (id, category, risk_score, last_observed) VALUES (1, 'network', 8, '2021-01-01'); INSERT INTO vulnerabilities (id, category, risk_score, last_observed) VALUES (2, 'network', 6, '2021-01-02');"}
{"sql_prompt": "What is the maximum number of citizens participating in public meetings for each meeting type in 'Meetings' table?", "sql": "SELECT MeetingType, MAX(Citizens) AS MaxCitizens FROM Meetings GROUP BY MeetingType", "sql_context": "CREATE TABLE Meetings (MeetingID INT, MeetingType VARCHAR(20), Citizens INT); INSERT INTO Meetings (MeetingID, MeetingType, Citizens) VALUES (1, 'TownHall', 50), (2, 'Committee', 30), (3, 'TownHall', 60);"}
{"sql_prompt": "How many pollution control initiatives are present in the North Pacific Ocean?", "sql": "SELECT COUNT(*) FROM pollution_control WHERE ocean = 'North Pacific';", "sql_context": "CREATE TABLE pollution_control (initiative_id INT, ocean TEXT); INSERT INTO pollution_control (initiative_id, ocean) VALUES (1, 'North Pacific'), (2, 'South Atlantic'), (3, 'Indian Ocean'), (4, 'North Pacific'), (5, 'Arctic Ocean');"}
{"sql_prompt": "What are the population numbers for indigenous communities in the Arctic Circle?", "sql": "SELECT name, population FROM Indigenous_Communities WHERE region = 'Arctic Circle'", "sql_context": "CREATE TABLE Indigenous_Communities ( id INT PRIMARY KEY, name VARCHAR(50), population INT, region VARCHAR(50), language VARCHAR(50) ); INSERT INTO Indigenous_Communities (id, name, population, region, language) VALUES (1, 'Sami', 80000, 'Northern Scandinavia', 'Northern Sami'); INSERT INTO Indigenous_Communities (id, name, population, region, language) VALUES (2, 'Inuit', 65000, 'Greenland', 'Greenlandic (Kalaallisut)'); INSERT INTO Indigenous_Communities (id, name, population, region, language) VALUES (3, 'Inuit', 15000, 'Canada', 'Inuktitut'); INSERT INTO Indigenous_Communities (id, name, population, region, language) VALUES (4, 'Nenets', 45000, 'Russia', 'Nenets language');"}
{"sql_prompt": "List all the unique incident types in the 'incidents' table", "sql": "SELECT DISTINCT incident_type FROM incidents;", "sql_context": "CREATE TABLE incidents (incident_id INT, incident_type VARCHAR(50), location VARCHAR(50), date_time DATETIME);"}
{"sql_prompt": "What is the average data usage for mobile subscribers in each country?", "sql": "SELECT country, AVG(data_usage) AS avg_data_usage FROM mobile_subscribers GROUP BY country;", "sql_context": "CREATE TABLE mobile_subscribers (subscriber_id INT, country VARCHAR(50), data_usage INT); INSERT INTO mobile_subscribers (subscriber_id, country, data_usage) VALUES (1, 'China', 100), (2, 'Brazil', 150), (3, 'Indonesia', 200), (4, 'Russia', 250), (5, 'China', 50), (6, 'Brazil', 75), (7, 'Indonesia', 125), (8, 'Russia', 175);"}
{"sql_prompt": "Determine the number of months since the last safety incident for each chemical.", "sql": "SELECT Chemical_ID, Chemical_Name, Incident_Date, DATEDIFF('month', Incident_Date, LEAD(Incident_Date) OVER (PARTITION BY Chemical_ID ORDER BY Incident_Date)) as Months_Since_Last_Incident FROM Chemical_Safety_Incidents_Timeline;", "sql_context": "CREATE TABLE Chemical_Safety_Incidents_Timeline (Chemical_ID INT, Chemical_Name TEXT, Incident_Date DATE); INSERT INTO Chemical_Safety_Incidents_Timeline (Chemical_ID, Chemical_Name, Incident_Date) VALUES (1, 'Chemical A', '2022-01-01'), (2, 'Chemical B', '2022-02-01'), (3, 'Chemical C', '2022-03-01');"}
{"sql_prompt": "Insert a new record into 'regulatory_compliance' table for 'Green Earth Dispensary' with a fine of $2000 and violation date of '2022-01-01'.", "sql": "INSERT INTO regulatory_compliance (dispensary, fine, violation) VALUES ('Green Earth Dispensary', 2000, '2022-01-01');", "sql_context": "CREATE TABLE regulatory_compliance (id INT, dispensary VARCHAR(255), fine FLOAT, violation DATE);"}
{"sql_prompt": "How many unique artworks were displayed in the top 3 most visited exhibitions?", "sql": "SELECT COUNT(DISTINCT artwork_id) FROM Exhibition_Artworks INNER JOIN (SELECT id FROM Exhibitions ORDER BY visitors DESC LIMIT 3) AS TopExhibitions ON Exhibition_Artworks.exhibition_id = TopExhibitions.id;", "sql_context": "CREATE TABLE Exhibitions (id INT, visitors INT); INSERT INTO Exhibitions VALUES (1, 3000), (2, 4000), (3, 5000), (4, 2000); CREATE TABLE Exhibition_Artworks (exhibition_id INT, artwork_id INT); INSERT INTO Exhibition_Artworks VALUES (1, 100), (1, 101), (2, 200), (2, 201), (3, 300), (4, 400);"}
{"sql_prompt": "How many research grants were awarded to each faculty member?", "sql": "SELECT f.faculty_name, COUNT(g.grant_id) AS num_grants FROM faculty f INNER JOIN grants g ON f.faculty_id = g.faculty_id GROUP BY f.faculty_name;", "sql_context": "CREATE TABLE faculty (faculty_id INT, faculty_name VARCHAR(50)); CREATE TABLE grants (grant_id INT, faculty_id INT, grant_amount DECIMAL(10,2)); INSERT INTO faculty (faculty_id, faculty_name) VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO grants (grant_id, faculty_id, grant_amount) VALUES (100, 1, 50000), (101, 1, 75000), (102, 2, 60000);"}
{"sql_prompt": "How many customers have been served by Shariah-compliant financial institutions in the Middle East offering financial wellbeing products?", "sql": "SELECT COUNT(*) FROM Customers C INNER JOIN Institutions I ON C.InstitutionID = I.InstitutionID WHERE I.ShariahCompliant = 1 AND I.FinancialWellbeing = 1 AND C.Location = 'Middle East';", "sql_context": "CREATE TABLE Customers (CustomerID int, InstitutionID int, Location varchar(50)); INSERT INTO Customers (CustomerID, InstitutionID, Location) VALUES (1, 1, 'Middle East'); CREATE TABLE Institutions (InstitutionID int, Name varchar(50), ShariahCompliant bit, FinancialWellbeing bit); INSERT INTO Institutions (InstitutionID, Name, ShariahCompliant, FinancialWellbeing) VALUES (1, 'Institution A', 1, 1);"}
{"sql_prompt": "List all workers in the 'fair_labor' table who earn the minimum wage or above.", "sql": "SELECT * FROM fair_labor WHERE hourly_wage >= (SELECT MIN(hourly_wage) FROM fair_labor WHERE hourly_wage > 0);", "sql_context": "CREATE TABLE fair_labor (id INT, worker VARCHAR(20), hourly_wage DECIMAL(4,2)); INSERT INTO fair_labor (id, worker, hourly_wage) VALUES (1, 'John', 15.00), (2, 'Jane', 14.50), (3, 'Alice', 7.50);"}
{"sql_prompt": "What is the average production cost for Silver in Australia in 2018?", "sql": "SELECT material, AVG(cost) as avg_cost FROM production_costs WHERE location = 'Australia' AND material = 'Silver' AND year = 2018;", "sql_context": "CREATE TABLE production_costs (year INT, location VARCHAR(20), material VARCHAR(20), cost FLOAT); INSERT INTO production_costs (year, location, material, cost) VALUES (2015, 'Canada', 'Gold', 500.5), (2015, 'Canada', 'Silver', 250.2), (2016, 'Mexico', 'Gold', 600.0), (2016, 'Mexico', 'Silver', 300.0), (2018, 'Australia', 'Gold', 700.0), (2018, 'Australia', 'Silver', 350.0);"}
{"sql_prompt": "What are the number of public schools and their average budget in the West region?", "sql": "SELECT COUNT(School) AS NumberOfSchools, AVG(Budget) AS AverageBudget FROM Schools WHERE Region = 'West';", "sql_context": "CREATE TABLE Schools (Region VARCHAR(20), School VARCHAR(20), Budget DECIMAL(10,2)); INSERT INTO Schools (Region, School, Budget) VALUES ('Northeast', 'SchoolA', 15000.00), ('West', 'SchoolB', 20000.00), ('Southeast', 'SchoolC', 18000.00);"}
{"sql_prompt": "What is the name and age of the oldest community health worker in the database?", "sql": "SELECT name, age FROM community_health_workers WHERE age = (SELECT MAX(age) FROM community_health_workers);", "sql_context": "CREATE TABLE community_health_workers (id INT, name VARCHAR(50), age INT, state VARCHAR(2)); INSERT INTO community_health_workers (id, name, age, state) VALUES (1, 'John Doe', 45, 'Texas'), (2, 'Jane Smith', 35, 'California'), (3, 'Alice Johnson', 60, 'California'), (4, 'Bob Brown', 50, 'New York');"}
{"sql_prompt": "How many new mining sites have been added per year, for each type of mineral?", "sql": "SELECT Year, Type, COUNT(*) as New_Sites FROM (SELECT Year, Type, Mineral, ROW_NUMBER() OVER (PARTITION BY Year, Type ORDER BY Id) as rn FROM New_Sites) t WHERE rn = 1 GROUP BY Year, Type;", "sql_context": "CREATE TABLE New_Sites (Id INT, Year INT, Mineral VARCHAR(50), Type VARCHAR(50)); INSERT INTO New_Sites (Id, Year, Mineral, Type) VALUES (1, 2020, 'Gold', 'underground'); INSERT INTO New_Sites (Id, Year, Mineral, Type) VALUES (2, 2021, 'Silver', 'open-pit');"}
{"sql_prompt": "Calculate the total number of employees for each mining site", "sql": "SELECT s.site_name, COUNT(e.employee_id) as total_employees FROM mining_sites s INNER JOIN employees e ON s.site_id = e.site_id GROUP BY s.site_name;", "sql_context": "CREATE TABLE mining_sites (site_id INT, site_name VARCHAR(255)); INSERT INTO mining_sites (site_id, site_name) VALUES (1, 'Site A'), (2, 'Site B'); CREATE TABLE employees (employee_id INT, site_id INT, name VARCHAR(255), position VARCHAR(255)); INSERT INTO employees (employee_id, site_id, name, position) VALUES (1, 1, 'John Doe', 'Engineer'), (2, 1, 'Jane Smith', 'Supervisor'), (3, 2, 'Mike Johnson', 'Engineer');"}
{"sql_prompt": "Insert a new record into the volunteers table with the following information: id = 5, name = 'Liam Brown', hours_served = 30.00.", "sql": "INSERT INTO volunteers (id, name, hours_served) VALUES (5, 'Liam Brown', 30.00);", "sql_context": "CREATE TABLE volunteers (id INT, name VARCHAR(50), hours_served FLOAT);"}
{"sql_prompt": "What is the percentage of households in Sydney with water consumption above the city average?", "sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(DISTINCT household_id) FROM sydney_water_consumption) FROM sydney_water_consumption WHERE water_consumption > (SELECT AVG(water_consumption) FROM sydney_water_consumption);", "sql_context": "CREATE TABLE sydney_water_consumption (id INT, date DATE, household_id INT, water_consumption FLOAT); INSERT INTO sydney_water_consumption (id, date, household_id, water_consumption) VALUES (1, '2021-01-01', 1, 250.0), (2, '2021-01-02', 2, 300.0);"}
{"sql_prompt": "Update the population of 'Lion' in the 'animal_population' table to 900.", "sql": "UPDATE animal_population SET population = 900 WHERE species = 'Lion';", "sql_context": "CREATE TABLE animal_population (id INT, species VARCHAR(255), population INT); INSERT INTO animal_population (id, species, population) VALUES (1, 'Tiger', 500), (2, 'Elephant', 2000), (3, 'Lion', 800), (4, 'Giraffe', 1500);"}
{"sql_prompt": "What is the total number of space missions by NASA?", "sql": "SELECT COUNT(*) FROM missions WHERE agency = 'NASA';", "sql_context": "CREATE TABLE missions(name TEXT, agency TEXT, launch_date TEXT); INSERT INTO missions(name, agency, launch_date) VALUES('Apollo 11', 'NASA', '1969-07-16'), ('Apollo 13', 'NASA', '1970-04-11');"}
{"sql_prompt": "What is the production of Gadolinium by the top 2 producing countries in 2019?", "sql": "SELECT country, quantity FROM (SELECT country, quantity, RANK() OVER (PARTITION BY element ORDER BY quantity DESC) as rank FROM production WHERE element = 'Gadolinium' AND year = 2019) WHERE rank <= 2;", "sql_context": "CREATE TABLE production (country VARCHAR(255), element VARCHAR(255), quantity INT, year INT); INSERT INTO production (country, element, quantity, year) VALUES ('China', 'Gadolinium', 50000, 2019), ('United States', 'Gadolinium', 20000, 2019), ('Australia', 'Gadolinium', 10000, 2019), ('Brazil', 'Gadolinium', 8000, 2019);"}
{"sql_prompt": "Find the total funding from private sources for visual arts programs in the Pacific Northwest region?", "sql": "SELECT SUM(funding_sources.amount) as total_funding FROM funding_sources INNER JOIN visual_arts_programs ON funding_sources.id = visual_arts_programs.id WHERE visual_arts_programs.region = 'Pacific Northwest' AND funding_sources.source_type = 'Private';", "sql_context": "CREATE TABLE funding_sources (id INT, source_type VARCHAR(255), amount FLOAT); CREATE TABLE visual_arts_programs (id INT, program_name VARCHAR(255), region VARCHAR(255));"}
{"sql_prompt": "What is the total renewable energy production in MWh for the state of New York in 2021?", "sql": "SELECT SUM(production) FROM renewable_energy WHERE state = 'New York' AND year = 2021;", "sql_context": "CREATE TABLE renewable_energy (state VARCHAR(20), production DECIMAL(10,2), year INT); INSERT INTO renewable_energy (state, production, year) VALUES ('New York', 2500.00, 2021), ('New York', 2700.00, 2021), ('New York', 2900.00, 2021);"}
{"sql_prompt": "What is the average content rating for TV shows by network?", "sql": "SELECT network, AVG(rating) as avg_rating FROM tv_ratings GROUP BY network;", "sql_context": "CREATE TABLE tv_ratings (id INT, show VARCHAR(100), network VARCHAR(100), rating DECIMAL(3,2)); INSERT INTO tv_ratings (id, show, network, rating) VALUES (1, 'ShowD', 'Network1', 7.8), (2, 'ShowE', 'Network2', 8.4), (3, 'ShowF', 'Network1', 8.2);"}
{"sql_prompt": "How many movies were released per year by 'Marvel Studios'?", "sql": "SELECT release_year, COUNT(*) as count FROM movies WHERE studio_id = (SELECT id FROM studios WHERE name = 'Marvel Studios') GROUP BY release_year ORDER BY release_year;", "sql_context": "CREATE TABLE studios (id INT, name VARCHAR(50)); INSERT INTO studios (id, name) VALUES (1, 'Marvel Studios'); CREATE TABLE movies (id INT, title VARCHAR(50), studio_id INT, release_year INT); INSERT INTO movies (id, title, studio_id, release_year) VALUES (1, 'Iron Man', 1, 2008), (2, 'Captain America', 1, 2011), (3, 'Black Widow', 1, 2021);"}
{"sql_prompt": "Which countries have the lowest and highest percentage of factories adhering to ethical labor practices?", "sql": "SELECT min(ethical_percentage) as lowest_percentage, max(ethical_percentage) as highest_percentage FROM (SELECT country, (count/total_count) * 100 as ethical_percentage FROM ethical_factories JOIN total_factories ON ethical_factories.country = total_factories.country) as ethical_percentages;", "sql_context": "CREATE TABLE factories (factory_id INT, country VARCHAR(50), is_ethical BOOLEAN); CREATE VIEW ethical_factories AS SELECT country, COUNT(*) as count FROM factories WHERE is_ethical = TRUE GROUP BY country; CREATE VIEW total_factories AS SELECT country, COUNT(*) as count FROM factories GROUP BY country;"}
{"sql_prompt": "Calculate the average transaction value for each customer in the 'CustomerTransactions' table.", "sql": "SELECT CustomerID, AVG(Amount) FROM CustomerTransactions GROUP BY CustomerID;", "sql_context": "CREATE TABLE CustomerTransactions (CustomerID int, TransactionID int, Amount decimal(18,2)); INSERT INTO CustomerTransactions (CustomerID, TransactionID, Amount) VALUES (1, 1, 5000.00), (1, 2, 7000.00);"}
{"sql_prompt": "What is the total water savings from all water conservation initiatives in the US?", "sql": "SELECT SUM(savings) as total_savings FROM conservation_initiatives ci WHERE ci.country = 'US';", "sql_context": "CREATE TABLE conservation_initiatives (id INT, country VARCHAR(50), savings FLOAT, PRIMARY KEY(id)); INSERT INTO conservation_initiatives (id, country, savings) VALUES (1, 'US', 5000), (2, 'Canada', 3000), (3, 'Mexico', 2000), (4, 'UK', 4000), (5, 'Australia', 6000);"}
{"sql_prompt": "What is the earliest artwork created by a 'Female African' artist?", "sql": "SELECT A.artist_name, B.artwork_name, B.year_created FROM Artists A INNER JOIN Artworks B ON A.id = B.artist_id WHERE A.gender = 'Female' AND A.ethnicity = 'African' ORDER BY B.year_created ASC LIMIT 1;", "sql_context": "CREATE TABLE Artists (id INT, artist_name VARCHAR(255), gender VARCHAR(10), ethnicity VARCHAR(255)); CREATE TABLE Artworks (id INT, artist_id INT, artwork_name VARCHAR(255), year_created INT, price FLOAT); INSERT INTO Artists (id, artist_name, gender, ethnicity) VALUES (1, 'Amy Sherald', 'Female', 'African'); INSERT INTO Artworks (id, artist_id, artwork_name, year_created, price) VALUES (1, 1, 'Michelle LaVaughn Robinson Obama', 2018, 5000000); INSERT INTO Artists (id, artist_name, gender, ethnicity) VALUES (2, 'Kehinde Wiley', 'Male', 'African'); INSERT INTO Artworks (id, artist_id, artwork_name, year_created, price) VALUES (2, 2, 'Rumors of War', 2019, 1500000);"}
{"sql_prompt": "Identify companies that have not reported diversity metrics for ethnicity", "sql": "SELECT company_name FROM diversity WHERE ethnicity_distribution IS NULL;", "sql_context": "CREATE TABLE diversity (company_name VARCHAR(255), gender_distribution VARCHAR(50), ethnicity_distribution VARCHAR(50)); INSERT INTO diversity (company_name, gender_distribution, ethnicity_distribution) VALUES ('Tech Titan Inc', '50/50', 'Diverse'), ('Innovate Inc', '60/40', 'Not Diverse'), ('GreenTech LLC', NULL, NULL), ('Delta Co', '40/60', 'Diverse');"}
{"sql_prompt": "What is the total revenue for the month of July?", "sql": "SELECT SUM(amount) FROM revenue WHERE month = 7;", "sql_context": "CREATE TABLE revenue (id INT, month INT, amount DECIMAL(5,2)); INSERT INTO revenue (id, month, amount) VALUES (1, 6, 5000.00), (2, 7, 6000.00), (3, 8, 7000.00), (4, 9, 8000.00);"}
{"sql_prompt": "Insert a new record into the routes table with route_id as 11, route_short_name as 'B11', route_long_name as 'Blue Line 11', route_type as 3, and route_color as 'blue'", "sql": "INSERT INTO routes (route_id, route_short_name, route_long_name, route_type, route_color) VALUES (11, 'B11', 'Blue Line 11', 3, 'blue');", "sql_context": "CREATE TABLE routes (route_id INT, route_short_name VARCHAR(255), route_long_name VARCHAR(255), route_type INT, route_color VARCHAR(255));"}
{"sql_prompt": "What is the maximum and minimum loan amount for socially responsible lending institutions in Canada?", "sql": "SELECT country, MAX(loan_amount) as max_loan_amount, MIN(loan_amount) as min_loan_amount FROM SociallyResponsibleLending WHERE country = 'Canada' GROUP BY country;", "sql_context": "CREATE TABLE SociallyResponsibleLending (id INT, institution_name VARCHAR(50), country VARCHAR(50), loan_amount FLOAT); INSERT INTO SociallyResponsibleLending (id, institution_name, country, loan_amount) VALUES (1, 'ACME Socially Responsible Lending', 'Canada', 9000), (2, 'XYZ Socially Responsible Lending', 'Canada', 12000), (3, 'Community Development Lending', 'Canada', 15000);"}
{"sql_prompt": "Find the maximum price of sustainable hair care products sold in Europe.", "sql": "SELECT MAX(price) FROM products WHERE is_sustainable = true AND region = 'Europe';", "sql_context": "CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(5,2), is_sustainable BOOLEAN, region VARCHAR(255)); INSERT INTO products (product_id, product_name, price, is_sustainable, region) VALUES (1, 'Sustainable Shampoo', 14.99, true, 'Europe'); INSERT INTO products (product_id, product_name, price, is_sustainable, region) VALUES (2, 'Eco-Friendly Conditioner', 19.99, true, 'Europe');"}
{"sql_prompt": "Which menu category has the highest average price?", "sql": "SELECT menu_category, AVG(avg_price) FROM menus GROUP BY menu_category ORDER BY AVG(avg_price) DESC LIMIT 1;", "sql_context": "CREATE TABLE menus (menu_category VARCHAR(50), avg_price DECIMAL(5,2)); INSERT INTO menus (menu_category, avg_price) VALUES ('Appetizers', 8.50), ('Entrees', 15.00), ('Desserts', 7.50);"}
{"sql_prompt": "What is the number of garments manufactured for each fabric type in the United States?", "sql": "SELECT fabric_type, COUNT(*) AS num_garments FROM garment_manufacturing WHERE country = 'USA' GROUP BY fabric_type;", "sql_context": "CREATE TABLE garment_manufacturing (manufacturing_id INT, garment_id INT, fabric_type VARCHAR(255), country VARCHAR(255)); INSERT INTO garment_manufacturing (manufacturing_id, garment_id, fabric_type, country) VALUES (1, 1001, 'Cotton', 'USA'), (2, 1002, 'Polyester', 'USA'), (3, 1003, 'Wool', 'UK'), (4, 1004, 'Silk', 'China'), (5, 1005, 'Cotton', 'USA'), (6, 1006, 'Polyester', 'USA');"}
{"sql_prompt": "Add a new client, 'Mike Johnson', residing in the 'EU' region to the 'clients' table.", "sql": "INSERT INTO clients (name, region) VALUES ('Mike Johnson', 'EU');", "sql_context": "CREATE TABLE clients (client_id INT, name TEXT, region TEXT);"}
{"sql_prompt": "Identify the top 3 countries with the most endangered species in the \"endangered_species\" and \"countries\" tables", "sql": "SELECT e1.country, COUNT(e1.species) as num_endangered  FROM endangered_species e1 INNER JOIN countries c1 ON e1.country = c1.country GROUP BY e1.country ORDER BY num_endangered DESC LIMIT 3;", "sql_context": "CREATE TABLE endangered_species (species VARCHAR(255), country VARCHAR(255)); CREATE TABLE countries (country VARCHAR(255), region VARCHAR(255));"}
{"sql_prompt": "What is the average response time for emergency calls in the city of Chicago, broken down by the type of emergency?", "sql": "SELECT type, AVG(response_time) FROM emergency_responses WHERE city = 'Chicago' GROUP BY type", "sql_context": "CREATE TABLE emergency_responses (id INT, city VARCHAR(20), type VARCHAR(20), response_time INT); INSERT INTO emergency_responses (id, city, type, response_time) VALUES (1, 'Chicago', 'emergency', 10); INSERT INTO emergency_responses (id, city, type, response_time) VALUES (2, 'Chicago', 'fire', 15);"}
{"sql_prompt": "What was the change in virtual tourism revenue between Q1 and Q2 2022, for each country in the Americas?", "sql": "SELECT country, (q2_revenue - q1_revenue) as revenue_change FROM (SELECT country, SUM(CASE WHEN quarter = 1 THEN revenue ELSE 0 END) as q1_revenue, SUM(CASE WHEN quarter = 2 THEN revenue ELSE 0 END) as q2_revenue FROM tourism_revenue WHERE country LIKE '%Americas%' AND year = 2022 GROUP BY country) as subquery;", "sql_context": "CREATE TABLE tourism_revenue (country VARCHAR(50), revenue FLOAT, quarter INT, year INT); INSERT INTO tourism_revenue (country, revenue, quarter, year) VALUES ('USA', 1200000, 1, 2022), ('Canada', 800000, 1, 2022), ('Mexico', 500000, 1, 2022), ('USA', 1500000, 2, 2022), ('Canada', 900000, 2, 2022), ('Mexico', 600000, 2, 2022);"}
{"sql_prompt": "What is the average number of vehicles per household in 'household_data' table?", "sql": "SELECT AVG(vehicles / NULLIF(households, 0)) FROM household_data;", "sql_context": "CREATE TABLE household_data (id INT, city VARCHAR(25), vehicles INT, households INT);"}
{"sql_prompt": "What is the total number of emergency calls in each neighborhood?", "sql": "SELECT neighborhood, COUNT(*) as total_calls FROM emergency_calls GROUP BY neighborhood;", "sql_context": "CREATE TABLE neighborhoods (name VARCHAR(255), zip_code VARCHAR(10)); INSERT INTO neighborhoods (name, zip_code) VALUES ('Central Park', '10022'), ('Harlem', '10026'), ('Brooklyn Heights', '11201'); CREATE TABLE emergency_calls (id INT, neighborhood VARCHAR(255), call_time TIMESTAMP); INSERT INTO emergency_calls (id, neighborhood, call_time) VALUES (1, 'Central Park', '2022-01-01 12:00:00'), (2, 'Harlem', '2022-01-02 13:00:00'), (3, 'Brooklyn Heights', '2022-01-03 14:00:00');"}
{"sql_prompt": "What is the average safety rating of vehicles manufactured by Tesla since 2015?", "sql": "SELECT AVG(safety_rating) FROM Vehicles WHERE make = 'Tesla' AND manufacturing_date >= '2015-01-01';", "sql_context": "CREATE TABLE Vehicles (id INT, make VARCHAR(255), model VARCHAR(255), safety_rating FLOAT, manufacturing_date DATE); INSERT INTO Vehicles (id, make, model, safety_rating, manufacturing_date) VALUES (1, 'Tesla', 'Model S', 5.0, '2015-01-01'); INSERT INTO Vehicles (id, make, model, safety_rating, manufacturing_date) VALUES (2, 'Toyota', 'Camry', 4.5, '2018-01-01');"}
{"sql_prompt": "What is the total cost of all road projects in the city of New York with a budget over $10 million?", "sql": "SELECT SUM(budget) FROM RoadProjects WHERE city = 'New York' AND budget > 10000000;", "sql_context": "CREATE TABLE RoadProjects (id INT, name TEXT, city TEXT, budget DECIMAL(10,2));"}
{"sql_prompt": "Which product has the most sustainable packaging material?", "sql": "SELECT product_id, material FROM packaging WHERE recyclable = true ORDER BY LENGTH(material) DESC LIMIT 1;", "sql_context": "CREATE TABLE packaging (package_id INT, product_id INT, material VARCHAR(20), recyclable BOOLEAN); INSERT INTO packaging (package_id, product_id, material, recyclable) VALUES (1, 1, 'plastic', false), (2, 2, 'glass', true), (3, 3, 'paper', true);"}
{"sql_prompt": "What are the military equipment sales for the first quarter of 2020, grouped by equipment type and region?", "sql": "SELECT equipment_type, region, SUM(revenue) FROM EquipmentSales WHERE sale_date BETWEEN '2020-01-01' AND '2020-03-31' GROUP BY equipment_type, region;", "sql_context": "CREATE TABLE EquipmentSales (equipment_type VARCHAR(50), region VARCHAR(50), sale_date DATE, revenue FLOAT);"}
{"sql_prompt": "Find the number of pedestrian_bridges in 'Tokyo'.", "sql": "SELECT COUNT(*) FROM pedestrian_bridges WHERE city = 'Tokyo';", "sql_context": "CREATE TABLE pedestrian_bridges (id INT, name VARCHAR(255), city VARCHAR(255)); INSERT INTO pedestrian_bridges (id, name, city) VALUES (1, 'Sample Pedestrian Bridge', 'Tokyo');"}
{"sql_prompt": "What are the safety protocols for handling Corrosive chemicals in Plant A?", "sql": "SELECT Safety_Protocol FROM Plant_Safety_Protocols WHERE Plant_Name = 'Plant A' AND Chemical_Type = 'Corrosive';", "sql_context": "CREATE TABLE Plant_Safety_Protocols (Plant_Name VARCHAR(255), Chemical_Type VARCHAR(255), Safety_Protocol VARCHAR(255)); INSERT INTO Plant_Safety_Protocols (Plant_Name, Chemical_Type, Safety_Protocol) VALUES ('Plant A', 'Corrosive', 'Use personal protective equipment, including gloves and goggles.');"}
{"sql_prompt": "Which astrophysics research projects have the most observations?", "sql": "SELECT project_name, SUM(num_of_observations) as total_observations FROM astrophysics_observations GROUP BY project_name;", "sql_context": "CREATE TABLE astrophysics_observations (id INT PRIMARY KEY, project_name VARCHAR(50), num_of_observations INT);"}
{"sql_prompt": "List consumer awareness campaigns related to ethical fashion by year.", "sql": "SELECT campaign, year FROM consumer_awareness ORDER BY year;", "sql_context": "CREATE TABLE consumer_awareness (id INT, campaign VARCHAR(255), year INT);"}
{"sql_prompt": "Insert a new record into the 'donors' table for a donor with the first name 'Alex', last name 'Gomez', and a donation amount of 400.00.", "sql": "INSERT INTO donors (first_name, last_name, donation_amount) VALUES ('Alex', 'Gomez', 400.00);", "sql_context": "CREATE TABLE donors (donor_id INT, first_name TEXT, last_name TEXT, donation_amount FLOAT);"}
{"sql_prompt": "Insert a new record into the \"clinicians\" table for 'Clinician C' with the last name 'Lee' and specialty 'Pediatrics'", "sql": "INSERT INTO clinicians (first_name, last_name, specialty) VALUES ('Clinician C', 'Lee', 'Pediatrics');", "sql_context": "CREATE TABLE clinicians (id INT PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(50), last_name VARCHAR(50), specialty VARCHAR(50)); INSERT INTO clinicians (first_name, last_name) VALUES ('John', 'Doe'), ('Jane', 'Smith');"}
{"sql_prompt": "Which fish species have a stock size greater than 2000 in the 'Mediterranean Sea'?", "sql": "SELECT species, stock_size FROM fish_stock WHERE region = 'Mediterranean Sea' AND stock_size > 2000;", "sql_context": "CREATE TABLE fish_stock (region VARCHAR(255), species VARCHAR(255), stock_size INT); INSERT INTO fish_stock (region, species, stock_size) VALUES ('Mediterranean Sea', 'Sardines', 1500), ('Mediterranean Sea', 'Tuna', 2500), ('Atlantic Ocean', 'Mackerel', 2000);"}
{"sql_prompt": "Insert new record into effective_altruism table", "sql": "INSERT INTO effective_altruism (id, name, amount, cause) VALUES (5, 'Donation to Animal Welfare', 300000, 'Animal Welfare');", "sql_context": "CREATE TABLE effective_altruism (id INT PRIMARY KEY, name VARCHAR(100), amount INT, cause VARCHAR(20));"}
{"sql_prompt": "What is the total number of machines in the 'machining' and 'assembly' areas?", "sql": "SELECT SUM(quantity) FROM machines WHERE area IN ('machining', 'assembly');", "sql_context": "CREATE TABLE machines (id INT, name VARCHAR(50), area VARCHAR(20), quantity INT); INSERT INTO machines (id, name, area, quantity) VALUES (1, 'CNC Mill', 'machining', 10), (2, 'Lathe', 'machining', 5), (3, 'Assembly Robot', 'assembly', 8), (4, 'Inspection Gauge', 'quality control', 3);"}
{"sql_prompt": "What is the number of IoT devices in farm G?", "sql": "SELECT COUNT(*) FROM IotDevice WHERE farm_id = (SELECT id FROM Farm WHERE name = 'Farm G');", "sql_context": "CREATE TABLE Farm (id INT, name VARCHAR(50)); CREATE TABLE IotDevice (id INT, name VARCHAR(50), farm_id INT); INSERT INTO Farm (id, name) VALUES (1, 'Farm A'), (2, 'Farm B'), (4, 'Farm G'); INSERT INTO IotDevice (id, name, farm_id) VALUES (1, 'Device 1', 1), (2, 'Device 2', 2), (3, 'Device 3', 4);"}
{"sql_prompt": "Which artists have the highest average streaming rates in the music streaming platform?", "sql": "SELECT Artists.artist_name, AVG(Streaming.stream_count) as avg_streams FROM Artists INNER JOIN Streaming ON Artists.artist_id = Streaming.artist_id GROUP BY Artists.artist_name ORDER BY avg_streams DESC LIMIT 1;", "sql_context": "CREATE TABLE Artists (artist_id INT, artist_name TEXT); CREATE TABLE Streaming (stream_id INT, artist_id INT, stream_count INT);"}
{"sql_prompt": "Calculate the moving average of water consumption for each mine over a 3-month period.", "sql": "SELECT mine_id, consumption_date, AVG(total_water_consumption) OVER (PARTITION BY mine_id ORDER BY consumption_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as moving_avg FROM mine_water_consumption;", "sql_context": "CREATE TABLE mine_water_consumption (mine_id INT, consumption_date DATE, total_water_consumption FLOAT); INSERT INTO mine_water_consumption (mine_id, consumption_date, total_water_consumption) VALUES (1, '2021-01-01', 30000), (1, '2021-01-02', 31000), (1, '2021-01-03', 32000), (1, '2021-01-04', 33000), (2, '2021-01-01', 40000), (2, '2021-01-02', 41000), (2, '2021-01-03', 42000), (2, '2021-01-04', 43000);"}
{"sql_prompt": "What is the count of group exhibitions in Japan in the last decade?", "sql": "SELECT COUNT(*) FROM Exhibitions WHERE type = 'Group' AND location LIKE '%Japan%' AND start_year >= 2010;", "sql_context": "CREATE TABLE Exhibitions (id INT, title VARCHAR(255), type VARCHAR(255), start_year INT, end_year INT, location VARCHAR(255)); INSERT INTO Exhibitions (id, title, type, start_year, end_year, location) VALUES (1, 'GroupExhibition1', 'Group', 2010, 2010, 'Japan');"}
{"sql_prompt": "What is the hospital with the highest number of beds per state?", "sql": "SELECT state, hospital_name, MAX(num_beds) as max_beds FROM hospitals GROUP BY state;", "sql_context": "CREATE TABLE hospitals (state varchar(2), hospital_name varchar(25), num_beds int); INSERT INTO hospitals (state, hospital_name, num_beds) VALUES ('NY', 'NY Presbyterian', 2001), ('CA', 'UCLA Medical', 1012), ('TX', 'MD Anderson', 1543), ('FL', 'Mayo Clinic FL', 1209);"}
{"sql_prompt": "How many cases of influenza were reported in 2020 by age group?", "sql": "SELECT age_group, COUNT(*) as cases_in_2020 FROM cases WHERE date BETWEEN '2020-01-01' AND '2020-12-31' AND disease = 'Influenza' GROUP BY age_group;", "sql_context": "CREATE TABLE cases (case_id INT, date DATE, age_group VARCHAR(10), disease VARCHAR(20)); INSERT INTO cases (case_id, date, age_group, disease) VALUES (1, '2020-01-01', '0-5', 'Influenza'), (2, '2020-02-15', '26-35', 'Influenza');"}
{"sql_prompt": "What is the total number of tourists who visited New Zealand in 2020 and 2021?", "sql": "SELECT SUM(visits) FROM (SELECT COUNT(*) AS visits FROM visitor_stats WHERE destination = 'New Zealand' AND visit_year = 2020 UNION ALL SELECT COUNT(*) FROM visitor_stats WHERE destination = 'New Zealand' AND visit_year = 2021) AS subquery;", "sql_context": "CREATE TABLE visitor_stats (destination VARCHAR(20), visit_year INT); INSERT INTO visitor_stats (destination, visit_year) VALUES ('New Zealand', 2020), ('New Zealand', 2020), ('New Zealand', 2021), ('New Zealand', 2021), ('New Zealand', 2021);"}
{"sql_prompt": "What is the total landfill capacity in the US and Canada, as of 2022?", "sql": "SELECT SUM(capacity) FROM landfill_capacity WHERE country IN ('USA', 'Canada') AND year = 2022;", "sql_context": "CREATE TABLE landfill_capacity (country TEXT, capacity INTEGER, year INTEGER);"}
{"sql_prompt": "What was the cost of space missions that were not successful?", "sql": "SELECT SUM(cost) FROM space_missions WHERE launch_status != 'Success';", "sql_context": "CREATE TABLE space_missions (id INT, mission_name VARCHAR(255), country VARCHAR(255), cost FLOAT, launch_status VARCHAR(10)); INSERT INTO space_missions (id, mission_name, country, cost, launch_status) VALUES (1, 'Apollo 11', 'USA', 25500000, 'Success'), (2, 'Mars Orbiter Mission', 'India', 73000000, 'Success'), (3, 'Chandrayaan-1', 'India', 79000000, 'Success'), (4, 'Grail', 'USA', 496000000, 'Success'), (5, 'Mars Express', 'Europe', 154000000, 'Success'), (6, 'Venus Express', 'Europe', 22000000, 'Failure'), (7, 'Hayabusa', 'Japan', 15000000, 'Success'), (8, 'Akatsuki', 'Japan', 17000000, 'Failure');"}
{"sql_prompt": "What is the average energy efficiency rating for buildings in New York?", "sql": "SELECT AVG(rating) FROM building_efficiency_NY WHERE state = 'New York';", "sql_context": "CREATE TABLE building_efficiency_NY (state VARCHAR(255), rating DECIMAL(3,2)); INSERT INTO building_efficiency_NY (state, rating) VALUES ('New York', 80.1), ('California', 85.0), ('Texas', 72.5);"}
{"sql_prompt": "Which branches conducted the most humanitarian assistance operations?", "sql": "SELECT branch, operations FROM Branches ORDER BY operations DESC;", "sql_context": "CREATE TABLE Branches (id INT, branch VARCHAR(20), operations INT); INSERT INTO Branches (id, branch, operations) VALUES (1, 'Navy', 5), (2, 'Army', 10), (3, 'Air Force', 15);"}
{"sql_prompt": "What is the total revenue of vegan leather bags?", "sql": "SELECT SUM(price) FROM products WHERE name = 'Vegan Leather Bag' AND category = 'Bags' AND material_id = (SELECT id FROM materials WHERE name = 'Vegan Leather');", "sql_context": "CREATE TABLE materials (id INT, name VARCHAR(255), type VARCHAR(255), PRIMARY KEY(id)); INSERT INTO materials (id, name, type) VALUES (1, 'Vegan Leather', 'Leather'); CREATE TABLE products (id INT, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2), material_id INT, PRIMARY KEY(id), FOREIGN KEY (material_id) REFERENCES materials(id)); INSERT INTO products (id, name, category, price, material_id) VALUES (2, 'Vegan Leather Bag', 'Bags', 85.00, 1);"}
{"sql_prompt": "Which TV show episodes have the highest rating in each season?", "sql": "SELECT title, season, MAX(rating) FROM Episodes GROUP BY season;", "sql_context": "CREATE TABLE Episodes (id INT, title VARCHAR(100), season INT, rating FLOAT, show_id INT);"}
{"sql_prompt": "What is the maximum property price in neighborhoods with inclusive housing policies?", "sql": "SELECT MAX(max_property_price) FROM neighborhoods WHERE inclusive_housing = true", "sql_context": "CREATE TABLE neighborhoods (neighborhood_id INT, name VARCHAR(255), inclusive_housing BOOLEAN, max_property_price DECIMAL(10,2)); INSERT INTO neighborhoods (neighborhood_id, name, inclusive_housing, max_property_price) VALUES (1, 'Central Park', true, 1200000), (2, 'Soho', false, 1500000), (3, 'Greenwich Village', true, 1300000), (4, 'Harlem', true, 800000);"}
{"sql_prompt": "What is the average attendance for cultural events in a given city and month?", "sql": "SELECT city, AVG(attendance) FROM CulturalEvents GROUP BY city, month;", "sql_context": "CREATE TABLE CulturalEvents (id INT, name VARCHAR(50), city VARCHAR(50), attendance INT, month INT); INSERT INTO CulturalEvents (id, name, city, attendance, month) VALUES (1, 'Theater Play', 'New York', 500, 1), (2, 'Art Exhibit', 'New York', 300, 1), (3, 'Music Concert', 'Los Angeles', 700, 1);"}
{"sql_prompt": "List the number of users, posts, comments, and reactions for each country in the social_media database.", "sql": "SELECT u.country, COUNT(DISTINCT u.user_id) AS users, COUNT(p.post_id) AS posts, COUNT(c.comment_id) AS comments, COUNT(r.reaction_id) AS reactions FROM users u LEFT JOIN posts p ON u.user_id = p.user_id LEFT JOIN comments c ON p.post_id = c.post_id LEFT JOIN reactions r ON p.post_id = r.post_id GROUP BY u.country;", "sql_context": "CREATE TABLE users (user_id INT, username VARCHAR(20), email VARCHAR(50), country VARCHAR(20)); CREATE TABLE posts (post_id INT, user_id INT, content TEXT, post_time TIMESTAMP); CREATE TABLE comments (comment_id INT, post_id INT, user_id INT, comment TEXT, comment_time TIMESTAMP); CREATE TABLE reactions (reaction_id INT, post_id INT, user_id INT, reaction VARCHAR(10), reaction_time TIMESTAMP);"}
{"sql_prompt": "What is the total number of VR games released by each game studio, and what is the minimum number of VR games released by a studio?", "sql": "SELECT name, SUM(VR_games_released) AS total_VR_games, MIN(VR_games_released) AS min_VR_games_per_studio FROM GameStudios GROUP BY name;", "sql_context": "CREATE TABLE GameStudios (id INT, name VARCHAR(50), VR_games_released INT); INSERT INTO GameStudios (id, name, VR_games_released) VALUES (1, 'StudioA', 3), (2, 'StudioB', 1), (3, 'StudioC', 5);"}
{"sql_prompt": "What is the average life expectancy in urban areas?", "sql": "SELECT c.country_name, le.expectancy FROM countries c JOIN life_expectancy le ON c.country_id = le.country_id WHERE c.area = 'urban';", "sql_context": "CREATE TABLE countries (country_id INT PRIMARY KEY, country_name VARCHAR(255), area VARCHAR(255)); INSERT INTO countries (country_id, country_name, area) VALUES (1, 'United States', 'urban'), (2, 'Canada', 'urban'), (3, 'Mexico', 'rural'); CREATE TABLE life_expectancy (country_id INT, expectancy FLOAT); INSERT INTO life_expectancy (country_id, expectancy) VALUES (1, 80), (2, 82), (3, 75);"}
{"sql_prompt": "What is the percentage of sales revenue for cruelty-free products in H1 2022?", "sql": "SELECT (SUM(revenue) / (SELECT SUM(revenue) FROM sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-06-30' AND is_cruelty_free = true) * 100) as percentage FROM sales WHERE sale_date BETWEEN '2022-01-01' AND '2022-06-30' AND is_cruelty_free = true;", "sql_context": "CREATE TABLE sales (product VARCHAR(255), sale_date DATE, revenue NUMERIC(10, 2), is_cruelty_free BOOLEAN); INSERT INTO sales (product, sale_date, revenue, is_cruelty_free) VALUES ('Eyeliner', '2022-01-01', 500, true), ('Lipstick', '2022-01-03', 300, false), ('Moisturizer', '2022-01-05', 700, true), ('Conditioner', '2022-01-07', 600, false), ('Eyeshadow', '2022-02-01', 400, true);"}
{"sql_prompt": "Insert new records into the Policyholders, HomeInsurance, and AutoInsurance tables for a new policyholder who lives in New York.", "sql": "INSERT INTO Policyholders (PolicyholderID, Name, Address, State) VALUES (4, 'Sara Connor', '678 Maple St', 'NY'); INSERT INTO HomeInsurance (PolicyholderID, HomeAddress) VALUES (4, '678 Maple St'); INSERT INTO AutoInsurance (PolicyholderID, AutoAddress) VALUES (4, '678 Maple St');", "sql_context": "CREATE TABLE Policyholders (PolicyholderID INT, Name VARCHAR(50), Address VARCHAR(100), State VARCHAR(2)); CREATE TABLE HomeInsurance (PolicyholderID INT, HomeAddress VARCHAR(100)); CREATE TABLE AutoInsurance (PolicyholderID INT, AutoAddress VARCHAR(100));"}
{"sql_prompt": "Display all organizations with a capacity below 50, along with their respective capacities.", "sql": "SELECT name, capacity FROM Organizations_Capacity WHERE capacity < 50;", "sql_context": "CREATE TABLE Organizations_Capacity (id INT, name TEXT, capacity INT); INSERT INTO Organizations_Capacity (id, name, capacity) VALUES (1, 'Habitat for Humanity', 60), (2, 'UNICEF', 75), (3, 'Red Cross', 45);"}
{"sql_prompt": "List all marine species that are threatened or endangered and have been recorded at a depth greater than 2000 meters.", "sql": "SELECT species_name FROM marine_species WHERE conservation_status IN ('Threatened', 'Endangered') AND max_depth > 2000;", "sql_context": "CREATE TABLE marine_species (species_id INT, species_name VARCHAR(100), conservation_status VARCHAR(50), max_depth FLOAT, order_name VARCHAR(50));"}
{"sql_prompt": "What is the maximum number of satellites in orbit for a single organization?", "sql": "SELECT organization, COUNT(*) as total_satellites FROM satellites GROUP BY organization ORDER BY total_satellites DESC LIMIT 1;", "sql_context": "CREATE TABLE satellites (id INT, name VARCHAR(255), organization VARCHAR(255), launch_date DATE); INSERT INTO satellites (id, name, organization, launch_date) VALUES (1, 'Satellite1', 'SpaceX', '2010-01-01'); INSERT INTO satellites (id, name, organization, launch_date) VALUES (2, 'Satellite2', 'SpaceX', '2015-05-12'); INSERT INTO satellites (id, name, organization, launch_date) VALUES (3, 'Satellite3', 'OneWeb', '2021-03-26');"}
{"sql_prompt": "What is the success rate of the support group program?", "sql": "SELECT 100.0 * AVG(CASE WHEN improvement THEN 1 ELSE 0 END) as success_rate FROM support_groups WHERE attendance = TRUE;", "sql_context": "CREATE TABLE support_groups (id INT, patient_id INT, attendance BOOLEAN, improvement BOOLEAN);"}
{"sql_prompt": "What are the names and capacities of landfills in Germany that were built after 2000?", "sql": "SELECT name, capacity FROM landfills WHERE country = 'Germany' AND build_year > 2000;", "sql_context": "CREATE TABLE landfills (name TEXT, country TEXT, capacity INTEGER, build_year INTEGER); INSERT INTO landfills (name, country, capacity, build_year) VALUES ('Landfill A', 'Germany', 150000, 2005), ('Landfill B', 'Germany', 200000, 2008), ('Landfill C', 'France', 250000, 1999);"}
{"sql_prompt": "Insert a new sale for the state of California in Q1 2023 with a revenue of 30000 and a strain of \"Sunset Sherbet\"", "sql": "INSERT INTO sales (state, quarter, strain, revenue) VALUES ('California', 'Q1', 'Sunset Sherbet', 30000);", "sql_context": "CREATE TABLE sales (id INT, state VARCHAR(50), quarter VARCHAR(10), strain VARCHAR(50), revenue INT);"}
{"sql_prompt": "What are the top 3 states with the highest mobile data usage?", "sql": "SELECT state, SUM(data_usage) as total_data_usage FROM mobile_customers GROUP BY state ORDER BY total_data_usage DESC LIMIT 3;", "sql_context": "CREATE TABLE mobile_customers (customer_id INT, name VARCHAR(50), data_usage FLOAT, state VARCHAR(20)); INSERT INTO mobile_customers (customer_id, name, data_usage, state) VALUES (1, 'John Doe', 3.5, 'New York');"}
{"sql_prompt": "Delete peacekeeping operations that lasted longer than 3 years.", "sql": "DELETE FROM peacekeeping_operations WHERE end_year - start_year > 3;", "sql_context": "CREATE TABLE peacekeeping_operations (operation_id INT, operation_name VARCHAR(255), start_year INT, end_year INT); INSERT INTO peacekeeping_operations (operation_id, operation_name, start_year, end_year) VALUES (1, 'MINUSTAH', 2004, 2017), (2, 'MONUSCO', 2010, 2021), (3, 'UNMISS', 2011, 2021);"}
{"sql_prompt": "What are the total sales figures for each drug type in the 'sales_by_region_type' and 'drug_types' tables?", "sql": "SELECT dt.drug_type, SUM(sales_q1 + sales_q2 + sales_q3 + sales_q4) as total_sales FROM sales_by_region_type sbrt JOIN drug_types dt ON sbrt.drug_name = dt.drug_name GROUP BY dt.drug_type;", "sql_context": "CREATE TABLE sales_by_region_type (region TEXT, drug_name TEXT, drug_type TEXT, sales_q1 INT, sales_q2 INT, sales_q3 INT, sales_q4 INT); CREATE TABLE drug_types (drug_name TEXT, drug_type TEXT); INSERT INTO sales_by_region_type (region, drug_name, drug_type, sales_q1, sales_q2, sales_q3, sales_q4) VALUES ('North', 'DrugP', 'Biologic', 400, 500, 600, 800), ('South', 'DrugP', 'Biologic', 300, 350, 400, 500), ('East', 'DrugP', 'Biologic', 500, 600, 700, 900), ('West', 'DrugP', 'Biologic', 600, 700, 800, 1000), ('North', 'DrugQ', 'Generic', 500, 600, 700, 800), ('South', 'DrugQ', 'Generic', 400, 450, 500, 600), ('East', 'DrugQ', 'Generic', 600, 700, 800, 900), ('West', 'DrugQ', 'Generic', 700, 800, 900, 1000); INSERT INTO drug_types (drug_name, drug_type) VALUES ('DrugP', 'Biologic'), ('DrugQ', 'Generic');"}
{"sql_prompt": "List all sports in the sports_teams table along with the number of players in each sport.", "sql": "SELECT s.sport, COUNT(a.athlete_id) as num_players FROM sports_teams s JOIN athletes a ON s.team_id = a.team_id GROUP BY s.sport;", "sql_context": "CREATE TABLE sports_teams (team_id INT, team_name VARCHAR(50), sport VARCHAR(20), city VARCHAR(20), division VARCHAR(20)); CREATE TABLE athletes (athlete_id INT, name VARCHAR(50), team_id INT, position VARCHAR(20), age INT);"}
{"sql_prompt": "What is the number of companies founded by women in the fashion industry?", "sql": "SELECT COUNT(*) FROM companies WHERE industry = 'Fashion' AND founder_gender = 'Female';", "sql_context": "CREATE TABLE companies (id INT, name TEXT, industry TEXT, founding_date DATE, founder_gender TEXT); INSERT INTO companies (id, name, industry, founding_date, founder_gender) VALUES (1, 'StyleHub', 'Fashion', '2014-07-22', 'Female'); INSERT INTO companies (id, name, industry, founding_date, founder_gender) VALUES (2, 'TrendyTech', 'Technology', '2016-11-15', 'Male');"}
{"sql_prompt": "What is the total number of sessions for each therapist?", "sql": "SELECT name, SUM(sessions) FROM therapists GROUP BY name;", "sql_context": "CREATE TABLE therapists (therapist_id INT, name VARCHAR(20), sessions INT); INSERT INTO therapists (therapist_id, name, sessions) VALUES (1, 'Therapist A', 25); INSERT INTO therapists (therapist_id, name, sessions) VALUES (2, 'Therapist B', 30); INSERT INTO therapists (therapist_id, name, sessions) VALUES (3, 'Therapist C', 20);"}
{"sql_prompt": "Which departments have a budget allocation below the average budget?", "sql": "SELECT dept FROM dept_budget WHERE budget < (SELECT AVG(budget) FROM dept_budget);", "sql_context": "CREATE TABLE dept_budget (dept VARCHAR(50), budget INT); INSERT INTO dept_budget (dept, budget) VALUES ('Infrastructure', 800000), ('Education', 700000), ('Health', 900000);"}
{"sql_prompt": "What is the percentage of graduate students in the Mechanical Engineering program who are international students?", "sql": "SELECT (COUNT(*) FILTER (WHERE Nationality <> 'USA')) * 100.0 / COUNT(*) FROM Students WHERE Program = 'Mechanical Engineering';", "sql_context": "CREATE TABLE Students (StudentID INT, Gender VARCHAR(10), Program VARCHAR(50), Nationality VARCHAR(50)); INSERT INTO Students (StudentID, Gender, Program, Nationality) VALUES (1, 'Female', 'Computer Science', 'USA'), (2, 'Male', 'Computer Science', 'Canada'), (3, 'Female', 'Computer Science', 'USA'), (4, 'Male', 'Electrical Engineering', 'India'), (5, 'Female', 'Electrical Engineering', 'USA'), (6, 'Male', 'Electrical Engineering', 'Mexico'), (7, 'Female', 'Chemical Engineering', 'USA'), (8, 'Male', 'Chemical Engineering', 'Canada'), (9, 'Female', 'Mechanical Engineering', 'China'), (10, 'Male', 'Mechanical Engineering', 'Germany');"}
{"sql_prompt": "What is the average age of players who play VR games and their total revenue?", "sql": "SELECT AVG(Players.Age), SUM(Players.TotalRevenue) FROM Players WHERE Players.PlayVR = 1;", "sql_context": "CREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), PlayVR INT, TotalRevenue INT); INSERT INTO Players (PlayerID, Age, Gender, PlayVR, TotalRevenue) VALUES (1, 30, 'Female', 1, 5000); INSERT INTO Players (PlayerID, Age, Gender, PlayVR, TotalRevenue) VALUES (2, 25, 'Male', 0, 4000); INSERT INTO Players (PlayerID, Age, Gender, PlayVR, TotalRevenue) VALUES (3, 35, 'Non-binary', 1, 6000); INSERT INTO Players (PlayerID, Age, Gender, PlayVR, TotalRevenue) VALUES (4, 28, 'Male', 1, 7000); INSERT INTO Players (PlayerID, Age, Gender, PlayVR, TotalRevenue) VALUES (5, 40, 'Female', 0, 8000);"}
{"sql_prompt": "What is the average permit fee for residential buildings in the state of Washington?", "sql": "SELECT AVG(fee) FROM building_permit WHERE building_type = 'Residential' AND state = 'Washington';", "sql_context": "CREATE TABLE building_permit (permit_id INT, building_type VARCHAR(50), fee DECIMAL(10,2), city VARCHAR(50), state VARCHAR(50)); INSERT INTO building_permit (permit_id, building_type, fee, city, state) VALUES (1, 'Residential', 5000, 'Seattle', 'Washington'), (2, 'Commercial', 12000, 'Dallas', 'Texas'), (3, 'Residential', 4500, 'Los Angeles', 'California'), (4, 'Residential', 5500, 'Tacoma', 'Washington');"}
{"sql_prompt": "What is the average age of inmates in maximum security prisons?", "sql": "SELECT AVG(AverageAge) FROM Prisons WHERE PrisonType = 'Maximum Security';", "sql_context": "CREATE TABLE Prisons (PrisonID INT, PrisonType VARCHAR(20), State VARCHAR(20), AverageAge DECIMAL(3,1)); INSERT INTO Prisons VALUES (1, 'Maximum Security', 'CA', 45.6); INSERT INTO Prisons VALUES (2, 'Medium Security', 'CA', 39.7);"}
{"sql_prompt": "Update the 'newspaper' for author with id 1 to 'The New York Times'", "sql": "UPDATE authors SET newspaper = 'The New York Times' WHERE id = 1;", "sql_context": "CREATE TABLE authors (id INT, name VARCHAR(50), newspaper VARCHAR(50)); INSERT INTO authors (id, name, newspaper) VALUES (1, 'John Doe', 'The Times'); INSERT INTO authors (id, name, newspaper) VALUES (2, 'Jane Smith', 'The Guardian');"}
{"sql_prompt": "What is the number of whale sightings in the Arctic Ocean?", "sql": "SELECT COUNT(*) FROM whale_sightings WHERE ocean = 'Arctic Ocean';", "sql_context": "CREATE TABLE whale_sightings (sighting_date DATE, ocean TEXT); INSERT INTO whale_sightings (sighting_date, ocean) VALUES ('2021-01-01', 'Arctic Ocean'), ('2021-02-01', 'Antarctic Ocean');"}
{"sql_prompt": "Which vendors have delivered more than 1000 units to 'City X'?", "sql": "SELECT Vendor FROM Deliveries WHERE Destination = 'City X' AND Units > 1000;", "sql_context": "CREATE TABLE Deliveries (DeliveryID int, Vendor varchar(50), Destination varchar(50), Units int); INSERT INTO Deliveries VALUES (1, 'Vendor A', 'City X', 1200), (2, 'Vendor B', 'City Y', 800), (3, 'Vendor A', 'City X', 1500), (4, 'Vendor C', 'City Z', 900);"}
{"sql_prompt": "What is the total length of subway_lines in 'London'?", "sql": "SELECT SUM(length) FROM subway_lines WHERE city = 'London';", "sql_context": "CREATE TABLE subway_lines (id INT, name VARCHAR(255), length FLOAT, city VARCHAR(255)); INSERT INTO subway_lines (id, name, length, city) VALUES (1, 'Sample Subway Line', 20, 'London');"}
{"sql_prompt": "Calculate the average cost of legal technology tools implemented in each state", "sql": "SELECT state, AVG(cost) FROM legal_tech_tools GROUP BY state;", "sql_context": "CREATE TABLE legal_tech_tools (tool_id INT, state VARCHAR(2), cost FLOAT); INSERT INTO legal_tech_tools (tool_id, state, cost) VALUES (1, 'CA', 1200.50), (2, 'NY', 1500.25), (3, 'TX', 1800.00), (4, 'FL', 2000.75), (5, 'CA', 2500.00), (6, 'NY', 3000.25), (7, 'TX', 3500.00), (8, 'FL', 4000.50);"}
{"sql_prompt": "What is the minimum age of underrepresented farmers in the 'rural_development' database?", "sql": "SELECT MIN(age) FROM underrepresented_farmer_age;", "sql_context": "CREATE TABLE underrepresented_farmer_age (farmer_id INT, name VARCHAR(50), age INT, ethnicity VARCHAR(50), location VARCHAR(50)); INSERT INTO underrepresented_farmer_age (farmer_id, name, age, ethnicity, location) VALUES (1, 'Fatima', 25, 'Muslim', 'Rural Area');"}
{"sql_prompt": "What is the total budget for renewable energy projects in the state of Texas, completed between 2017 and 2019?", "sql": "SELECT SUM(budget) FROM tx_projects WHERE state = 'Texas' AND year BETWEEN 2017 AND 2019 AND renewable = true;", "sql_context": "CREATE TABLE tx_projects (id INT, state VARCHAR(20), year INT, budget FLOAT, renewable BOOLEAN); INSERT INTO tx_projects (id, state, year, budget, renewable) VALUES (1, 'Texas', 2016, 10000000, true), (2, 'Texas', 2017, 12000000, true), (3, 'Texas', 2018, 8000000, false);"}
{"sql_prompt": "How many violations were recorded per restaurant?", "sql": "SELECT restaurant_id, COUNT(*) as num_violations FROM inspections GROUP BY restaurant_id;", "sql_context": "CREATE TABLE inspections (restaurant_id INT, violation_date DATE, description VARCHAR(255)); INSERT INTO inspections VALUES (1, '2021-01-01', 'Fly infestation'), (1, '2021-02-01', 'Missing date markers'), (2, '2021-01-01', 'Cleanliness issues'), (2, '2021-03-01', 'Improper food storage');"}
{"sql_prompt": "What is the average temperature (in Kelvin) per spacecraft, ranked in descending order?", "sql": "SELECT spacecraft_name, AVG(temperature) as avg_temperature, RANK() OVER (ORDER BY AVG(temperature) DESC) as temp_rank FROM spacecraft_temperatures GROUP BY spacecraft_name ORDER BY temp_rank;", "sql_context": "CREATE TABLE spacecraft_temperatures (spacecraft_name TEXT, temperature FLOAT, mission_date DATE);"}
{"sql_prompt": "How many tons of Neodymium were produced in each country in 2021?", "sql": "SELECT p.country, p.tons FROM production p WHERE p.element = 'Neodymium' AND p.year = 2021 GROUP BY p.country, p.tons;", "sql_context": "CREATE TABLE production (id INT PRIMARY KEY, element VARCHAR(10), country VARCHAR(50), year INT, tons INT); INSERT INTO production (id, element, country, year, tons) VALUES (1, 'Neodymium', 'China', 2021, 120000); INSERT INTO production (id, element, country, year, tons) VALUES (2, 'Neodymium', 'Australia', 2021, 8000); INSERT INTO production (id, element, country, year, tons) VALUES (3, 'Neodymium', 'United States', 2021, 30000);"}
{"sql_prompt": "How many pollution control initiatives have been conducted in the Pacific Ocean?", "sql": "SELECT COUNT(*) FROM pollution_control WHERE ocean = 'Pacific Ocean';", "sql_context": "CREATE TABLE pollution_control (id INT, name VARCHAR(255), ocean VARCHAR(255), year INT); INSERT INTO pollution_control (id, name, ocean, year) VALUES (1, 'Project Clean Pacific', 'Pacific Ocean', 2010), (2, 'Ocean Wave Energy', 'Pacific Ocean', 2015);"}
{"sql_prompt": "Update the 'billing' table to set the 'total_cost' field to '2500' where the client's ID is 345 and the case type is 'divorce'.", "sql": "UPDATE billing SET total_cost = 2500 WHERE client_id = 345 AND case_type = 'divorce';", "sql_context": "CREATE TABLE billing (bill_id INT PRIMARY KEY AUTO_INCREMENT, client_id INT, case_type VARCHAR(50), total_cost DECIMAL(10,2));"}
{"sql_prompt": "What is the minimum donation amount and the number of donors who made donations equal to the minimum amount?", "sql": "SELECT MIN(DonationAmount), COUNT(*) FROM Donors GROUP BY DonationAmount HAVING DonationAmount = (SELECT MIN(DonationAmount) FROM Donors);", "sql_context": "CREATE TABLE Donors (DonorID INT, DonorName TEXT, DonationAmount DECIMAL(10,2)); INSERT INTO Donors (DonorID, DonorName, DonationAmount) VALUES (1, 'John Doe', 50.00); INSERT INTO Donors (DonorID, DonorName, DonationAmount) VALUES (2, 'Jane Smith', 100.00); INSERT INTO Donors (DonorID, DonorName, DonationAmount) VALUES (3, 'Bob Johnson', 50.00);"}
{"sql_prompt": "What is the maximum carbon sequestration value for each region in the 'carbon_sequestration' table?", "sql": "SELECT region, MAX(value) as max_value FROM carbon_sequestration GROUP BY region;", "sql_context": "CREATE TABLE carbon_sequestration (region VARCHAR(255), value FLOAT); INSERT INTO carbon_sequestration (region, value) VALUES ('Arctic', 12.5), ('Antarctic', 15.0);"}
{"sql_prompt": "How many impressionist artworks were created between 1880 and 1900?", "sql": "SELECT COUNT(ArtworkID) FROM ArtWorks WHERE YearCreated BETWEEN 1880 AND 1900 AND Category = 'Impressionism';", "sql_context": "CREATE TABLE ArtWorks (ArtworkID INT, Title VARCHAR(100), YearCreated INT, Category VARCHAR(50), ArtistID INT); INSERT INTO ArtWorks (ArtworkID, Title, YearCreated, Category, ArtistID) VALUES (1, 'Guernica', 1937, 'Modern Art', 1); INSERT INTO ArtWorks (ArtworkID, Title, YearCreated, Category, ArtistID) VALUES (2, 'Starry Night', 1889, 'Post-Impressionism', 2);"}
{"sql_prompt": "Display the number of bridges and tunnels in the Transportation table", "sql": "SELECT SUM(CASE WHEN project_type = 'Bridge' THEN 1 ELSE 0 END) AS bridges, SUM(CASE WHEN project_type = 'Tunnel' THEN 1 ELSE 0 END) AS tunnels FROM Transportation;", "sql_context": "CREATE TABLE Transportation (project_id INT, project_name VARCHAR(255), project_type VARCHAR(255), length FLOAT);"}
{"sql_prompt": "Identify the warehouse in the USA with the least total space.", "sql": "SELECT warehouse_name, total_space FROM warehouses WHERE country = 'USA' ORDER BY total_space ASC LIMIT 1;", "sql_context": "CREATE TABLE warehouses (id INT, warehouse_name VARCHAR(50), country VARCHAR(50), total_space INT); INSERT INTO warehouses VALUES (1, 'Warehouse A', 'USA', 20000), (2, 'Warehouse B', 'Canada', 30000), (3, 'Warehouse C', 'USA', 15000);"}
{"sql_prompt": "What is the total amount of resources produced by each region?", "sql": "SELECT region, resource, SUM(quantity) AS total_quantity FROM regions GROUP BY region, resource;", "sql_context": "CREATE TABLE regions (id INT, mine VARCHAR(50), region VARCHAR(50), resource VARCHAR(50), quantity INT); INSERT INTO regions (id, mine, region, resource, quantity) VALUES (1, 'Mine A', 'West', 'Coal', 1000), (2, 'Mine B', 'East', 'Iron Ore', 2000), (3, 'Mine A', 'West', 'Iron Ore', 1500);"}
{"sql_prompt": "What is the trend of student mental health scores over time?", "sql": "SELECT score_date, AVG(mental_health_score) FROM mental_health_scores GROUP BY score_date;", "sql_context": "CREATE TABLE mental_health_scores (score_id INT, student_id INT, score_date DATE, mental_health_score INT); INSERT INTO mental_health_scores (score_id, student_id, score_date, mental_health_score) VALUES (1, 1, '2022-01-01', 75), (2, 1, '2022-02-01', 80), (3, 2, '2022-01-01', 85), (4, 2, '2022-02-01', 90);"}
{"sql_prompt": "Find the total number of veterans employed by region", "sql": "SELECT region, SUM(veteran_employed) FROM veteran_employment GROUP BY region;", "sql_context": "CREATE TABLE veteran_employment (id INT, region VARCHAR(255), veteran_employed INT); INSERT INTO veteran_employment (id, region, veteran_employed) VALUES (1, 'Northeast', 500), (2, 'Southeast', 700), (3, 'Midwest', 600), (4, 'West', 800);"}
{"sql_prompt": "What is the growth rate and total fish weight for each species over time?", "sql": "SELECT Species_Name, Growth_Rate, SUM(Fish_Weight) OVER (PARTITION BY Species_Name) AS Total_Fish_Weight FROM Species_Growth_Weight;", "sql_context": "CREATE TABLE Species_Growth_Weight (Species_Name TEXT, Year INT, Growth_Rate FLOAT, Fish_Weight FLOAT); INSERT INTO Species_Growth_Weight (Species_Name, Year, Growth_Rate, Fish_Weight) VALUES ('Tuna', 2019, 0.05, 1200000), ('Cod', 2019, 0.04, 800000), ('Herring', 2019, 0.03, 600000), ('Tuna', 2020, 0.06, 1400000), ('Cod', 2020, 0.05, 900000), ('Herring', 2020, 0.04, 700000);"}
{"sql_prompt": "List all companies that have not yet had an exit event", "sql": "SELECT cf.company_name FROM company_founding cf LEFT JOIN exit_strategies es ON cf.id = es.company_id WHERE es.company_id IS NULL;", "sql_context": "CREATE TABLE company_founding(id INT PRIMARY KEY, company_name VARCHAR(100)); CREATE TABLE exit_strategies(id INT PRIMARY KEY, company_id INT, exit_type VARCHAR(50)); INSERT INTO company_founding VALUES (1, 'Acme Inc'); INSERT INTO company_founding VALUES (2, 'Beta Corp'); INSERT INTO exit_strategies VALUES (1, 1, 'Acquisition');"}
{"sql_prompt": "Update the age of the teacher with ID 1 to 45 in the 'Teacher' table.", "sql": "UPDATE Teacher SET Age = 45 WHERE TeacherID = 1;", "sql_context": "CREATE TABLE Teacher (TeacherID INT, Age INT, CompletedProfessionalDevelopment YEAR); INSERT INTO Teacher (TeacherID, Age, CompletedProfessionalDevelopment) VALUES (1, 35, 2021); INSERT INTO Teacher (TeacherID, Age, CompletedProfessionalDevelopment) VALUES (2, 40, 2020);"}
{"sql_prompt": "What is the total number of military vehicles sold by ACME Corp to the African region in the year 2022?", "sql": "SELECT SUM(quantity) FROM Military_Equipment_Sales WHERE supplier = 'ACME Corp' AND region = 'Africa' AND sale_year = 2022;", "sql_context": "CREATE TABLE Military_Equipment_Sales (supplier VARCHAR(255), region VARCHAR(255), equipment VARCHAR(255), quantity INT, sale_year INT);"}
{"sql_prompt": "What is the address and certification type of properties in 'EcoCity' with a price below 800000?", "sql": "SELECT properties.address, green_certifications.certification_type FROM properties INNER JOIN green_certifications ON properties.id = green_certifications.property_id WHERE properties.city = 'EcoCity' AND properties.price < 800000;", "sql_context": "CREATE TABLE properties (id INT, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), price INT); INSERT INTO properties (id, address, city, state, price) VALUES (2, '456 Green Ave', 'EcoCity', 'CO', 750000); CREATE TABLE green_certifications (property_id INT, certification_type VARCHAR(255)); INSERT INTO green_certifications (property_id, certification_type) VALUES (2, 'GreenStar');"}
{"sql_prompt": "Which countries have the highest number of heritage sites?", "sql": "SELECT Country, COUNT(*) FROM Heritage_Sites GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 3;", "sql_context": "CREATE TABLE Heritage_Sites (Site_ID INT, Site_Name VARCHAR(100), Country VARCHAR(50)); INSERT INTO Heritage_Sites (Site_ID, Site_Name, Country) VALUES (1, 'Machu Picchu', 'Peru'); INSERT INTO Heritage_Sites (Site_ID, Site_Name, Country) VALUES (2, 'Petra', 'Jordan'); INSERT INTO Heritage_Sites (Site_ID, Site_Name, Country) VALUES (3, 'Great Wall of China', 'China');"}
{"sql_prompt": "What are the product names and preferences of consumers who have expressed a preference for products that contain rosehip oil as an ingredient?", "sql": "SELECT P.productName, C.preference FROM ConsumerPreference C INNER JOIN Product P ON C.productId = P.id INNER JOIN Ingredient I ON P.id = I.productId WHERE I.ingredient = 'Rosehip Oil';", "sql_context": "CREATE TABLE Product (id INT, productName VARCHAR(50), price DECIMAL(5,2)); INSERT INTO Product (id, productName, price) VALUES (4, 'Blush', 14.99), (5, 'Foundation', 29.99), (6, 'Lip Liner', 16.99); CREATE TABLE Ingredient (id INT, productId INT, ingredient VARCHAR(50), sourceCountry VARCHAR(50), crueltyFree BOOLEAN); INSERT INTO Ingredient (id, productId, ingredient, sourceCountry, crueltyFree) VALUES (6, 4, 'Shea Butter', 'Ghana', true), (7, 4, 'Rosehip Oil', 'Chile', true), (8, 5, 'Vitamin E', 'Argentina', true), (9, 5, 'Zinc Oxide', 'Australia', true), (10, 6, 'Jojoba Oil', 'Peru', true); CREATE TABLE ConsumerPreference (id INT, consumerId INT, productId INT, preference VARCHAR(50)); INSERT INTO ConsumerPreference (id, consumerId, productId, preference) VALUES (1, 3, 4, 'Likes'), (2, 3, 5, 'Dislikes'), (3, 4, 4, 'Loves'), (4, 4, 6, 'Likes');"}
{"sql_prompt": "What is the total energy production per renewable energy source in each country?", "sql": "SELECT country, source, SUM(production) as total_production FROM energy_production GROUP BY country, source;", "sql_context": "CREATE TABLE energy_production (id INT, country VARCHAR(255), source VARCHAR(255), production FLOAT); INSERT INTO energy_production (id, country, source, production) VALUES (1, 'Germany', 'wind', 2500), (2, 'France', 'solar', 2300), (3, 'Germany', 'solar', 2450), (4, 'France', 'wind', 2700), (5, 'Germany', 'hydro', 3000), (6, 'France', 'hydro', 3500);"}
{"sql_prompt": "What is the number of tuberculosis cases reported by gender?", "sql": "SELECT gender, COUNT(*) as tb_cases_in_2020 FROM cases WHERE date BETWEEN '2020-01-01' AND '2020-12-31' AND disease = 'Tuberculosis' GROUP BY gender;", "sql_context": "CREATE TABLE cases (case_id INT, date DATE, disease VARCHAR(20), gender VARCHAR(10)); INSERT INTO cases (case_id, date, disease, gender) VALUES (1, '2020-01-01', 'Tuberculosis', 'Male'), (2, '2020-02-15', 'Tuberculosis', 'Female');"}
{"sql_prompt": "Populate the virtual_reality table", "sql": "INSERT INTO virtual_reality (vr_id, name, release_date, manufacturer) VALUES (1, 'Oculus Quest 2', '2020-10-13', 'Facebook Technologies'), (2, 'HTC Vive Pro 2', '2021-06-01', 'HTC Corporation'), (3, 'Valve Index', '2019-06-28', 'Valve Corporation');", "sql_context": "CREATE TABLE virtual_reality (vr_id INT PRIMARY KEY, name VARCHAR(50), release_date DATE, manufacturer VARCHAR(50));"}
{"sql_prompt": "Find the number of hotels in Japan with a high sustainability rating (>=4.5).", "sql": "SELECT COUNT(*) FROM Sustainability_Ratings WHERE country = 'Japan' AND sustainability_rating >= 4.5;", "sql_context": "CREATE TABLE Sustainability_Ratings (hotel_id INT, hotel_name VARCHAR(50), country VARCHAR(50), sustainability_rating FLOAT); INSERT INTO Sustainability_Ratings (hotel_id, hotel_name, country, sustainability_rating) VALUES (1, 'Hotel Tokyo', 'Japan', 4.8), (2, 'Hotel Kyoto', 'Japan', 3.9);"}
{"sql_prompt": "What are the distinct cargo types that have been transported to the Port of Sydney and the Port of Melbourne?", "sql": "SELECT cargo_type FROM cargo, transport WHERE cargo.cargo_id = transport.cargo_id AND port_id IN (1, 2) GROUP BY cargo_type;", "sql_context": "CREATE TABLE port (port_id INT, port_name VARCHAR(50)); INSERT INTO port (port_id, port_name) VALUES (1, 'Port of Sydney'), (2, 'Port of Melbourne'); CREATE TABLE cargo (cargo_id INT, cargo_type VARCHAR(50)); CREATE TABLE transport (transport_id INT, cargo_id INT, port_id INT); INSERT INTO transport (transport_id, cargo_id, port_id) VALUES (1, 1, 1), (2, 2, 1), (3, 1, 2), (4, 3, 2);"}
{"sql_prompt": "What is the revenue generated by cultural heritage tours in Italy in 2021?", "sql": "SELECT SUM(price) FROM cultural_tours WHERE country = 'Italy' AND year = 2021;", "sql_context": "CREATE TABLE cultural_tours (tour_id INT, name VARCHAR(255), country VARCHAR(255), price FLOAT, year INT, month INT, day INT); INSERT INTO cultural_tours (tour_id, name, country, price, year, month, day) VALUES (1, 'Roman Colosseum Tour', 'Italy', 30.5, 2021, 5, 15), (2, 'Florence Uffizi Gallery Tour', 'Italy', 25.2, 2021, 7, 20), (3, 'Pompeii Tour', 'Italy', 40.0, 2021, 9, 10);"}
{"sql_prompt": "Find the number of concerts performed by artists in the same city.", "sql": "SELECT a1.artist_name AS artist1, a2.artist_name AS artist2, COUNT(*) AS num_concerts FROM artists a1 JOIN concerts c1 ON a1.artist_id = c1.artist_id JOIN concerts c2 ON c1.city = c2.city AND c1.concert_id <> c2.concert_id JOIN artists a2 ON a2.artist_id = c2.artist_id GROUP BY a1.artist_name, a2.artist_name HAVING num_concerts > 1;", "sql_context": "CREATE TABLE artists (artist_id INT, artist_name VARCHAR(50)); CREATE TABLE concerts (concert_id INT, artist_id INT, city VARCHAR(50)); INSERT INTO artists (artist_id, artist_name) VALUES (101, 'Beyonc\u00e9'), (102, 'Jay-Z'), (103, 'Kanye West'); INSERT INTO concerts (concert_id, artist_id, city) VALUES (1, 101, 'New York'), (2, 102, 'New York'), (3, 101, 'Los Angeles'), (4, 103, 'Los Angeles');"}
{"sql_prompt": "What is the total number of traffic accidents and building fires in each borough of New York City?", "sql": "SELECT 'traffic_accidents' AS metric, borough, COUNT(*) FROM traffic_accidents GROUP BY borough UNION ALL SELECT 'building_fires' AS metric, borough, COUNT(*) FROM building_fires GROUP BY borough;", "sql_context": "CREATE TABLE traffic_accidents (id INT, borough VARCHAR(20), date DATE);CREATE TABLE building_fires (id INT, borough VARCHAR(20), date DATE);"}
{"sql_prompt": "Who are the therapists who have conducted therapy sessions in the most number of unique mental health conditions?", "sql": "SELECT therapist_id, COUNT(DISTINCT condition_id) AS unique_conditions FROM therapy_session GROUP BY therapist_id ORDER BY unique_conditions DESC LIMIT 1;", "sql_context": "CREATE TABLE mental_health_condition (condition_id INT, name VARCHAR(255)); INSERT INTO mental_health_condition (condition_id, name) VALUES (1, 'Anxiety Disorder'), (2, 'Depression'), (3, 'Bipolar Disorder'), (4, 'Post-Traumatic Stress Disorder'); CREATE TABLE therapy_session (session_id INT, patient_id INT, therapist_id INT, condition_id INT);"}
{"sql_prompt": "Find the number of warehouses in each country and the average quantity of products in those warehouses.", "sql": "SELECT country, AVG(quantity) AS avg_quantity, COUNT(DISTINCT warehouse_id) AS num_warehouses FROM warehouses GROUP BY country;", "sql_context": "CREATE TABLE warehouses (warehouse_id INT, country TEXT, quantity INT); INSERT INTO warehouses (warehouse_id, country, quantity) VALUES (1, 'USA', 100), (2, 'USA', 150), (3, 'Canada', 200), (4, 'Mexico', 50), (5, 'Brazil', 250), (6, 'Germany', 300), (7, 'France', 350);"}
{"sql_prompt": "Update the capacity of an existing healthcare facility in the facility table.", "sql": "UPDATE facility SET capacity = 600 WHERE name = 'Sunshine General';", "sql_context": "CREATE TABLE facility (id INT, name VARCHAR(50), type VARCHAR(50), capacity INT); INSERT INTO facility (id, name, type, capacity) VALUES (1, 'Sunshine General', 'Hospital', 500);"}
{"sql_prompt": "What is the total playtime for players from Asia who have played games in the RPG genre?", "sql": "SELECT SUM(player_games.playtime) FROM player_games JOIN players_region ON player_games.player_id = players_region.player_id JOIN games ON player_games.game_id = games.game_id WHERE players_region.region = 'Asia' AND games.genre = 'RPG';", "sql_context": "CREATE TABLE players_region (player_id INT, region TEXT); INSERT INTO players_region VALUES (1, 'Asia'), (2, 'Europe'), (3, 'North America'); CREATE TABLE games (game_id INT, game_name TEXT, genre TEXT); INSERT INTO games VALUES (1, 'Game 1', 'RPG'), (2, 'Game 2', 'Strategy'); CREATE TABLE player_games (player_id INT, game_id INT, playtime INT); INSERT INTO player_games VALUES (1, 1, 20), (1, 2, 10), (2, 1, 15), (3, 2, 25);"}
{"sql_prompt": "How many hours did each volunteer contribute to programs in total?", "sql": "SELECT volunteer_id, SUM(volunteer_hours) as total_hours_contributed FROM Volunteers GROUP BY volunteer_id;", "sql_context": "CREATE TABLE Volunteers (volunteer_id INT, program_id INT, volunteer_hours INT, volunteer_date DATE); INSERT INTO Volunteers (volunteer_id, program_id, volunteer_hours, volunteer_date) VALUES (1, 1, 5, '2021-06-05'), (2, 2, 8, '2021-04-12'), (3, 1, 3, '2021-06-05'), (1, 3, 6, '2021-12-25');"}
{"sql_prompt": "Find the total number of users who have posted about \"veganism\" in the \"plantbased\" schema.", "sql": "SELECT COUNT(DISTINCT username) FROM users WHERE posts LIKE '%veganism%';", "sql_context": "CREATE TABLE users (id INT, username TEXT, posts TEXT);"}
{"sql_prompt": "List the top 5 customers by spending on sustainable ingredients?", "sql": "SELECT c.customer_name, SUM(o.order_price) as total_spend FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN menu_items mi ON o.menu_item_id = mi.menu_item_id WHERE mi.is_sustainable = TRUE GROUP BY c.customer_name ORDER BY total_spend DESC LIMIT 5;", "sql_context": "CREATE TABLE customers (customer_id INT, customer_name VARCHAR(255)); CREATE TABLE menu_items (menu_item_id INT, menu_category VARCHAR(255), item_name VARCHAR(255), is_sustainable BOOLEAN); CREATE TABLE orders (order_id INT, customer_id INT, menu_item_id INT, order_date DATE, order_price INT);"}
{"sql_prompt": "Determine the percentage change in Gadolinium market price between Q1 and Q2 2022.", "sql": "SELECT (AVG(price) * 100 / (SELECT AVG(price) FROM GadoliniumMarketPrices WHERE quarter = 'Q1' AND year = 2022) - 100) AS percentage_change FROM GadoliniumMarketPrices WHERE quarter = 'Q2' AND year = 2022;", "sql_context": "CREATE TABLE GadoliniumMarketPrices (quarter VARCHAR(10), year INT, price DECIMAL(5,2)); INSERT INTO GadoliniumMarketPrices (quarter, year, price) VALUES ('Q1', 2022, 120.00), ('Q1', 2022, 122.50), ('Q2', 2022, 128.00), ('Q2', 2022, 125.50);"}
{"sql_prompt": "Update the ticket price for concert 2 to $450.", "sql": "UPDATE concerts SET price = 450 WHERE concert_id = 2;", "sql_context": "CREATE TABLE concerts (concert_id INT, price DECIMAL(10, 2)); INSERT INTO concerts (concert_id, price) VALUES (1, 499.99), (2, 550), (3, 450);"}
{"sql_prompt": "What is the average temperature and humidity in Farm 5 for the first 15 days of January 2023?", "sql": "SELECT location, AVG(temperature) as avg_temperature, AVG(humidity) as avg_humidity FROM WeatherData WHERE date BETWEEN '2023-01-01' AND '2023-01-15' AND location = 'Farm 5';", "sql_context": "CREATE TABLE WeatherData (date DATE, location VARCHAR(255), temperature FLOAT, humidity FLOAT); INSERT INTO WeatherData (date, location, temperature, humidity) VALUES ('2023-01-01', 'Farm 5', 7.0, 75.0);"}
{"sql_prompt": "What is the maximum range of Level 2 EV chargers?", "sql": "SELECT MAX(Range) FROM Chargers WHERE Type = 'Level 2'", "sql_context": "CREATE TABLE Chargers (Id INT, Type VARCHAR(255), Manufacturer VARCHAR(255), Range INT); INSERT INTO Chargers (Id, Type, Manufacturer, Range) VALUES (1, 'Level 2', 'Blink', 25), (2, 'Level 2', 'ChargePoint', 30), (3, 'Level 2', 'EVgo', 28), (4, 'Level 2', 'SemaConnect', 32);"}
{"sql_prompt": "List all sustainable materials used in garment manufacturing, along with their properties.", "sql": "SELECT name, origin, durability, eco_friendly FROM materials WHERE eco_friendly = TRUE;", "sql_context": "CREATE TABLE materials (id INT, name TEXT, origin TEXT, durability INT, eco_friendly BOOLEAN); INSERT INTO materials (id, name, origin, durability, eco_friendly) VALUES (1, 'Organic Cotton', 'India', 8, TRUE), (2, 'Recycled Polyester', 'China', 7, TRUE), (3, 'Hemp', 'France', 9, TRUE);"}
{"sql_prompt": "Which countries have climate communication initiatives that received funding higher than the average funding amount?", "sql": "SELECT country, initiative, funding FROM climate_communication WHERE funding > (SELECT AVG(funding) FROM climate_communication);", "sql_context": "CREATE TABLE climate_communication (country VARCHAR(50), initiative VARCHAR(50), funding DECIMAL(10,2)); INSERT INTO climate_communication (country, initiative, funding) VALUES ('Canada', 'Climate Change Documentary', 1000000), ('Mexico', 'Climate Communication Symposium', 2000000);"}
{"sql_prompt": "Determine the total number of animals in each region", "sql": "SELECT region, SUM(population) as total_animals FROM animal_populations GROUP BY region;", "sql_context": "CREATE TABLE animal_populations (id INT, species VARCHAR(50), population INT, region VARCHAR(50)); INSERT INTO animal_populations (id, species, population, region) VALUES (1, 'Giraffe', 1000, 'Africa'), (2, 'Elephant', 500, 'Asia'), (3, 'Lion', 200, 'Africa'), (4, 'Rhinoceros', 100, 'Asia'), (5, 'Hippopotamus', 300, 'Africa'), (6, 'Polar Bear', 50, 'Arctic'), (7, 'Penguin', 250, 'Antarctica');"}
{"sql_prompt": "Find the total number of electric and hybrid buses in the public transportation systems of Tokyo and Berlin.", "sql": "SELECT SUM(quantity) FROM ( SELECT quantity FROM tokyo_buses WHERE type IN ('electric', 'hybrid') UNION SELECT quantity FROM berlin_buses WHERE type IN ('electric', 'hybrid') ) AS combined_quantities;", "sql_context": "CREATE TABLE tokyo_buses (type VARCHAR(20), quantity INT); INSERT INTO tokyo_buses (type, quantity) VALUES ('electric', 1500), ('hybrid', 500); CREATE TABLE berlin_buses (type VARCHAR(20), quantity INT); INSERT INTO berlin_buses (type, quantity) VALUES ('electric', 2000), ('hybrid', 700);"}
{"sql_prompt": "What is the total number of volunteer hours contributed by each program in Q1 2023, including partial hours?", "sql": "SELECT P.Name, SUM(VH.Hours) as TotalHours FROM VolunteerHours VH JOIN Programs P ON VH.ProgramID = P.ProgramID WHERE VH.HourDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY P.ProgramID, P.Name;", "sql_context": "CREATE TABLE Programs (ProgramID INT, Name TEXT);CREATE TABLE VolunteerHours (HourID INT, ProgramID INT, Hours DECIMAL(10,2), HourDate DATE);"}
{"sql_prompt": "What is the fare for route 666 at the first stop?", "sql": "SELECT amount FROM fares WHERE route_id = 666 AND stop_id = 1 LIMIT 1;", "sql_context": "CREATE TABLE routes (route_id INT, name VARCHAR(255)); INSERT INTO routes (route_id, name) VALUES (666, 'Route 666'); CREATE TABLE fares (fare_id INT, route_id INT, stop_id INT, amount DECIMAL(5,2)); INSERT INTO fares (fare_id, route_id, stop_id, amount) VALUES (1, 666, 1, 2.50), (2, 666, 2, 3.00);"}
{"sql_prompt": "Determine the maximum grant amount awarded to a faculty member in the Mathematics department.", "sql": "SELECT MAX(g.amount) FROM grants g JOIN faculty f ON g.faculty_id = f.id WHERE f.department = 'Mathematics';", "sql_context": "CREATE TABLE grants (id INT, faculty_id INT, year INT, amount DECIMAL(10,2)); INSERT INTO grants (id, faculty_id, year, amount) VALUES (1, 1, 2020, 85000); INSERT INTO grants (id, faculty_id, year, amount) VALUES (2, 2, 2019, 35000); CREATE TABLE faculty (id INT, name VARCHAR(50), department VARCHAR(50)); INSERT INTO faculty (id, name, department) VALUES (1, 'Hannah', 'Mathematics'); INSERT INTO faculty (id, name, department) VALUES (2, 'Ibrahim', 'Computer Science');"}
{"sql_prompt": "What is the total number of employees in the mining industry who identify as Native American or Alaska Native, in Texas and Louisiana?", "sql": "SELECT State, SUM(EmployeeCount) FROM MiningEmployees WHERE EmployeeEthnicity = 'Native American or Alaska Native' AND State IN ('Texas', 'Louisiana') GROUP BY State;", "sql_context": "CREATE TABLE MiningEmployees (State VARCHAR(50), EmployeeEthnicity VARCHAR(50), EmployeeCount INT); INSERT INTO MiningEmployees(State, EmployeeEthnicity, EmployeeCount) VALUES ('Texas', 'Native American or Alaska Native', 200), ('Texas', 'Hispanic', 500), ('Texas', 'Black', 300), ('Louisiana', 'Native American or Alaska Native', 150), ('Louisiana', 'Hispanic', 350), ('Louisiana', 'Black', 400);"}
{"sql_prompt": "List all soccer matches with more than 3 goals scored", "sql": "SELECT * FROM matches WHERE goals_scored > 3;", "sql_context": "CREATE TABLE matches (team1 VARCHAR(255), team2 VARCHAR(255), goals_scored INT);"}
{"sql_prompt": "What is the total cost of each space mission category in the SpaceMissions table?", "sql": "SELECT mission_category, SUM(cost) AS total_cost FROM SpaceMissions GROUP BY mission_category;", "sql_context": "CREATE TABLE SpaceMissions (mission_id INT, mission_category VARCHAR(50), cost FLOAT); INSERT INTO SpaceMissions (mission_id, mission_category, cost) VALUES (1, 'Moon', 25500000.0), (2, 'Mars', 7000000.0), (3, 'Moon', 340000000.0);"}
{"sql_prompt": "What is the maximum number of points scored by the Golden State Warriors in a single game during the 2015-2016 NBA season?", "sql": "SELECT MAX(points_team) FROM matches WHERE team = 'Golden State Warriors' AND season = '2015-2016';", "sql_context": "CREATE TABLE matches (team VARCHAR(50), opponent VARCHAR(50), points_team INTEGER, points_opponent INTEGER, season VARCHAR(10)); INSERT INTO matches (team, opponent, points_team, points_opponent, season) VALUES ('Golden State Warriors', 'Los Angeles Lakers', 116, 105, '2015-2016'), ('Golden State Warriors', 'Boston Celtics', 123, 112, '2015-2016');"}
{"sql_prompt": "Insert a new record into the \"researchers\" table with the following information: \"researcher_id\": 501, \"name\": \"Aisha Adebayo\", \"region\": \"Africa\", \"experience\": 7.", "sql": "INSERT INTO researchers (researcher_id, name, region, experience) VALUES (501, 'Aisha Adebayo', 'Africa', 7);", "sql_context": "CREATE TABLE researchers (researcher_id INT PRIMARY KEY, name VARCHAR(255), region VARCHAR(255), experience INT);"}
{"sql_prompt": "Update the sustainable_sourcing table to set the sourcing_percentage to 85 for ingredient 'Chia Seeds'", "sql": "UPDATE sustainable_sourcing SET sourcing_percentage = 85 WHERE ingredient = 'Chia Seeds';", "sql_context": "CREATE TABLE sustainable_sourcing (id INT PRIMARY KEY, restaurant_id INT, ingredient VARCHAR(50), sourcing_percentage DECIMAL(5, 2));"}
{"sql_prompt": "Which cities in Texas have a population greater than 100,000 and also have a university?", "sql": "SELECT cities.name FROM cities INNER JOIN states ON cities.state_id = states.id INNER JOIN universities ON cities.id = universities.city_id WHERE states.name = 'Texas' AND cities.population > 100000;", "sql_context": "CREATE TABLE states (id INT, name VARCHAR(255)); INSERT INTO states (id, name) VALUES (1, 'Texas'); CREATE TABLE cities (id INT, state_id INT, name VARCHAR(255), population INT); INSERT INTO cities (id, state_id, name, population) VALUES (1, 1, 'Austin', 961111), (2, 1, 'Houston', 2351031), (3, 1, 'Dallas', 1356638), (4, 1, 'San Antonio', 1565935); CREATE TABLE universities (id INT, state_id INT, city_id INT, name VARCHAR(255)); INSERT INTO universities (id, state_id, city_id, name) VALUES (1, 1, 1, 'University of Texas at Austin'), (2, 1, 2, 'University of Houston'), (3, 1, 3, 'Southern Methodist University'), (4, 1, 4, 'University of Texas at San Antonio');"}
{"sql_prompt": "What is the maximum number of threat indicators for the healthcare sector in the United States?", "sql": "SELECT MAX(confidence) FROM threat_indicators WHERE sector = 'Healthcare' AND country = 'USA';", "sql_context": "CREATE TABLE threat_indicators (id INT, sector TEXT, country TEXT, confidence INT); INSERT INTO threat_indicators (id, sector, country, confidence) VALUES (1, 'Healthcare', 'USA', 85); INSERT INTO threat_indicators (id, sector, country, confidence) VALUES (2, 'Healthcare', 'USA', 70); INSERT INTO threat_indicators (id, sector, country, confidence) VALUES (3, 'Healthcare', 'Canada', 88);"}
{"sql_prompt": "Rank systems by the total number of threats they have experienced.", "sql": "SELECT system, COUNT(*) as total_threats, RANK() OVER (ORDER BY COUNT(*) DESC) as rank FROM threats GROUP BY system;", "sql_context": "CREATE TABLE threats (id INT, date DATE, system TEXT, threat TEXT, action TEXT, severity TEXT);INSERT INTO threats (id, date, system, threat, action, severity) VALUES (1, '2021-01-04', 'webserver', 'DDoS', 'launched', 'medium');"}
{"sql_prompt": "List all the wells in the 'Anadarko' shale play that produced more than 1300 barrels in a day.", "sql": "SELECT well FROM anadarko_production WHERE production > 1300;", "sql_context": "CREATE TABLE anadarko_production (well text, date text, production real); INSERT INTO anadarko_production VALUES ('Well1', '2021-01-01', 1200), ('Well1', '2021-01-02', 1400), ('Well2', '2021-01-01', 2200), ('Well2', '2021-01-02', 1500);"}
{"sql_prompt": "What is the total quantity of 'organic cotton' products in the inventory?", "sql": "SELECT SUM(quantity) FROM product WHERE material = 'organic cotton';", "sql_context": "CREATE TABLE product (product_id INT, name VARCHAR(255), quantity INT, material VARCHAR(255)); INSERT INTO product (product_id, name, quantity, material) VALUES (1, 'Organic Cotton T-Shirt', 30, 'organic cotton');"}
{"sql_prompt": "Delete all transactions made by user 'JohnDoe' in the ShariahCompliantTransactions table.", "sql": "DELETE FROM ShariahCompliantTransactions WHERE userID = 'JohnDoe';", "sql_context": "CREATE TABLE ShariahCompliantTransactions (transactionID INT, userID VARCHAR(20), transactionAmount DECIMAL(10,2), transactionDate DATE); INSERT INTO ShariahCompliantTransactions (transactionID, userID, transactionAmount, transactionDate) VALUES (1, 'JohnDoe', 500.00, '2022-01-01'), (2, 'JaneDoe', 300.00, '2022-01-02');"}
{"sql_prompt": "What are the most common mental health conditions in rural areas of the US?", "sql": "SELECT condition FROM mental_health_conditions WHERE location = 'rural areas' GROUP BY condition ORDER BY SUM(prevalence) DESC;", "sql_context": "CREATE TABLE mental_health_conditions (id INT PRIMARY KEY, location VARCHAR(50), condition VARCHAR(50), prevalence FLOAT);"}
{"sql_prompt": "Which fields have nitrogen_level greater than 4.5 and temperature lower than 25.0?", "sql": "SELECT Fields.name FROM Fields INNER JOIN Satellite_Imagery ON Fields.location = Satellite_Imagery.location INNER JOIN IoT_Sensors ON Fields.id = IoT_Sensors.Field_id WHERE Satellite_Imagery.nitrogen_level > 4.5 AND IoT_Sensors.temperature < 25.0;", "sql_context": "CREATE TABLE Fields (id INT PRIMARY KEY, name VARCHAR(255), acres FLOAT, location VARCHAR(255)); INSERT INTO Fields (id, name, acres, location) VALUES (1, 'FieldA', 5.6, 'US-MN'), (2, 'FieldB', 3.2, 'US-CA'); CREATE TABLE Satellite_Imagery (id INT PRIMARY KEY, location VARCHAR(255), nitrogen_level FLOAT); INSERT INTO Satellite_Imagery (id, location, nitrogen_level) VALUES (1, 'US-MN', 3.5), (2, 'US-CA', 4.1); CREATE TABLE IoT_Sensors (id INT PRIMARY KEY, Field_id INT, temperature FLOAT, humidity FLOAT); INSERT INTO IoT_Sensors (id, Field_id, temperature, humidity) VALUES (1, 1, 20.5, 60.3), (2, 2, 25.3, 70.2);"}
{"sql_prompt": "What was the total amount of humanitarian assistance provided by Japan to South Sudan between 2016 and 2017?", "sql": "SELECT SUM(amount) FROM japan_humanitarian_assistance WHERE country = 'South Sudan' AND year BETWEEN 2016 AND 2017;", "sql_context": "CREATE TABLE japan_humanitarian_assistance (id INT, country VARCHAR(255), year INT, amount FLOAT); INSERT INTO japan_humanitarian_assistance (id, country, year, amount) VALUES (1, 'South Sudan', 2016, 3000000);"}
{"sql_prompt": "What is the daily ridership of public transportation in Toronto by mode?", "sql": "SELECT mode, SUM(ridership) FROM TOPublicTransportation WHERE date = '2022-03-01' GROUP BY mode;", "sql_context": "CREATE TABLE TOPublicTransportation (id INT, date DATE, mode VARCHAR(20), ridership INT);"}
{"sql_prompt": "What is the wastewater treatment capacity in New York?", "sql": "SELECT treatment_capacity FROM wastewater_treatment WHERE state = 'New York';", "sql_context": "CREATE TABLE wastewater_treatment(state VARCHAR(20), treatment_capacity INT); INSERT INTO wastewater_treatment VALUES('New York', 50000);"}
{"sql_prompt": "Find the top 5 countries with the highest renewable energy capacity in Africa?", "sql": "SELECT name FROM (SELECT name, ROW_NUMBER() OVER (ORDER BY renewable_energy_capacity DESC) as rn FROM countries WHERE name IN ('Egypt', 'South Africa', 'Morocco', 'Algeria', 'Tunisia', 'Ethiopia')) t WHERE rn <= 5;", "sql_context": "CREATE TABLE countries (name VARCHAR(255), renewable_energy_capacity INT); INSERT INTO countries (name, renewable_energy_capacity) VALUES ('Egypt', 12000), ('South Africa', 9000), ('Morocco', 7000), ('Algeria', 6000), ('Tunisia', 5000), ('Ethiopia', 4000);"}
{"sql_prompt": "What is the total production of gadolinium in India and Pakistan combined for the last 5 years?", "sql": "SELECT SUM(production_quantity) FROM gadolinium_production WHERE country IN ('India', 'Pakistan') AND year >= 2017 AND year <= 2021;", "sql_context": "CREATE TABLE gadolinium_production (year INT, country TEXT, production_quantity INT); INSERT INTO gadolinium_production (year, country, production_quantity) VALUES (2017, 'India', 1200), (2018, 'India', 1500), (2019, 'India', 1700), (2020, 'India', 2000), (2021, 'India', 2200), (2017, 'Pakistan', 800), (2018, 'Pakistan', 900), (2019, 'Pakistan', 1000), (2020, 'Pakistan', 1200), (2021, 'Pakistan', 1400);"}
{"sql_prompt": "What is the total budget allocated for each program, sorted in descending order?", "sql": "SELECT name, budget FROM Programs ORDER BY budget DESC;", "sql_context": "CREATE TABLE Programs (id INT, name VARCHAR(100), budget DECIMAL(10, 2)); INSERT INTO Programs (id, name, budget) VALUES (1, 'Education', 15000.00); INSERT INTO Programs (id, name, budget) VALUES (2, 'Health', 20000.00); INSERT INTO Programs (id, name, budget) VALUES (3, 'Environment', 10000.00);"}
{"sql_prompt": "What is the minimum donation amount for donors who have donated more than once?", "sql": "SELECT MIN(DonationAmount) FROM Donors WHERE DonationCount > 1;", "sql_context": "CREATE TABLE Donors (DonorID INT, DonorName TEXT, DonationAmount DECIMAL, DonationCount INT); INSERT INTO Donors (DonorID, DonorName, DonationAmount, DonationCount) VALUES (1, 'Michael Brown', 100.00, 2), (2, 'Michelle Brown', 50.00, 1);"}
{"sql_prompt": "How many players are there in each city, and which games are they playing?", "sql": "SELECT Players.City, COUNT(Players.PlayerID) AS Players_in_City, GameDesign.GameName FROM Players INNER JOIN GameSessions ON Players.PlayerID = GameSessions.PlayerID INNER JOIN GameDesign ON GameSessions.GameID = GameDesign.GameID GROUP BY Players.City, GameDesign.GameName;", "sql_context": "CREATE TABLE Players (PlayerID INT, City VARCHAR(50)); INSERT INTO Players (PlayerID, City) VALUES (1, 'Los Angeles'), (2, 'Paris'), (3, 'Tokyo'), (4, 'Sydney'); CREATE TABLE GameSessions (PlayerID INT, GameID INT); INSERT INTO GameSessions (PlayerID, GameID) VALUES (1, 1), (1, 2), (2, 2), (2, 3), (3, 3), (4, 4); CREATE TABLE GameDesign (GameID INT, GameName VARCHAR(50)); INSERT INTO GameDesign (GameID, GameName) VALUES (1, 'Space Explorer'), (2, 'Racing Fever'), (3, 'VR Puzzle'), (4, 'Underwater Adventure');"}
{"sql_prompt": "How many unique countries are represented in the media_content table?", "sql": "SELECT COUNT(DISTINCT country) FROM media_content;", "sql_context": "CREATE TABLE media_content (id INT, title VARCHAR(255), release_year INT, format VARCHAR(255), country VARCHAR(255));"}
{"sql_prompt": "What was the total number of marine species observed in the Indian Ocean in 2019?", "sql": "SELECT SUM(num_species) FROM species WHERE ocean = 'Indian Ocean' AND year = 2019;", "sql_context": "CREATE TABLE species (id INT, ocean VARCHAR(50), year INT, num_species INT); INSERT INTO species (id, ocean, year, num_species) VALUES (1, 'Indian Ocean', 2018, 12345), (2, 'Indian Ocean', 2019, NULL), (3, 'Indian Ocean', 2020, 15678);"}
{"sql_prompt": "Find the smart contract with the highest number of transactions for each decentralized application in descending order.", "sql": "SELECT DAppName, ContractAddress, MAX(Transactions) as MaxTransactions FROM SmartContracts GROUP BY DAppName ORDER BY MaxTransactions DESC;", "sql_context": "CREATE TABLE Transactions (TransactionID int, ContractAddress varchar(50), DAppName varchar(50)); INSERT INTO Transactions (TransactionID, ContractAddress, DAppName) VALUES (1, 'ContractA', 'DApp1'), (2, 'ContractB', 'DApp1'), (3, 'ContractC', 'DApp2'); CREATE TABLE SmartContracts (ContractAddress varchar(50), DAppName varchar(50), Transactions int); INSERT INTO SmartContracts (ContractAddress, DAppName, Transactions) VALUES ( 'ContractA', 'DApp1', 100), ('ContractB', 'DApp1', 200), ('ContractC', 'DApp2', 300);"}
{"sql_prompt": "Delete space debris records in the \"space_debris_mitigation\" table that are not within the latitude range -90 to 90.", "sql": "DELETE FROM space_debris_mitigation WHERE latitude NOT BETWEEN -90 AND 90;", "sql_context": "CREATE TABLE space_debris_mitigation (id INT, debris_name VARCHAR(50), latitude FLOAT, longitude FLOAT); INSERT INTO space_debris_mitigation (id, debris_name, latitude, longitude) VALUES (1, 'Debris1', 50, 20); INSERT INTO space_debris_mitigation (id, debris_name, latitude, longitude) VALUES (2, 'Debris2', -100, 40);"}
{"sql_prompt": "What is the total production quantity of Neodymium in 2018 and 2019?", "sql": "SELECT SUM(quantity) FROM production WHERE element = 'Neodymium' AND year IN (2018, 2019);", "sql_context": "CREATE TABLE production (element VARCHAR(10), year INT, quantity INT); INSERT INTO production VALUES ('Neodymium', 2015, 2200), ('Neodymium', 2016, 2300), ('Neodymium', 2017, 2400), ('Neodymium', 2018, 2500), ('Neodymium', 2019, 2600);"}
{"sql_prompt": "What is the total CO2 emissions of each region?", "sql": "SELECT region, SUM(CO2_emissions) AS total_CO2_emissions FROM emissions_by_region GROUP BY region;", "sql_context": "CREATE TABLE emissions_by_region (id INT, region VARCHAR(50), year INT, CO2_emissions INT); INSERT INTO emissions_by_region (id, region, year, CO2_emissions) VALUES (1, 'West', 2020, 10000), (2, 'East', 2020, 15000), (3, 'West', 2019, 12000);"}
{"sql_prompt": "What is the total number of tourists visiting India from the USA since 2019?", "sql": "SELECT SUM(total_visitors) FROM tourism_flows WHERE source_country = 'India' AND target_country = 'USA' AND year >= 2019;", "sql_context": "CREATE TABLE tourism_flows (source_country VARCHAR(20), target_country VARCHAR(20), year INT, total_visitors INT); INSERT INTO tourism_flows (source_country, target_country, year, total_visitors) VALUES ('India', 'USA', 2019, 25000), ('India', 'USA', 2020, 15000), ('India', 'USA', 2021, 20000);"}
{"sql_prompt": "What is the average media literacy score for users in Europe who watched more than 10 hours of video content in the last month?", "sql": "SELECT AVG(media_literacy_score) FROM user_video_views WHERE country = 'Europe' AND watch_time > 10 AND watch_time <= 10 + 30 AND watch_time >= 10 - 30;", "sql_context": "CREATE TABLE user_video_views (user_id INT, user_name TEXT, country TEXT, watch_time INT, media_literacy_score INT); INSERT INTO user_video_views (user_id, user_name, country, watch_time, media_literacy_score) VALUES (1, 'User 1', 'Germany', 15, 6); INSERT INTO user_video_views (user_id, user_name, country, watch_time, media_literacy_score) VALUES (2, 'User 2', 'France', 8, 7);"}
{"sql_prompt": "What is the average donation amount per volunteer in France?", "sql": "SELECT v.country, AVG(d.donation_amount) as avg_donation_per_volunteer FROM Donations d INNER JOIN Volunteers v ON d.donor_name = v.volunteer_name WHERE v.country = 'France' GROUP BY v.country;", "sql_context": "CREATE TABLE Donations (id INT, donor_name VARCHAR(50), donation_amount DECIMAL(10,2), donation_date DATE, country VARCHAR(50)); CREATE TABLE Volunteers (id INT, volunteer_name VARCHAR(50), country VARCHAR(50)); INSERT INTO Donations (id, donor_name, donation_amount, donation_date, country) VALUES (1, 'John Doe', 50.00, '2021-01-01', 'USA'); INSERT INTO Donations (id, donor_name, donation_amount, donation_date, country) VALUES (2, 'Jane Smith', 100.00, '2021-01-02', 'France'); INSERT INTO Volunteers (id, volunteer_name, country) VALUES (1, 'John Doe', 'USA'); INSERT INTO Volunteers (id, volunteer_name, country) VALUES (2, 'Jane Smith', 'France');"}
{"sql_prompt": "Delete records of community health workers who have not received cultural competency training.", "sql": "DELETE FROM community_health_workers WHERE cultural_competency_training = FALSE;", "sql_context": "CREATE TABLE community_health_workers (id INT, name VARCHAR, age INT, ethnicity VARCHAR, lgbtq_identification BOOLEAN, language VARCHAR, cultural_competency_training BOOLEAN); INSERT INTO community_health_workers (id, name, age, ethnicity, lgbtq_identification, language, cultural_competency_training) VALUES (1, 'Jamie Wong', 35, 'Asian', FALSE, 'English', TRUE), (2, 'Maria Rodriguez', 40, 'Hispanic', FALSE, 'Spanish', FALSE);"}
{"sql_prompt": "Update the salary of an employee in the HR department", "sql": "UPDATE employees SET salary = 70000.00 WHERE name = 'Mike Johnson' AND department = 'HR';", "sql_context": "CREATE SCHEMA hr; CREATE TABLE employees (id INT, name VARCHAR(50), department VARCHAR(50), salary DECIMAL(10,2)); INSERT INTO employees (id, name, department, salary) VALUES (1, 'John Doe', 'IT', 70000.00), (2, 'Jane Smith', 'IT', 75000.00), (3, 'Mike Johnson', 'HR', 60000.00);"}
{"sql_prompt": "What is the percentage of completed community development initiatives in each country?", "sql": "SELECT Country, COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (PARTITION BY NULL) AS Percentage FROM CommunityDevelopment WHERE CompletionStatus = 'Completed' GROUP BY Country;", "sql_context": "CREATE TABLE CommunityDevelopment (ProjectID INT, Country VARCHAR(100), CompletionStatus VARCHAR(20)); INSERT INTO CommunityDevelopment VALUES (1,'Canada','Completed'),(2,'Mexico','In Progress'),(3,'Brazil','Completed'),(4,'Argentina','Completed'),(5,'Colombia','In Progress');"}
{"sql_prompt": "Get the average number of employees for startups that have had an exit", "sql": "SELECT AVG(number_of_employees) FROM company c INNER JOIN exit_strategies es ON c.id = es.company_id WHERE has_exited = true;", "sql_context": "CREATE TABLE company (id INT, name TEXT, number_of_employees INT, has_exited BOOLEAN); CREATE TABLE exit_strategies (id INT, company_id INT, exit_year INT, exit_amount INT);"}
{"sql_prompt": "Insert a new record into the customers table", "sql": "INSERT INTO customers (customer_id, first_name, last_name, email, phone_number, created_at) VALUES (1001, 'Jamal', 'Lewis', 'jamal.lewis@mail.com', '5551234567', '2022-01-01 10:30:00');", "sql_context": "CREATE TABLE customers (customer_id INT, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone_number VARCHAR(15), created_at TIMESTAMP);"}
{"sql_prompt": "How many legal technology patents were granted per month in 2019?", "sql": "SELECT p.year, p.month, COUNT(p.id) AS total_patents FROM patents_monthly p WHERE p.granted = TRUE AND p.year = 2019 GROUP BY p.year, p.month;", "sql_context": "CREATE TABLE patents_monthly (id INT, year INT, month INT, granted BOOLEAN); INSERT INTO patents_monthly (id, year, month, granted) VALUES (1, 2015, 1, TRUE), (2, 2016, 2, TRUE), (3, 2017, 3, FALSE), (4, 2018, 4, TRUE), (5, 2019, 5, FALSE), (6, 2020, 6, TRUE);"}
{"sql_prompt": "Update the salary of all employees in the HR department", "sql": "UPDATE Employees SET Salary = 60000 WHERE Department = 'HR';", "sql_context": "CREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50), Salary DECIMAL(10,2), LeftCompany BOOLEAN);"}
{"sql_prompt": "Update the ethnicity of community health worker with worker_id 1 to Asian American.", "sql": "UPDATE community_health_workers SET ethnicity = 'Asian American' WHERE worker_id = 1;", "sql_context": "CREATE TABLE community_health_workers (worker_id INT, name VARCHAR(50), ethnicity VARCHAR(30)); INSERT INTO community_health_workers (worker_id, name, ethnicity) VALUES (1, 'Hoa Nguyen', 'Asian American'), (2, 'Juan Hernandez', 'Hispanic'), (3, 'Mark Johnson', 'Non-Hispanic');"}
{"sql_prompt": "List the top 3 students with the highest grades in 'Math'", "sql": "SELECT students.name, courses.name, students.grade FROM students JOIN courses ON students.grade = courses.grade WHERE courses.name = 'Math' ORDER BY students.grade DESC LIMIT 3;", "sql_context": "CREATE TABLE students (id INT, name VARCHAR(20), grade INT); INSERT INTO students (id, name, grade) VALUES (1, 'John', 95); INSERT INTO students (id, name, grade) VALUES (2, 'Jane', 85); INSERT INTO students (id, name, grade) VALUES (3, 'Bob', 90); INSERT INTO students (id, name, grade) VALUES (4, 'Alice', 80); INSERT INTO students (id, name, grade) VALUES (5, 'Brian', 98); CREATE TABLE courses (id INT, name VARCHAR(20), grade INT); INSERT INTO courses (id, name, grade) VALUES (1, 'Math', 0); INSERT INTO courses (id, name, grade) VALUES (2, 'English', 0);"}
{"sql_prompt": "How many artworks were created by each artist in the 'Renaissance' period?", "sql": "SELECT artists.name, COUNT(artworks.id) FROM artists INNER JOIN artworks ON artists.id = artworks.artist_id INNER JOIN artwork_periods ON artworks.id = artwork_periods.artwork_id INNER JOIN periods ON artwork_periods.period_id = periods.id WHERE periods.name = 'Renaissance' GROUP BY artists.name;", "sql_context": "CREATE TABLE artists (id INT, name TEXT); INSERT INTO artists (id, name) VALUES (1, 'Leonardo da Vinci'), (2, 'Michelangelo'), (3, 'Raphael'); CREATE TABLE artworks (id INT, artist_id INT, title TEXT, creation_date DATE); INSERT INTO artworks (id, artist_id, title, creation_date) VALUES (1, 1, 'Mona Lisa', '1503-08-15'), (2, 1, 'The Last Supper', '1495-08-15'), (3, 2, 'David', '1501-09-13'), (4, 2, 'Sistine Chapel Ceiling', '1508-05-15'), (5, 3, 'School of Athens', '1509-04-01'), (6, 3, 'The Galatea', '1512-01-01'); CREATE TABLE periods (id INT, name TEXT); INSERT INTO periods (id, name) VALUES (1, 'Renaissance'); CREATE TABLE artwork_periods (id INT, artwork_id INT, period_id INT); INSERT INTO artwork_periods (id, artwork_id, period_id) VALUES (1, 1, 1), (2, 2, 1), (3, 3, 1), (4, 4, 1), (5, 5, 1), (6, 6, 1);"}
{"sql_prompt": "How many concerts did The Rolling Stones perform in Texas?", "sql": "SELECT COUNT(*) FROM concerts WHERE artist = 'The Rolling Stones' AND city = 'Texas';", "sql_context": "CREATE TABLE concerts (id INT, artist VARCHAR(50), city VARCHAR(50), revenue FLOAT); INSERT INTO concerts (id, artist, city, revenue) VALUES (1, 'The Rolling Stones', 'Dallas', 50000.0), (2, 'The Rolling Stones', 'Houston', 45000.0);"}
{"sql_prompt": "What is the average carbon price per metric ton in the EU in 2021?", "sql": "SELECT AVG(Price) AS AveragePrice FROM CarbonPrices WHERE Country = 'EU' AND Year = 2021;", "sql_context": "CREATE TABLE CarbonPrices (Country VARCHAR(255), Year INT, Price FLOAT); INSERT INTO CarbonPrices (Country, Year, Price) VALUES ('EU', 2021, 25), ('EU', 2021, 26), ('EU', 2021, 24), ('EU', 2021, 27), ('EU', 2021, 28), ('EU', 2021, 23);"}
{"sql_prompt": "What is the average CO2 emissions for each marine conservation project type?", "sql": "SELECT type, AVG(co2_emissions) FROM project_types GROUP BY type;", "sql_context": "CREATE TABLE project_types (id INT, name VARCHAR(20), type VARCHAR(20), co2_emissions INT); INSERT INTO project_types (id, name, type, co2_emissions) VALUES (1, 'Coral Reef Restoration', 'Coral Restoration', 250), (2, 'Mangrove Forest Protection', 'Mangrove Protection', 180), (3, 'Seagrass Meadows Conservation', 'Seagrass Conservation', 120);"}
{"sql_prompt": "What is the total revenue for DrugP in 2020?", "sql": "SELECT drug_name, SUM(revenue) FROM sales WHERE drug_name = 'DrugP' AND year = 2020 GROUP BY drug_name;", "sql_context": "CREATE TABLE sales (drug_name TEXT, year INTEGER, revenue INTEGER); INSERT INTO sales (drug_name, year, revenue) VALUES ('DrugP', 2020, 5000000);"}
{"sql_prompt": "Which genetic research projects have sequences longer than 5M and their corresponding species?", "sql": "SELECT l.sequence_id, l.species, l.length FROM long_sequences l;", "sql_context": "CREATE TABLE genome_sequences (sequence_id INT PRIMARY KEY, sequence TEXT, species TEXT, length INT); INSERT INTO genome_sequences (sequence_id, sequence, species, length) VALUES (1, 'ATGC...', 'Arabidopsis thaliana', 4000000); INSERT INTO genome_sequences (sequence_id, sequence, species, length) VALUES (2, 'TGCA...', 'Escherichia coli', 5500000); CREATE VIEW long_sequences AS SELECT sequence_id, sequence, species, length FROM genome_sequences WHERE length > 5000000;"}
{"sql_prompt": "What is the average response time for emergency services in each city?", "sql": "SELECT C.name, AVG(ES.response_time) as Avg_Response_Time  FROM Emergency_Services ES JOIN Cities C ON ES.city_id = C.id GROUP BY C.name;", "sql_context": "CREATE TABLE Emergency_Services (city_id INT, response_time INT); INSERT INTO Emergency_Services (city_id, response_time) VALUES (1, 8), (1, 9), (2, 7), (2, 6), (3, 9), (3, 8), (4, 6), (4, 5); CREATE TABLE Cities (id INT, name VARCHAR(50)); INSERT INTO Cities (id, name) VALUES (1, 'New York'), (2, 'Los Angeles'), (3, 'Chicago'), (4, 'Houston');"}
{"sql_prompt": "List all climate finance recipients in 2020 that received funding from both public and private sectors, and show the total funding for each recipient.", "sql": "SELECT recipient, SUM(amount) AS total_funding FROM climate_finance_recipients_2020 WHERE year = 2020 AND sector IN ('Public', 'Private') GROUP BY recipient HAVING COUNT(DISTINCT sector) = 2;", "sql_context": "CREATE TABLE climate_finance_recipients_2020 (year INT, recipient VARCHAR(20), sector VARCHAR(10), amount FLOAT); INSERT INTO climate_finance_recipients_2020 (year, recipient, sector, amount) VALUES (2020, 'CountryA', 'Public', 5000000), (2020, 'CountryA', 'Private', 3000000), (2020, 'CountryB', 'Public', 4000000), (2020, 'CountryB', 'Private', 1000000), (2020, 'CountryC', 'Public', 4500000), (2020, 'CountryC', 'Private', 5500000);"}
{"sql_prompt": "Identify the indigenous communities in the Arctic region that are most affected by coastal erosion and their corresponding coastal erosion rates.", "sql": "SELECT c.community_name, AVG(ed.erosion_rate) AS avg_erosion_rate FROM communities c JOIN erosion_data ed ON c.community_id = ed.community_id WHERE c.region LIKE '%Arctic%' GROUP BY c.community_name ORDER BY avg_erosion_rate DESC;", "sql_context": "CREATE TABLE communities (community_id INT, community_name VARCHAR(50), region VARCHAR(50));CREATE TABLE erosion_data (measurement_id INT, measurement_date DATE, erosion_rate FLOAT, community_id INT);"}
{"sql_prompt": "What are the historical contexts associated with the discovered artifacts from the 'Asian' region?", "sql": "SELECT Artifacts.name, HistoricalContexts.name AS context_name FROM Artifacts INNER JOIN HistoricalContexts ON Artifacts.historical_context_id = HistoricalContexts.id WHERE HistoricalContexts.region = 'Asia';", "sql_context": "CREATE TABLE HistoricalContexts(id INT, name TEXT, region TEXT); INSERT INTO HistoricalContexts (id, name, region) VALUES (1, 'Context 1', 'Asia'); INSERT INTO HistoricalContexts (id, name, region) VALUES (2, 'Context 2', 'Europe'); CREATE TABLE Artifacts(id INT, historical_context_id INT, name TEXT, type TEXT); INSERT INTO Artifacts (id, historical_context_id, name, type) VALUES (1, 1, 'Artifact 1', 'Bronze'); INSERT INTO Artifacts (id, historical_context_id, name, type) VALUES (2, 1, 'Artifact 2', 'Pottery');"}
{"sql_prompt": "Determine the percentage of beauty products with gluten-free claims, in the Australian market, that have natural ingredients.", "sql": "SELECT ROUND(COUNT(CASE WHEN products.is_gluten_free = TRUE AND products.is_natural = TRUE THEN 1 END)/COUNT(CASE WHEN products.is_gluten_free = TRUE THEN 1 END) * 100, 2) as percentage FROM products JOIN sales ON products.product_id = sales.product_id WHERE sales.country = 'AU';", "sql_context": "CREATE TABLE products(product_id INT, product_name VARCHAR(50), is_gluten_free BOOLEAN, is_natural BOOLEAN); INSERT INTO products VALUES (15, 'Coconut Oil', TRUE, TRUE); INSERT INTO products VALUES (16, 'Shea Butter', FALSE, TRUE); CREATE TABLE sales(product_id INT, sale_date DATE, country VARCHAR(50)); INSERT INTO sales VALUES (15, '2021-08-01', 'AU'); INSERT INTO sales VALUES (16, '2021-09-01', 'AU');"}
{"sql_prompt": "Delete exhibitions of artist 'Yayoi Kusama' from the 'Exhibitions' table.", "sql": "DELETE FROM Exhibitions WHERE artist_id = 8;", "sql_context": "CREATE TABLE Exhibitions (exhibition_id INT, exhibition_name VARCHAR(255), artist_id INT); INSERT INTO Exhibitions (exhibition_id, exhibition_name, artist_id) VALUES (1, 'Infinity Nets', 8), (2, 'My Eternal Soul', 8);"}
{"sql_prompt": "What is the number of hospital beds per state, divided by population size?", "sql": "SELECT state, num_beds/population FROM beds_population;", "sql_context": "CREATE TABLE beds_population (state VARCHAR(2), num_beds INT, population INT);"}
{"sql_prompt": "What is the total number of claims for each policy type?", "sql": "SELECT PolicyType, COUNT(*) as TotalClaims FROM Policy p INNER JOIN Claims c ON p.PolicyID = c.PolicyID GROUP BY PolicyType;", "sql_context": "CREATE TABLE Policy (PolicyID INT, PolicyType VARCHAR(50)); INSERT INTO Policy VALUES (1, 'Auto'), (2, 'Home'), (3, 'Life'); CREATE TABLE Claims (ClaimID INT, PolicyID INT, ClaimAmount DECIMAL(10,2)); INSERT INTO Claims VALUES (1, 1, 500.00), (2, 1, 200.00), (3, 2, 750.00), (4, 3, 15000.00), (5, 1, 300.00)"}
{"sql_prompt": "What is the distribution of client demographics by attorney?", "sql": "SELECT AttorneyID, COUNT(*) AS Total_Clients, AVG(Age) AS Avg_Age, COUNT(DISTINCT Gender) AS Distinct_Genders, COUNT(DISTINCT Race) AS Distinct_Races FROM Clients GROUP BY AttorneyID;", "sql_context": "CREATE TABLE Clients ( ClientID INT, AttorneyID INT, Age INT, Gender VARCHAR(10), Race VARCHAR(50) ); INSERT INTO Clients (ClientID, AttorneyID, Age, Gender, Race) VALUES (1, 1, 34, 'Male', 'Caucasian'), (2, 1, 45, 'Female', 'African American'), (3, 2, 52, 'Male', 'Hispanic'), (4, 2, 60, 'Female', 'Asian'), (5, 3, 42, 'Male', 'Caucasian'), (6, 3, 30, 'Female', 'African American'), (7, 4, 50, 'Male', 'Hispanic'), (8, 4, 35, 'Female', 'Asian');"}
{"sql_prompt": "Identify the number of mines in Canada that mined gold in 2020", "sql": "SELECT COUNT(DISTINCT mine_name) FROM mining_operations WHERE material = 'gold' AND location = 'Canada' AND date = '2020-01-01';", "sql_context": "CREATE TABLE mining_operations (id INT, mine_name TEXT, location TEXT, material TEXT, quantity INT, date DATE); INSERT INTO mining_operations (id, mine_name, location, material, quantity, date) VALUES (10, 'Golden Grove', 'Canada', 'gold', 2500, '2020-01-01');"}
{"sql_prompt": "What is the minimum mental health score of students in 'Spring 2023' by gender?", "sql": "SELECT MIN(mental_health_score) as min_mental_health, gender FROM spring_2023_smh GROUP BY gender;", "sql_context": "CREATE TABLE student_mental_health (student_id INT, mental_health_score INT, gender VARCHAR(255), date DATE); INSERT INTO student_mental_health (student_id, mental_health_score, gender, date) VALUES (1, 75, 'Male', '2023-03-01'), (2, 85, 'Female', '2023-03-01'); CREATE VIEW spring_2023_smh AS SELECT * FROM student_mental_health WHERE date BETWEEN '2023-01-01' AND '2023-06-30';"}
{"sql_prompt": "Show the total amount of funding for programs in 'Theater' and 'Music' categories, excluding programs with a budget over $75,000.", "sql": "SELECT SUM(budget) FROM Programs WHERE category IN ('Theater', 'Music') AND budget <= 75000;", "sql_context": "CREATE TABLE Programs (id INT, name TEXT, category TEXT, budget INT); INSERT INTO Programs (id, name, category, budget) VALUES (1, 'Dance Performance', 'Theater', 50000), (2, 'Film Festival', 'Music', 75000), (3, 'Photography Exhibition', 'Visual Arts', 100000);"}
{"sql_prompt": "For each 'service_type' in the 'services' table, return the number of rows in the 'subscribers' table with the corresponding 'service_type'.", "sql": "SELECT s.service_type, COUNT(*) OVER (PARTITION BY s.service_type) AS count_of_subscribers_with_service_type FROM services s JOIN subscribers sub ON s.service_type = sub.service_type;", "sql_context": "CREATE TABLE subscribers (subscriber_id INT, service_type VARCHAR(50), data_usage FLOAT);  CREATE TABLE services (service_type VARCHAR(50), description VARCHAR(50));"}
{"sql_prompt": "What is the maximum water usage in a month in the residential sector in Australia?", "sql": "SELECT MAX(usage) FROM water_usage WHERE sector = 'Residential';", "sql_context": "CREATE TABLE water_usage (id INT, sector VARCHAR(20), usage FLOAT, month VARCHAR(10)); INSERT INTO water_usage (id, sector, usage, month) VALUES (1, 'Residential', 150.0, 'January'), (2, 'Residential', 160.0, 'February'), (3, 'Residential', 140.0, 'March');"}
{"sql_prompt": "What is the maximum altitude reached by SpaceX's Falcon Heavy?", "sql": "SELECT MAX(max_altitude) FROM RocketAltitudes WHERE rocket_name = 'Falcon Heavy';", "sql_context": "CREATE TABLE RocketAltitudes (id INT, rocket_name VARCHAR(100), company VARCHAR(100), max_altitude FLOAT); INSERT INTO RocketAltitudes (id, rocket_name, company, max_altitude) VALUES (1, 'Falcon Heavy', 'SpaceX', 12300000); INSERT INTO RocketAltitudes (id, rocket_name, company, max_altitude) VALUES (2, 'Falcon 9', 'SpaceX', 8000000);"}
{"sql_prompt": "What is the total number of heritage sites in Oceania that are currently open to the public?", "sql": "SELECT location, COUNT(*) as total_sites FROM HeritageSites WHERE status = 'Open' GROUP BY location;", "sql_context": "CREATE TABLE HeritageSites (id INT, name VARCHAR(50), location VARCHAR(50), status VARCHAR(50)); INSERT INTO HeritageSites (id, name, location, status) VALUES (1, 'Great Barrier Reef', 'Australia', 'Open'), (2, 'Sydney Opera House', 'Australia', 'Open'), (3, 'Kakadu National Park', 'Australia', 'Open'), (4, 'Tongariro National Park', 'New Zealand', 'Open'), (5, 'Te Wahipounamu', 'New Zealand', 'Open');"}
{"sql_prompt": "What is the total number of astronauts from each continent?", "sql": "SELECT continent, COUNT(*) as total_astronauts FROM Astronauts GROUP BY continent;", "sql_context": "CREATE TABLE Astronauts (astronaut_name TEXT, continent TEXT); INSERT INTO Astronauts (astronaut_name, continent) VALUES ('Serena Au\u00f1\u00f3n-Chancellor', 'North America'), ('Alexander Gerst', 'Europe'), ('Reid Wiseman', 'North America'), ('Max Surayev', 'Europe'), ('Jeff Williams', 'North America');"}
{"sql_prompt": "Add new games to the games table with the given game names", "sql": "INSERT INTO games SELECT new_games.id, NULL AS player_id, new_games.game_name, NULL AS last_played FROM new_games WHERE NOT EXISTS (SELECT 1 FROM games WHERE games.game_name = new_games.game_name);", "sql_context": "CREATE TABLE games (id INT PRIMARY KEY, player_id INT, game_name VARCHAR(100), last_played TIMESTAMP); INSERT INTO games VALUES (1, 1001, 'GameA', '2021-01-01 12:00:00'), (2, 1002, 'GameB', '2021-02-15 14:30:00'), (3, 1003, 'GameA', '2021-06-20 09:15:00'); CREATE TABLE new_games (id INT PRIMARY KEY, game_name VARCHAR(100));"}
{"sql_prompt": "What is the total number of students and teachers in the 'Education' database?", "sql": "SELECT COUNT(*) FROM student; SELECT COUNT(*) FROM teacher;", "sql_context": "CREATE TABLE student (student_id INT); INSERT INTO student (student_id) VALUES (1), (2), (3); CREATE TABLE teacher (teacher_id INT); INSERT INTO teacher (teacher_id) VALUES (101), (102), (103);"}
{"sql_prompt": "list all unique news topics", "sql": "SELECT DISTINCT topic FROM News;", "sql_context": "CREATE TABLE News (id INT, topic VARCHAR(50)); INSERT INTO News (id, topic) VALUES (1, 'Politics'); INSERT INTO News (id, topic) VALUES (2, 'Sports'); INSERT INTO News (id, topic) VALUES (3, 'Entertainment');"}
{"sql_prompt": "Identify the top 2 most popular sustainable tour destinations in the Americas.", "sql": "SELECT location, SUM(num_tourists) AS total_tourists FROM americas_sustainable_tours GROUP BY location ORDER BY total_tourists DESC LIMIT 2;", "sql_context": "CREATE TABLE sustainable_tours (tour_id INT, operator_id INT, location VARCHAR, num_tourists INT); CREATE VIEW americas_sustainable_tours AS SELECT * FROM sustainable_tours WHERE location LIKE '%%America%%';"}
{"sql_prompt": "How many donors have donated to arts and culture causes in Egypt?", "sql": "SELECT COUNT(DISTINCT donor_id) FROM Donations JOIN Donors ON Donations.donor_id = Donors.donor_id WHERE cause = 'arts and culture' AND country = 'Egypt';", "sql_context": "CREATE TABLE Donations (donation_id INT, donor_id INT, cause TEXT); CREATE TABLE Donors (donor_id INT, donor_name TEXT, country TEXT);"}
{"sql_prompt": "Delete all records in the sustainable_fabrics table that were sourced from country X.", "sql": "DELETE FROM sustainable_fabrics WHERE country_of_origin = 'country X';", "sql_context": "CREATE TABLE sustainable_fabrics (id INT PRIMARY KEY, fabric_name TEXT, country_of_origin TEXT); INSERT INTO sustainable_fabrics (id, fabric_name, country_of_origin) VALUES (1, 'organic cotton', 'Brazil'), (2, 'hemp', 'China'), (3, 'recycled polyester', 'USA');"}
{"sql_prompt": "What is the total number of unique volunteers who have contributed more than '50' hours to each organization?", "sql": "SELECT O.org_name, COUNT(DISTINCT V.vol_id) as total_volunteers FROM Organizations O INNER JOIN Volunteers V ON O.org_id = V.org_id WHERE V.hours_contributed > 50 GROUP BY O.org_name;", "sql_context": "CREATE TABLE Organizations (org_id INT, org_name TEXT); CREATE TABLE Volunteers (vol_id INT, volunteer_name TEXT, hours_contributed INT, org_id INT);"}
{"sql_prompt": "List all defense diplomacy events with the United States and at least one other country in 2019", "sql": "SELECT * FROM event WHERE (country_code_1 = 'USA' AND country_code_2 IS NOT NULL) OR (country_code_2 = 'USA' AND country_code_1 IS NOT NULL) AND event_year = 2019 AND event_type = 'defense_diplomacy';", "sql_context": "CREATE TABLE event (event_id INT, country_code_1 VARCHAR(3), country_code_2 VARCHAR(3), event_type VARCHAR(50), event_year INT); INSERT INTO event (event_id, country_code_1, country_code_2, event_type, event_year) VALUES (1, 'USA', 'DEU', 'defense_diplomacy', 2019), (2, 'USA', 'FRA', 'peacekeeping', 2018), (3, 'CAN', 'GBR', 'defense_diplomacy', 2019), (4, 'AUS', 'NZL', 'military_exercise', 2018);"}
{"sql_prompt": "What is the total number of employees by department?", "sql": "SELECT SUM(id) FROM departments;", "sql_context": "CREATE TABLE departments (id INT, name VARCHAR(255)); INSERT INTO departments (id, name) VALUES (1, 'HR'), (2, 'IT'), (3, 'Marketing');"}
{"sql_prompt": "Insert a new record for an exhibition 'Indigenous Art' starting from 2025-01-01 until 2025-12-31.", "sql": "INSERT INTO Exhibitions (exhibition_id, exhibition_name, start_date, end_date) VALUES (5, 'Indigenous Art', '2025-01-01', '2025-12-31');", "sql_context": "CREATE TABLE Exhibitions (exhibition_id INT, exhibition_name VARCHAR(50), start_date DATE, end_date DATE);"}
{"sql_prompt": "What is the minimum population size of all marine species in the Indian Ocean, grouped by conservation status?\"", "sql": "SELECT conservation_status, MIN(min_population_size) as min_population_size FROM marine_species_population WHERE region = 'Indian Ocean' GROUP BY conservation_status;", "sql_context": "CREATE TABLE marine_species_population (species_name VARCHAR(255), region VARCHAR(255), min_population_size FLOAT, conservation_status VARCHAR(255)); INSERT INTO marine_species_population (species_name, region, min_population_size, conservation_status) VALUES ('Whale Shark', 'Indian Ocean', 1500, 'Fully Protected'), ('Dolphin', 'Indian Ocean', 200, 'Partially Protected'), ('Manta Ray', 'Indian Ocean', 500, 'Fully Protected');"}
{"sql_prompt": "What is the average number of hours volunteered by all volunteers?", "sql": "SELECT AVG(hours) FROM volunteers;", "sql_context": "CREATE TABLE volunteers (id INT, name TEXT, program TEXT, hours INT); INSERT INTO volunteers (id, name, program, hours) VALUES (1, 'John Doe', 'Food Distribution', 10), (2, 'Jane Smith', 'Education Support', 20);"}
{"sql_prompt": "What was the average citizen feedback score for healthcare services in the South region in 2021?", "sql": "SELECT AVG(Score) FROM Feedback WHERE Year = 2021 AND Service = 'Healthcare' AND Region = 'South';", "sql_context": "CREATE TABLE Feedback (Year INT, Service VARCHAR(255), Region VARCHAR(255), Score DECIMAL(3,2)); INSERT INTO Feedback (Year, Service, Region, Score) VALUES (2021, 'Healthcare', 'North', 8.50), (2021, 'Healthcare', 'South', 8.25), (2021, 'Healthcare', 'East', 8.75), (2021, 'Healthcare', 'West', 9.00);"}
{"sql_prompt": "List all companies in the 'social_impact' sector.", "sql": "SELECT * FROM companies WHERE sector = 'social_impact';", "sql_context": "CREATE TABLE companies (id INT, name TEXT, sector TEXT); INSERT INTO companies (id, name, sector) VALUES (1, 'SocialCo', 'social_impact'), (2, 'ImpactInc', 'social_impact'), (3, 'ChangeOrg', 'non-profit'), (4, 'GreenCorp', 'renewable_energy');"}
{"sql_prompt": "What is the total CO2 emissions for each transportation method, by year?", "sql": "SELECT transportation_method, year, SUM(CO2_emissions) FROM transportation GROUP BY transportation_method, year;", "sql_context": "CREATE TABLE transportation (id INT, year INT, transportation_method VARCHAR(255), CO2_emissions INT); INSERT INTO transportation (id, year, transportation_method, CO2_emissions) VALUES (1, 2020, 'Sea', 200), (2, 2021, 'Sea', 220), (3, 2020, 'Air', 300), (4, 2021, 'Air', 320), (5, 2020, 'Road', 100), (6, 2021, 'Road', 110);"}
{"sql_prompt": "What is the total mass of space debris objects in low Earth orbits?", "sql": "SELECT SUM(mass) FROM debris_mass WHERE orbit_type = 'low Earth';", "sql_context": "CREATE TABLE debris_mass (id INT, object_name VARCHAR(255), orbit_type VARCHAR(255), mass FLOAT);"}
{"sql_prompt": "Which rural health clinics were established after 2010, and what are their names?", "sql": "SELECT name FROM clinics WHERE establishment_date > '2010-12-31';", "sql_context": "CREATE TABLE clinics (name VARCHAR(255), establishment_date DATE); INSERT INTO clinics (name, establishment_date) VALUES ('Clinic C', '2011-01-01'), ('Clinic D', '2015-05-15');"}
{"sql_prompt": "List members who attended more workout sessions than the average number of sessions for all members.", "sql": "SELECT m.MemberID, m.FirstName, m.LastName FROM Members m INNER JOIN Workouts w ON m.MemberID = w.MemberID WHERE w.MemberID IN (SELECT MemberID FROM Workouts GROUP BY MemberID HAVING COUNT(*) > (SELECT AVG(CountPerMember) FROM (SELECT MemberID, COUNT(*) AS CountPerMember FROM Workouts GROUP BY MemberID) AS subquery));", "sql_context": "CREATE TABLE Members (MemberID INT, FirstName VARCHAR(50), LastName VARCHAR(50)); INSERT INTO Members (MemberID, FirstName, LastName) VALUES (1, 'John', 'Doe'); INSERT INTO Members (MemberID, FirstName, LastName) VALUES (2, 'Jane', 'Doe'); CREATE TABLE Workouts (WorkoutID INT, MemberID INT, WorkoutDate DATE); INSERT INTO Workouts (WorkoutID, MemberID, WorkoutDate) VALUES (1, 1, '2022-01-12'); INSERT INTO Workouts (WorkoutID, MemberID, WorkoutDate) VALUES (2, 1, '2022-01-14'); INSERT INTO Workouts (WorkoutID, MemberID, WorkoutDate) VALUES (3, 2, '2022-01-15');"}
{"sql_prompt": "What community engagement programs exist in the Americas and their types?", "sql": "SELECT name, type FROM COMMUNITY_ENGAGEMENT WHERE region = 'Americas';", "sql_context": "CREATE TABLE COMMUNITY_ENGAGEMENT (id INT PRIMARY KEY, name VARCHAR(255), region VARCHAR(255), type VARCHAR(255)); INSERT INTO COMMUNITY_ENGAGEMENT (id, name, region, type) VALUES (1, 'Mayan Cultural Festival', 'Americas', 'Cultural');"}
{"sql_prompt": "Update the safety rating of 'Toyota Camry' to 4 in the 'vehicle_safety_test_results' table", "sql": "UPDATE vehicle_safety_test_results SET safety_rating = 4 WHERE vehicle_name = 'Toyota Camry';", "sql_context": "CREATE TABLE vehicle_safety_test_results (id INT, vehicle_name VARCHAR(50), safety_rating INT);"}
{"sql_prompt": "What is the total number of marine species located in the Atlantic and Pacific Oceans?", "sql": "SELECT COUNT(*) FROM marine_species WHERE marine_species.location IN ('Atlantic', 'Pacific');", "sql_context": "CREATE TABLE marine_species (id INT, species_name VARCHAR(255), location VARCHAR(255)); INSERT INTO marine_species (id, species_name, location) VALUES (1, 'Narwhal', 'Arctic'), (2, 'Beluga', 'Arctic'), (3, 'Blue Whale', 'Atlantic'), (4, 'Giant Pacific Octopus', 'Pacific');"}
{"sql_prompt": "Which countries have reported the most plastic debris in their waters?", "sql": "SELECT country, SUM(amount) FROM plastic_debris GROUP BY country ORDER BY SUM(amount) DESC;", "sql_context": "CREATE TABLE plastic_debris (debris_id INT, country TEXT, amount INT, year INT);"}
{"sql_prompt": "What is the total number of artworks in each category?", "sql": "SELECT category, COUNT(*) FROM artworks GROUP BY category;", "sql_context": "CREATE TABLE artworks (id INT, museum TEXT, category TEXT); INSERT INTO artworks (id, museum, category) VALUES (1, 'New York', 'Painting'), (2, 'New York', 'Sculpture'), (3, 'Chicago', 'Painting'), (4, 'Chicago', 'Drawing'), (5, 'Los Angeles', 'Sculpture');"}
{"sql_prompt": "Which countries have the most pollution incidents in the ocean?", "sql": "SELECT country, SUM(incidents) as total_incidents FROM pollution_incidents GROUP BY country ORDER BY total_incidents DESC;", "sql_context": "CREATE TABLE pollution_incidents (id INT, country VARCHAR(255), incidents INT); INSERT INTO pollution_incidents (id, country, incidents) VALUES (1, 'USA', 50), (2, 'China', 80), (3, 'Japan', 30), (4, 'India', 60), (5, 'Indonesia', 70);"}
{"sql_prompt": "What is the total number of hotels that have adopted AI solutions in LATAM?", "sql": "SELECT COUNT(*) FROM hotel_ai_2 WHERE region = 'LATAM' AND ai_chatbot = true AND ai_concierge = true;", "sql_context": "CREATE TABLE hotel_ai_2 (hotel_id INT, hotel_name TEXT, region TEXT, ai_chatbot BOOLEAN, ai_concierge BOOLEAN); INSERT INTO hotel_ai_2 (hotel_id, hotel_name, region, ai_chatbot, ai_concierge) VALUES (1, 'Hotel E', 'LATAM', true, true), (2, 'Hotel F', 'NA', false, true), (3, 'Hotel G', 'LATAM', false, false), (4, 'Hotel H', 'LATAM', true, false);"}
{"sql_prompt": "What is the total number of deep-sea exploration projects in the Atlantic and Indian Oceans?", "sql": "SELECT region, COUNT(*) FROM exploration_projects GROUP BY region HAVING region IN ('Atlantic', 'Indian');", "sql_context": "CREATE TABLE exploration_projects (id INT, name TEXT, location TEXT, region TEXT); INSERT INTO exploration_projects (id, name, location, region) VALUES (1, 'Project A', 'Atlantic', 'Atlantic'); INSERT INTO exploration_projects (id, name, location, region) VALUES (2, 'Project B', 'Indian', 'Indian'); INSERT INTO exploration_projects (id, name, location, region) VALUES (3, 'Project C', 'Pacific', 'Pacific');"}
{"sql_prompt": "How many artworks were created by female artists in the 19th century?", "sql": "SELECT COUNT(*) FROM artworks WHERE artist_gender = 'female' AND year BETWEEN 1800 AND 1899;", "sql_context": "CREATE TABLE artworks (id INT, name VARCHAR(255), year INT, artist_name VARCHAR(255), artist_gender VARCHAR(10)); INSERT INTO artworks (id, name, year, artist_name, artist_gender) VALUES (1, 'Painting1', 1850, 'Anna', 'female'), (2, 'Sculpture1', 1880, 'Bella', 'female'), (3, 'Painting2', 1820, 'Clara', 'female');"}
{"sql_prompt": "Find the top 3 players with the highest number of wins in the 'multiplayer_games' table.", "sql": "SELECT player_name, SUM(wins) as total_wins FROM multiplayer_games GROUP BY player_id ORDER BY total_wins DESC LIMIT 3;", "sql_context": "CREATE TABLE multiplayer_games (player_id INT, player_name TEXT, wins INT);"}
{"sql_prompt": "Find the top 2 countries with the least number of disaster response teams in 'disaster_response' table?", "sql": "SELECT country, MIN(team_size) as min_team_size FROM disaster_response GROUP BY country ORDER BY min_team_size LIMIT 2;", "sql_context": "CREATE TABLE disaster_response (id INT, team_name VARCHAR(255), team_size INT, country VARCHAR(255)); INSERT INTO disaster_response (id, team_name, team_size, country) VALUES (1, 'Team A', 5, 'Country1'), (2, 'Team B', 10, 'Country2'), (3, 'Team C', 15, 'Country3'), (4, 'Team D', 20, 'Country4'), (5, 'Team E', 25, 'Country4');"}
{"sql_prompt": "How many employees work for each mining company in each state?", "sql": "SELECT company, state, SUM(num_employees) as total_employees FROM company_employees GROUP BY company, state;", "sql_context": "CREATE TABLE company_employees (company VARCHAR(255), state VARCHAR(255), year INT, num_employees INT); INSERT INTO company_employees (company, state, year, num_employees) VALUES ('MNO Mining', 'Arizona', 2017, 400), ('MNO Mining', 'Arizona', 2018, 425), ('PQR Mining', 'Utah', 2017, 450), ('PQR Mining', 'Utah', 2018, 475);"}
{"sql_prompt": "How many construction workers were employed in New York in 2020?", "sql": "SELECT SUM(employed) FROM employment WHERE industry = 'Construction' AND state = 'NY' AND year = 2020;", "sql_context": "CREATE TABLE employment (employee_id INT, industry VARCHAR(20), state VARCHAR(2), year INT, employed INT); INSERT INTO employment (employee_id, industry, state, year, employed) VALUES (1, 'Construction', 'NY', 2020, 50000);"}
{"sql_prompt": "What is the total number of hotels in the database?", "sql": "SELECT COUNT(*) FROM hotels;", "sql_context": "CREATE TABLE hotels (hotel_id INT, name VARCHAR(50), location VARCHAR(50), stars INT, sustainability_rating INT);"}
{"sql_prompt": "Calculate the average number of employees for companies founded by non-binary individuals in the renewable energy sector with at least one funding round.", "sql": "SELECT AVG(num_employees) FROM company WHERE industry = 'Renewable Energy' AND founder_gender = 'Non-binary' AND num_funding_rounds >= 1", "sql_context": "CREATE TABLE company (id INT, name TEXT, industry TEXT, founding_year INT, founder_gender TEXT, num_employees INT, num_funding_rounds INT);"}
{"sql_prompt": "Delete all records related to 'Product D' in the chemical_products and safety_protocols tables.", "sql": "DELETE FROM safety_protocols WHERE product_id IN (SELECT id FROM chemical_products WHERE name = 'Product D'); DELETE FROM chemical_products WHERE name = 'Product D';", "sql_context": "CREATE TABLE chemical_products (id INT, name TEXT, category TEXT); INSERT INTO chemical_products (id, name, category) VALUES (1, 'Product A', 'Category X'), (2, 'Product B', 'Category Y'), (3, 'Product C', 'Category Z'), (4, 'Product D', 'Category W'); CREATE TABLE safety_protocols (id INT, product_id INT, plant_id INT, protocol TEXT); INSERT INTO safety_protocols (id, product_id, plant_id, protocol) VALUES (1, 1, 1, 'Protocol 1'), (2, 2, 2, 'Protocol 2'), (3, 3, 3, 'Protocol 3'), (4, 4, 4, 'Protocol 4');"}
{"sql_prompt": "What is the total number of police officers in each division, including reserve officers?", "sql": "SELECT d.division_name, COUNT(o.oid) FROM divisions d LEFT JOIN officers o ON d.did = o.did AND o.is_active = TRUE AND o.officer_type IN ('active', 'reserve') GROUP BY d.division_name;", "sql_context": "CREATE TABLE divisions (did INT, division_name VARCHAR(255)); CREATE TABLE officers (oid INT, did INT, officer_type VARCHAR(255), is_active BOOLEAN);"}
{"sql_prompt": "What is the employment rate for veterans in the defense industry in New York in Q2 2021?", "sql": "SELECT employment_rate FROM Veteran_Employment WHERE industry = 'Defense' AND state = 'New York' AND quarter = 2 AND year = 2021;", "sql_context": "CREATE TABLE Veteran_Employment (employment_id INT, industry TEXT, state TEXT, employment_rate FLOAT, quarter INT, year INT); INSERT INTO Veteran_Employment (employment_id, industry, state, employment_rate, quarter, year) VALUES (1, 'Defense', 'New York', 0.12, 2, 2021);"}
{"sql_prompt": "What are the top 5 countries with the most sustainable tourism certifications?", "sql": "SELECT name FROM top_countries WHERE rank <= 5;", "sql_context": "CREATE TABLE countries (id INT PRIMARY KEY, name VARCHAR(255), certification_count INT);CREATE VIEW top_countries AS SELECT name, certification_count, ROW_NUMBER() OVER (ORDER BY certification_count DESC) as rank FROM countries;"}
{"sql_prompt": "What is the total carbon offset of buildings in a given neighborhood?", "sql": "SELECT SUM(Building.carbon_offset) as total_carbon_offset FROM Building JOIN Neighborhood ON Building.neighborhood_id = Neighborhood.neighborhood_id WHERE Neighborhood.neighborhood_name = 'NeighborhoodName';", "sql_context": "CREATE TABLE Neighborhood (neighborhood_id INT, neighborhood_name VARCHAR(50)); CREATE TABLE Building (building_id INT, building_name VARCHAR(50), building_type VARCHAR(50), carbon_offset INT, neighborhood_id INT);"}
{"sql_prompt": "How many hospitals are there in New York City as of 2021?", "sql": "SELECT COUNT(*) FROM Hospitals WHERE City = 'New York City' AND Year = 2021;", "sql_context": "CREATE TABLE Hospitals (ID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(20), Year INT); INSERT INTO Hospitals (ID, Name, City, State, Year) VALUES (1, 'NY Hospital', 'New York City', 'New York', 2021); INSERT INTO Hospitals (ID, Name, City, State, Year) VALUES (2, 'Metro Hospital', 'New York City', 'New York', 2021);"}
{"sql_prompt": "What is the maximum number of works for an artist in the 'Baroque Art' category?", "sql": "SELECT MAX(num_works) FROM artists WHERE category = 'Baroque Art';", "sql_context": "CREATE TABLE artists(id INT, name VARCHAR(255), category VARCHAR(255), num_works INT); INSERT INTO artists (id, name, category, num_works) VALUES (1, 'Caravaggio', 'Baroque Art', 90), (2, 'Rembrandt', 'Baroque Art', 100), (3, 'Velazquez', 'Baroque Art', 120);"}
{"sql_prompt": "Count the number of users from each country in the user_data table.", "sql": "SELECT country, COUNT(*) AS num_users FROM user_data GROUP BY country;", "sql_context": "CREATE TABLE user_data (user_id INT, country VARCHAR(50)); INSERT INTO user_data (user_id, country) VALUES (1, 'Brazil'), (2, 'USA'), (3, 'Nigeria'), (4, 'USA'), (5, 'Brazil');"}
{"sql_prompt": "Update the count of artifacts in 'Tikal' to 85.", "sql": "UPDATE ExcavationSite SET NumArtifacts = 85 WHERE SiteName = 'Tikal';", "sql_context": "CREATE TABLE ExcavationSite (SiteID INT, SiteName TEXT, Country TEXT, NumArtifacts INT); INSERT INTO ExcavationSite (SiteID, SiteName, Country, NumArtifacts) VALUES (1, 'Pompeii', 'Italy', 52), (2, 'Tutankhamun', 'Egypt', 35), (3, 'Machu Picchu', 'Peru', 42), (4, 'Tikal', 'Guatemala', 80);"}
{"sql_prompt": "Delete all records from the 'explainability_scores' table where the 'algorithm_name' is 'RL Algo 1'", "sql": "DELETE FROM explainability_scores WHERE algorithm_name = 'RL Algo 1';", "sql_context": "CREATE TABLE explainability_scores (id INT PRIMARY KEY, algorithm_name VARCHAR(50), explanation_score INT, evaluation_date DATE);"}
{"sql_prompt": "Count the number of workplaces per union", "sql": "SELECT UnionID, COUNT(DISTINCT WorkplaceID) as NumWorkplaces FROM Workplace GROUP BY UnionID;", "sql_context": "CREATE TABLE Workplace (WorkplaceID INT, WorkplaceName VARCHAR(50), UnionID INT); INSERT INTO Workplace (WorkplaceID, WorkplaceName, UnionID) VALUES (1, 'Workplace1', 1), (2, 'Workplace2', 1), (3, 'Workplace3', 2);"}
{"sql_prompt": "What is the earliest innovation date for each company?", "sql": "SELECT company_id, MIN(innovation_date) as earliest_innovation_date FROM CompanyInnovations GROUP BY company_id;", "sql_context": "CREATE TABLE CompanyInnovations (company_id INT, innovation_date DATE); INSERT INTO CompanyInnovations (company_id, innovation_date) VALUES (1, '2020-01-01'), (1, '2019-01-01'), (2, '2018-01-01');"}
{"sql_prompt": "Which irrigation systems have a manufacturer other than Hunter?", "sql": "SELECT * FROM irrigation_systems WHERE manufacturer != 'Hunter';", "sql_context": "CREATE TABLE irrigation_systems (id INT, system_id VARCHAR(255), manufacturer VARCHAR(255), model VARCHAR(255), PRIMARY KEY (id)); INSERT INTO irrigation_systems (id, system_id, manufacturer, model) VALUES (1, 'is1', 'Rain Bird', 'ESP-LXD'), (2, 'is2', 'Toro', 'Agilis'), (3, 'is3', 'Hunter', 'I-Core'), (4, 'is4', 'Netafim', 'DripNet');"}
{"sql_prompt": "What is the average duration of TV shows produced in the UK?", "sql": "SELECT AVG(duration) FROM tv_shows WHERE production_country = 'UK';", "sql_context": "CREATE TABLE tv_shows (title VARCHAR(255), duration MINUTE, production_country VARCHAR(64));"}
{"sql_prompt": "Add a new record to the \"defense_diplomacy\" table with the following information: ('USA', 'arms_reduction_treaty', '2015')", "sql": "INSERT INTO defense_diplomacy (country, agreement_type, year) VALUES ('USA', 'arms_reduction_treaty', 2015);", "sql_context": "CREATE TABLE defense_diplomacy (country VARCHAR(50), agreement_type VARCHAR(50), year INT); INSERT INTO defense_diplomacy (country, agreement_type, year) VALUES (), (), ();"}
{"sql_prompt": "What are the most common AI safety concerns in South America?", "sql": "SELECT region, concern, COUNT(*) OVER (PARTITION BY concern ORDER BY COUNT(*) DESC) as rank FROM ai_safety_reports_sa WHERE region = 'South America' GROUP BY region, concern;", "sql_context": "CREATE TABLE ai_safety_reports_sa (id INT, concern VARCHAR(255), date DATE, region VARCHAR(255));"}
{"sql_prompt": "Retrieve all records from the 'suppliers' table where the country is not 'Italy'", "sql": "SELECT * FROM suppliers WHERE country != 'Italy';", "sql_context": "CREATE TABLE suppliers (id INT, name TEXT, country TEXT); INSERT INTO suppliers (id, name, country) VALUES (1, 'Green Earth Farms', 'France'), (2, 'La Placita Market', 'Spain'), (3, 'Bella Verde Organics', 'Italy');"}
{"sql_prompt": "What is the minimum annual income (in dollars) for an agroecological project to operate sustainably?", "sql": "SELECT MIN(annual_income) FROM agroecology;", "sql_context": "CREATE TABLE agroecology (project_id INT, project_name TEXT, annual_income FLOAT); INSERT INTO agroecology (project_id, project_name, annual_income) VALUES (1, 'Green Hope', 45000), (2, 'Nature''s Blessing', 52000), (3, 'Unity Farm', 60000);"}
{"sql_prompt": "Delete all records of Europium production from the 'processing_plants' table that occurred before 2015.", "sql": "DELETE FROM processing_plants WHERE Europium_production < '2015-01-01';", "sql_context": "CREATE TABLE processing_plants (id INT, name TEXT, location TEXT, Europium_production DATE, production_quantity INT);"}
{"sql_prompt": "What are the names of all the traditional arts in the Central America region?", "sql": "SELECT h.name FROM traditional_arts h WHERE h.region = 'Central America';", "sql_context": "CREATE TABLE traditional_arts (id INT, name VARCHAR(255), region VARCHAR(255)); INSERT INTO traditional_arts (id, name, region) VALUES (1, 'Hammock Weaving', 'Central America');"}
{"sql_prompt": "What is the average range of electric vehicles manufactured in Japan?", "sql": "SELECT AVG(range) FROM EV_Specs WHERE manufacturing_country = 'Japan';", "sql_context": "CREATE TABLE EV_Specs (id INT, vehicle_model VARCHAR(255), manufacturing_country VARCHAR(255), range FLOAT); INSERT INTO EV_Specs (id, vehicle_model, manufacturing_country, range) VALUES (1, 'Nissan Leaf', 'Japan', 150.0); INSERT INTO EV_Specs (id, vehicle_model, manufacturing_country, range) VALUES (2, 'Toyota Mirai', 'Japan', 312.0); INSERT INTO EV_Specs (id, vehicle_model, manufacturing_country, range) VALUES (3, 'Honda Clarity', 'Japan', 340.0);"}
{"sql_prompt": "What is the average labor hours per building permit issued in the city of NYC?", "sql": "SELECT AVG(project.hours) FROM project INNER JOIN permit ON project.id = permit.id WHERE permit.city = 'NYC';", "sql_context": "CREATE TABLE project (id INT, city VARCHAR(20), type VARCHAR(20), hours INT); INSERT INTO project (id, city, type, hours) VALUES (1, 'Seattle', 'Sustainable', 500), (2, 'NYC', 'Sustainable', 800), (3, 'Seattle', 'Traditional', 300); CREATE TABLE permit (id INT, city VARCHAR(20), permit_number INT); INSERT INTO permit (id, city, permit_number) VALUES (1, 'NYC', 100), (2, 'NYC', 150), (3, 'LA', 80);"}
{"sql_prompt": "What is the average donation per donor in the Southern United States?", "sql": "SELECT AVG(d.amount) FROM donations d INNER JOIN donors dd ON d.donor_id = dd.id WHERE dd.state IN ('Texas', 'Florida');", "sql_context": "CREATE TABLE donations (id INT, donor_id INT, amount DECIMAL(10,2)); CREATE TABLE donors (id INT, name VARCHAR(50), state VARCHAR(50)); INSERT INTO donations (id, donor_id, amount) VALUES (1, 1, 50.00), (2, 1, 75.00), (3, 2, 100.00); INSERT INTO donors (id, name, state) VALUES (1, 'Jane Doe', 'Texas'), (2, 'John Smith', 'Florida');"}
{"sql_prompt": "What is the ratio of electric to conventional vehicles for each transportation mode?", "sql": "SELECT tm.name, (SUM(ev.vehicle_count) / SUM(cv.vehicle_count)) AS ratio FROM transportation_modes tm JOIN electric_vehicles ev ON tm.id = ev.mode_id JOIN conventional_vehicles cv ON tm.id = cv.mode_id GROUP BY tm.name;", "sql_context": "CREATE TABLE transportation_modes (id INT, name VARCHAR(20)); CREATE TABLE electric_vehicles (id INT, mode_id INT, vehicle_count INT); CREATE TABLE conventional_vehicles (id INT, mode_id INT, vehicle_count INT); INSERT INTO transportation_modes (id, name) VALUES (1, 'Car'), (2, 'Truck'), (3, 'Bus'); INSERT INTO electric_vehicles (id, mode_id, vehicle_count) VALUES (1, 1, 1000), (2, 2, 500), (3, 3, 200); INSERT INTO conventional_vehicles (id, mode_id, vehicle_count) VALUES (4, 1, 3000), (5, 2, 2000), (6, 3, 1000);"}
{"sql_prompt": "Identify the total number of digital divide initiatives launched in the first half of the year 2021 and the second half of the year 2022.", "sql": "SELECT SUM(Initiatives) FROM Digital_Divide_Initiatives WHERE Half IN (2, 4);", "sql_context": "CREATE TABLE Digital_Divide_Initiatives (Half INT, Initiatives INT); INSERT INTO Digital_Divide_Initiatives (Half, Initiatives) VALUES (1, 25), (2, 50), (3, 75), (4, 100);"}
{"sql_prompt": "Which renewable energy projects have a budget greater than the average budget for all projects?", "sql": "SELECT project_name, budget FROM Renewable_Energy_Projects WHERE budget > (SELECT AVG(budget) FROM Renewable_Energy_Projects);", "sql_context": "CREATE TABLE Renewable_Energy_Projects (id INT, project_name VARCHAR(50), budget FLOAT); INSERT INTO Renewable_Energy_Projects (id, project_name, budget) VALUES (1, 'Solar Farm', 5000000), (2, 'Wind Farm', 7000000), (3, 'Hydroelectric Plant', 6000000);"}
{"sql_prompt": "What is the total waste generated by each country in the circular economy?", "sql": "SELECT country, SUM(waste) as total_waste FROM CircularEconomy GROUP BY country;", "sql_context": "CREATE TABLE CircularEconomy (country TEXT, waste INT); INSERT INTO CircularEconomy (country, waste) VALUES ('Country1', 200), ('Country2', 300), ('Country3', 150), ('Country4', 250), ('Country5', 400);"}
{"sql_prompt": "What is the average project timeline for residential buildings in New York?", "sql": "SELECT AVG(days) FROM project_timeline WHERE building_type = 'Residential' AND city = 'New York';", "sql_context": "CREATE TABLE project_timeline (timeline_id INT, project_id INT, building_type VARCHAR(20), city VARCHAR(20), days INT); INSERT INTO project_timeline (timeline_id, project_id, building_type, city, days) VALUES (1, 301, 'Commercial', 'Chicago', 90), (2, 302, 'Residential', 'Chicago', 60), (3, 303, 'Commercial', 'New York', 120), (4, 304, 'Residential', 'New York', 75);"}
{"sql_prompt": "What is the average delivery time for recycled packaging orders?", "sql": "SELECT AVG(PackagingInfo.avg_delivery_time) FROM PackagingInfo INNER JOIN OrderDetails ON PackagingInfo.packaging_type = OrderDetails.packaging_type WHERE PackagingInfo.is_recycled = true;", "sql_context": "CREATE TABLE OrderDetails (order_id INT, product_id INT, delivery_date DATE, packaging_type VARCHAR(255)); CREATE TABLE PackagingInfo (packaging_id INT, packaging_type VARCHAR(255), is_recycled BOOLEAN, avg_delivery_time INT); INSERT INTO PackagingInfo (packaging_id, packaging_type, is_recycled, avg_delivery_time) VALUES (1, 'Recycled Cardboard', true, 5), (2, 'Plastic Wrap', false, 3); INSERT INTO OrderDetails (order_id, product_id, delivery_date, packaging_type) VALUES (1, 1, '2021-01-05', 'Recycled Cardboard'), (2, 2, '2021-01-06', 'Plastic Wrap');"}
{"sql_prompt": "Find the average safety rating of the top 2 vehicles in each country?", "sql": "SELECT Country, AVG(SafetyRating) FROM (SELECT Country, SafetyRating FROM VehicleSafetyRating GROUP BY Country ORDER BY AVG(SafetyRating) DESC LIMIT 2) AS Subquery;", "sql_context": "CREATE TABLE if not exists VehicleSafetyRating (Id int, Vehicle varchar(100), Country varchar(50), SafetyRating float); INSERT INTO VehicleSafetyRating (Id, Vehicle, Country, SafetyRating) VALUES (1, 'Tesla Model 3', 'USA', 5.3), (2, 'Tesla Model S', 'USA', 5.4), (3, 'Nissan Leaf', 'Japan', 4.8), (4, 'BMW i3', 'Germany', 4.9), (5, 'Renault Zoe', 'France', 4.6), (6, 'BYD e6', 'China', 4.4);"}
{"sql_prompt": "Find the average claim amount for policyholders in 'New York' who have comprehensive coverage.", "sql": "SELECT AVG(claim_amount) FROM policyholders WHERE state = 'NY' AND coverage = 'Comprehensive';", "sql_context": "CREATE TABLE policyholders (id INT, name TEXT, city TEXT, state TEXT, claim_amount FLOAT, coverage TEXT); INSERT INTO policyholders (id, name, city, state, claim_amount, coverage) VALUES (1, 'John Doe', 'New York', 'NY', 1200.00, 'Comprehensive'); INSERT INTO policyholders (id, name, city, state, claim_amount, coverage) VALUES (2, 'Jane Doe', 'Albany', 'NY', 1500.00, 'Liability'); INSERT INTO policyholders (id, name, city, state, claim_amount, coverage) VALUES (3, 'Bob Smith', 'Buffalo', 'NY', 900.00, 'Comprehensive');"}
{"sql_prompt": "Which disability type has the lowest frequency in 'California' since 2015?", "sql": "SELECT disability_type FROM (SELECT disability_type, ROW_NUMBER() OVER (PARTITION BY state ORDER BY frequency ASC) as rn FROM disability_types WHERE state = 'California' AND start_year >= 2015) t WHERE rn = 1;", "sql_context": "CREATE TABLE disability_types (disability_id INT, disability_type VARCHAR(50), state VARCHAR(50), frequency INT, start_year INT); INSERT INTO disability_types (disability_id, disability_type, state, frequency, start_year) VALUES (1, 'Mobility', 'California', 3000, 2015), (2, 'Vision', 'California', 2000, 2015), (3, 'Hearing', 'California', 1500, 2015);"}
{"sql_prompt": "Which platform generated the most revenue in the year 2018?", "sql": "SELECT platforms.name, MAX(revenue.amount) FROM platforms JOIN revenue ON platforms.id = revenue.platform_id WHERE revenue.year = 2018 GROUP BY platforms.name ORDER BY MAX(revenue.amount) DESC LIMIT 1;", "sql_context": "CREATE TABLE platforms (id INT, name TEXT);CREATE TABLE revenue (platform_id INT, year INT, amount FLOAT); INSERT INTO platforms (id, name) VALUES (1, 'Platform A'), (2, 'Platform B'), (3, 'Platform C'); INSERT INTO revenue (platform_id, year, amount) VALUES (1, 2018, 50000), (2, 2018, 70000), (3, 2018, 60000), (1, 2019, 55000), (2, 2019, 60000), (3, 2019, 80000);"}
{"sql_prompt": "Delete records in the \"routes\" table where the eta is older than the current date", "sql": "DELETE FROM routes WHERE eta < CURDATE();", "sql_context": "CREATE TABLE routes (route_id INT, origin VARCHAR(50), destination VARCHAR(50), distance INT, eta DATE); INSERT INTO routes (route_id, origin, destination, distance, eta) VALUES (1, 'Los Angeles', 'Chicago', 2000, '2022-06-25'); INSERT INTO routes (route_id, origin, destination, distance, eta) VALUES (2, 'Miami', 'Dallas', 1500, '2022-06-30'); INSERT INTO routes (route_id, origin, destination, distance, eta) VALUES (3, 'Houston', 'Philadelphia', 2500, '2022-07-05');"}
{"sql_prompt": "Find the number of water conservation initiatives in the state of Texas.", "sql": "SELECT COUNT(*) FROM WaterConservationInitiatives WHERE State = 'Texas'", "sql_context": "CREATE TABLE WaterConservationInitiatives (ID INT, State VARCHAR(20), Initiative VARCHAR(50)); INSERT INTO WaterConservationInitiatives (ID, State, Initiative) VALUES (5, 'Texas', 'Water-saving toilets'), (6, 'Texas', 'Dual-pane windows'), (7, 'Florida', 'Rain sensors for irrigation'), (8, 'Georgia', 'Smart landscaping');"}
{"sql_prompt": "Show the average age and medical condition of astronauts from countries with the most astronauts in space.", "sql": "SELECT AVG(a.age), a.medical_condition FROM Astronauts a JOIN (SELECT nationality, COUNT(*) AS astronaut_count FROM Astronauts GROUP BY nationality ORDER BY astronaut_count DESC LIMIT 1) c ON a.nationality = c.nationality GROUP BY a.medical_condition;", "sql_context": "CREATE TABLE Astronauts (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), nationality VARCHAR(50), medical_condition VARCHAR(50)); INSERT INTO Astronauts (id, name, age, nationality, medical_condition) VALUES (1, 'Jonathan Williams', 45, 'Male', 'American', 'Healthy'), (2, 'Svetlana Savitskaya', 37, 'Female', 'Russian', 'Healthy'), (3, 'Anousheh Ansari', 44, 'Female', 'Iranian-American', 'Healthy'), (4, 'Chiaki Mukai', 56, 'Female', 'Japanese', 'Healthy'); CREATE TABLE Countries (id INT, name VARCHAR(50), number_of_astronauts INT); INSERT INTO Countries (name, number_of_astronauts) VALUES ('United States', 50), ('Russia', 30), ('Japan', 20), ('Iran', 5);"}
{"sql_prompt": "What is the total cost of SpacecraftManufacturing for US based spacecraft?", "sql": "SELECT SUM(cost) FROM SpacecraftManufacturing WHERE spacecraft_country = 'USA';", "sql_context": "CREATE TABLE SpacecraftManufacturing (spacecraft_model VARCHAR(255), spacecraft_country VARCHAR(255), cost INT); INSERT INTO SpacecraftManufacturing (spacecraft_model, spacecraft_country, cost) VALUES ('Apollo', 'USA', 25400000), ('Space Shuttle', 'USA', 192000000), ('Orion', 'USA', 15100000);"}
{"sql_prompt": "How many individuals have accessed legal aid services in Texas and New York?", "sql": "SELECT COUNT(*) FROM LegalAidServices WHERE State IN ('Texas', 'New York');", "sql_context": "CREATE TABLE LegalAidServices (ServiceID INT, ClientName VARCHAR(50), State VARCHAR(20)); INSERT INTO LegalAidServices VALUES (1, 'Client A', 'Texas'); INSERT INTO LegalAidServices VALUES (2, 'Client B', 'Texas'); INSERT INTO LegalAidServices VALUES (3, 'Client C', 'New York');"}
{"sql_prompt": "What is the average energy efficiency for buildings in each state?", "sql": "SELECT state, AVG(efficiency) AS avg_efficiency FROM building_energy GROUP BY state;", "sql_context": "CREATE TABLE building_energy (state VARCHAR(255), efficiency FLOAT); INSERT INTO building_energy (state, efficiency) VALUES ('California', 0.75), ('California', 0.8), ('New York', 0.65), ('New York', 0.7);"}
{"sql_prompt": "What is the minimum wage in Cambodia and how many garment factories pay exactly this wage?", "sql": "SELECT MIN(wage) FROM MinimumWage WHERE country = 'Cambodia'; SELECT COUNT(*) FROM MinimumWage WHERE country = 'Cambodia' AND wage = (SELECT MIN(wage) FROM MinimumWage WHERE country = 'Cambodia');", "sql_context": "CREATE TABLE MinimumWage (country VARCHAR(50), wage DECIMAL(5,2), industry VARCHAR(50)); INSERT INTO MinimumWage VALUES ('Cambodia', 2.0, 'Garment'), ('Cambodia', 2.0, 'Garment'), ('Cambodia', 2.5, 'Garment'), ('Vietnam', 3.5, 'Garment');"}
{"sql_prompt": "What is the maximum fair labor certification score for each supplier?", "sql": "SELECT supplier_name, MAX(certification_score) FROM suppliers WHERE fair_labor_certified = true GROUP BY supplier_name;", "sql_context": "CREATE TABLE suppliers (supplier_id INT, supplier_name VARCHAR(50), fair_labor_certified BOOLEAN, certification_score INT); INSERT INTO suppliers (supplier_id, supplier_name, fair_labor_certified, certification_score) VALUES (1, 'Green Vendors', true, 90), (2, 'Eco Supplies', false, 85), (3, 'Sustainable Resources', true, 95);"}
{"sql_prompt": "Which military equipment types are part of defense projects with timelines extending into 2025, and for which countries are these projects?", "sql": "SELECT EquipmentTypes.equipment, ProjectCountries.country FROM EquipmentTypes INNER JOIN ProjectTimelines ON EquipmentTypes.equipment = ProjectTimelines.equipment INNER JOIN ProjectCountries ON ProjectTimelines.id = ProjectCountries.project_id WHERE ProjectTimelines.end_year >= 2025;", "sql_context": "CREATE TABLE EquipmentTypes (id INT, equipment VARCHAR(50));CREATE TABLE ProjectTimelines (id INT, equipment VARCHAR(50), start_year INT, end_year INT);CREATE TABLE ProjectCountries (id INT, project_id INT, country VARCHAR(50));"}
{"sql_prompt": "What is the total transaction amount for each digital asset in the 'crypto_transactions' table, ordered by the total transaction amount in descending order?", "sql": "SELECT digital_asset, SUM(transaction_amount) as total_transaction_amount FROM crypto_transactions GROUP BY digital_asset ORDER BY total_transaction_amount DESC;", "sql_context": "CREATE TABLE crypto_transactions (transaction_id INT, digital_asset VARCHAR(20), transaction_amount DECIMAL(10,2), transaction_time DATETIME);"}
{"sql_prompt": "What is the total number of movies produced by studios located in the United States and Canada, by genre?", "sql": "SELECT genre, COUNT(*) as total FROM movies JOIN studios ON movies.studio_location = studios.location WHERE studios.location IN ('USA', 'Canada') GROUP BY genre;", "sql_context": "CREATE TABLE movies (id INT, title VARCHAR(255), genre VARCHAR(255), studio_location VARCHAR(255)); INSERT INTO movies (id, title, genre, studio_location) VALUES (1, 'Movie1', 'Action', 'USA'), (2, 'Movie2', 'Comedy', 'Canada'); CREATE TABLE studios (id INT, name VARCHAR(255), location VARCHAR(255)); INSERT INTO studios (id, name, location) VALUES (1, 'Studio1', 'USA'), (2, 'Studio2', 'Canada');"}
{"sql_prompt": "What is the total capacity of wind energy projects in Germany?", "sql": "SELECT SUM(capacity) FROM wind_projects WHERE country = 'Germany';", "sql_context": "CREATE TABLE wind_projects (id INT, country VARCHAR(50), capacity FLOAT);"}
{"sql_prompt": "What are the top 3 most popular TV shows among viewers aged 18-24 in 2021?", "sql": "SELECT Show, SUM(Views) as Total_Views FROM ViewershipData WHERE Age BETWEEN 18 AND 24 AND Year = 2021 GROUP BY Show ORDER BY Total_Views DESC LIMIT 3;", "sql_context": "CREATE TABLE ViewershipData(Show VARCHAR(30), Age INT, Views INT, Year INT); INSERT INTO ViewershipData(Show, Age, Views, Year) VALUES ('Stranger Things', 22, 4500000, 2021), ('Breaking Bad', 28, 3500000, 2021), ('The Mandalorian', 19, 5000000, 2021), ('Stranger Things', 23, 5000000, 2021), ('Breaking Bad', 30, 3800000, 2021), ('The Mandalorian', 20, 5200000, 2021), ('Stranger Things', 18, 3900000, 2021), ('Breaking Bad', 25, 3200000, 2021), ('The Mandalorian', 17, 4800000, 2021);"}
{"sql_prompt": "List the marine species that share a conservation year with the 'Shark' species.", "sql": "SELECT ms1.species_name FROM marine_species ms1 INNER JOIN conservation_efforts ce ON ms1.conservation_year = ce.year WHERE ce.species_name = 'Shark' AND ms1.species_name != 'Shark';", "sql_context": "CREATE TABLE marine_species (species_id INT, species_name VARCHAR(50), conservation_year INT); INSERT INTO marine_species (species_id, species_name, conservation_year) VALUES (1, 'Spinner Dolphin', 2006), (2, 'Clownfish', 2010), (3, 'Shark', 2008); CREATE TABLE conservation_efforts (effort_id INT, species_name VARCHAR(50), year INT, description TEXT); INSERT INTO conservation_efforts (effort_id, species_name, year, description) VALUES (1, 'Turtle', 2005, 'Hawaiian green turtle recovery'), (2, 'Clownfish', 2010, 'Clownfish conservation program'), (3, 'Shark', 2008, 'Shark finning ban');"}
{"sql_prompt": "What is the average vulnerability score for assets in the 'Finance' department?", "sql": "SELECT AVG(vulnerability_score) as avg_score FROM assets WHERE department = 'Finance';", "sql_context": "CREATE TABLE assets (id INT, department VARCHAR(50), vulnerability_score DECIMAL(3,2));"}
{"sql_prompt": "How many news articles were published in 'top_news' table for each category?", "sql": "SELECT category, COUNT(*) FROM top_news GROUP BY category;", "sql_context": "CREATE TABLE top_news (id INT, title VARCHAR(100), category VARCHAR(30), publication_date DATE); INSERT INTO top_news (id, title, category, publication_date) VALUES (1, 'Article 1', 'Politics', '2022-01-01'), (2, 'Article 2', 'Sports', '2022-01-02'), (3, 'Article 3', 'Politics', '2022-01-03');"}
{"sql_prompt": "What is the total quantity of copper mined in the first quarter of 2023 from the 'CopperMine'?", "sql": "SELECT SUM(quantity) FROM CopperMine WHERE date < '2023-04-01' AND date >= '2023-01-01';", "sql_context": "CREATE TABLE CopperMine (date DATE, quantity INT);INSERT INTO CopperMine (date, quantity) VALUES ('2023-01-01', 180), ('2023-01-05', 210), ('2023-02-10', 190), ('2023-03-20', 260);"}
{"sql_prompt": "Update the accommodation name for 'Mobility' type to 'Adaptive Equipment'.", "sql": "UPDATE accommodation SET accommodation_name = 'Adaptive Equipment' WHERE disability_type = 'Mobility';", "sql_context": "CREATE TABLE accommodation (accommodation_id INT, accommodation_name TEXT, disability_type TEXT); INSERT INTO accommodation (accommodation_id, accommodation_name, disability_type) VALUES (1, 'Wheelchair Ramp', 'Mobility'); INSERT INTO accommodation (accommodation_id, accommodation_name, disability_type) VALUES (2, 'Sign Language Interpreter', 'Hearing'); INSERT INTO accommodation (accommodation_id, accommodation_name, disability_type) VALUES (3, 'Braille Materials', 'Visual');"}
{"sql_prompt": "Increase the ESG rating by 5 for company with id 1.", "sql": "UPDATE companies SET ESG_rating = ESG_rating + 5 WHERE id = 1;", "sql_context": "CREATE TABLE companies (id INT, sector TEXT, ESG_rating FLOAT); INSERT INTO companies (id, sector, ESG_rating) VALUES (1, 'technology', 78.2), (2, 'finance', 82.5), (3, 'technology', 84.6);"}
{"sql_prompt": "What is the average number of workplace safety incidents for unions in the 'technology' sector?", "sql": "SELECT AVG(num_safety_incidents) FROM union_stats WHERE sector = 'technology';", "sql_context": "CREATE TABLE union_stats (id INT, union_name VARCHAR(30), sector VARCHAR(20), num_safety_incidents INT); INSERT INTO union_stats (id, union_name, sector, num_safety_incidents) VALUES (1, 'Union A', 'technology', 15), (2, 'Union B', 'education', 8), (3, 'Union C', 'technology', 3);"}
{"sql_prompt": "What are the research grant titles that do not have a corresponding publication?", "sql": "SELECT g.title FROM grant g LEFT JOIN publication p ON g.title = p.title WHERE p.id IS NULL;", "sql_context": "CREATE TABLE grant (id INT, title VARCHAR(100)); CREATE TABLE publication (id INT, title VARCHAR(100), grant_id INT);"}
{"sql_prompt": "What is the average property size in urban areas with green building certifications?", "sql": "SELECT AVG(size) FROM properties WHERE location = 'urban' AND green_building_certified = true;", "sql_context": "CREATE TABLE properties (id INT, size FLOAT, location VARCHAR(20), green_building_certified BOOLEAN); INSERT INTO properties (id, size, location, green_building_certified) VALUES (1, 1500, 'urban', true), (2, 1200, 'rural', false);"}
{"sql_prompt": "Which economic diversification initiatives from the 'economic_diversification' table have the same funding organization as any agricultural innovation projects in the 'rural_innovations' table?", "sql": "SELECT initiative_name FROM economic_diversification WHERE funding_org IN (SELECT funding_org FROM rural_innovations);", "sql_context": "CREATE TABLE rural_innovations (id INT, project_name VARCHAR(50), funding_org VARCHAR(50)); INSERT INTO rural_innovations (id, project_name, funding_org) VALUES (1, 'Precision Agriculture', 'InnovateAfrica'), (2, 'Smart Greenhouses', 'GrowMoreFund'); CREATE TABLE economic_diversification (id INT, initiative_name VARCHAR(50), funding_org VARCHAR(50)); INSERT INTO economic_diversification (id, initiative_name, funding_org) VALUES (1, 'Handicraft Cooperative', 'LocalSupport'), (2, 'Sustainable Tourism', 'GrowMoreFund');"}
{"sql_prompt": "What is the total number of criminal cases and their clearance rate by state?", "sql": "SELECT s.state_name, COUNT(c.case_id) AS total_cases, SUM(c.cleared) / COUNT(c.case_id) * 100 AS clearance_rate FROM states s JOIN cases c ON s.state_id = c.state_id GROUP BY s.state_id;", "sql_context": "CREATE TABLE states (state_id INT PRIMARY KEY, state_name VARCHAR(50)); CREATE TABLE cases (case_id INT PRIMARY KEY, state_id INT, case_type VARCHAR(50), cleared INT); INSERT INTO states VALUES (1, 'California'), (2, 'Texas'), (3, 'New York'); INSERT INTO cases VALUES (1, 1, 'Murder', 1), (2, 1, 'Theft', 0), (3, 2, 'Murder', 1), (4, 2, 'Theft', 1), (5, 3, 'Murder', 0), (6, 3, 'Theft', 1);"}
{"sql_prompt": "What is the total quantity of a specific strain sold by dispensaries in California?", "sql": "SELECT SUM(QuantitySold) FROM DispensaryStrainSales WHERE StrainName = 'Gelato' AND DispensaryName IN (SELECT DispensaryName FROM CaliforniaDispensaries);", "sql_context": "CREATE TABLE DispensaryStrainSales (DispensaryName TEXT, StrainName TEXT, QuantitySold INTEGER); INSERT INTO DispensaryStrainSales (DispensaryName, StrainName, QuantitySold) VALUES ('Euphoria', 'Gelato', 50), ('Elevate', 'Gelato', 75), ('Essence', 'Gelato', 40), ('Euphoria', 'Durban Poison', 45), ('Elevate', 'Durban Poison', 65), ('Essence', 'Durban Poison', 30); CREATE TABLE CaliforniaDispensaries (DispensaryName TEXT, Location TEXT); INSERT INTO CaliforniaDispensaries (DispensaryName, Location) VALUES ('Euphoria', 'San Francisco, CA'), ('Elevate', 'Los Angeles, CA'), ('Essence', 'San Diego, CA');"}
{"sql_prompt": "Which organizations have volunteers from both the US and Canada?", "sql": "SELECT org_name FROM organization WHERE org_id IN (SELECT org_id FROM volunteer WHERE vol_country IN ('USA', 'Canada') GROUP BY org_id HAVING COUNT(DISTINCT vol_country) = 2);", "sql_context": "CREATE TABLE organization (org_id INT, org_name TEXT); CREATE TABLE volunteer (vol_id INT, org_id INT, vol_country TEXT); INSERT INTO organization (org_id, org_name) VALUES (1, 'Greenpeace'), (2, 'Oxfam'), (3, 'Save the Children'); INSERT INTO volunteer (vol_id, org_id, vol_country) VALUES (1, 1, 'USA'), (2, 1, 'Canada'), (3, 2, 'USA'), (4, 2, 'Mexico'), (5, 3, 'USA');"}
{"sql_prompt": "Find the earliest year an artifact was excavated from each excavation site.", "sql": "SELECT es.name, MIN(a.year) as min_year FROM excavation_sites es JOIN artifacts a ON es.id = a.excavation_site_id GROUP BY es.name;", "sql_context": "CREATE TABLE excavation_sites (id INT, name VARCHAR(255)); CREATE TABLE artifacts (id INT, excavation_site_id INT, year INT, type VARCHAR(255));"}
{"sql_prompt": "When did the first cybersecurity incident occur in the database?", "sql": "SELECT MIN(year) FROM CybersecurityIncidents;", "sql_context": "CREATE TABLE CybersecurityIncidents(id INT PRIMARY KEY, year INT, incidents INT);INSERT INTO CybersecurityIncidents(id, year, incidents) VALUES (1, 2005, 50), (2, 2010, 100), (3, 2015, 150);"}
{"sql_prompt": "List all social impact bonds along with their issuer countries and the corresponding ESG scores.", "sql": "SELECT s.bond_name, s.issuer_country, e.esg_score FROM social_impact_bonds s JOIN esg_scores e ON s.bond_id = e.bond_id;", "sql_context": "CREATE TABLE social_impact_bonds (bond_id INT, bond_name TEXT, issuer_country TEXT); CREATE TABLE esg_scores (bond_id INT, esg_score INT); INSERT INTO social_impact_bonds (bond_id, bond_name, issuer_country) VALUES (1, 'SIB A', 'USA'), (2, 'SIB B', 'Germany'); INSERT INTO esg_scores (bond_id, esg_score) VALUES (1, 80), (2, 85);"}
{"sql_prompt": "What is the total number of green buildings by building type?", "sql": "SELECT building_type, SUM(num_buildings) FROM green_buildings GROUP BY building_type;", "sql_context": "CREATE TABLE green_buildings (city VARCHAR(50), building_type VARCHAR(50), num_buildings INT); INSERT INTO green_buildings (city, building_type, num_buildings) VALUES ('NYC', 'Residential', 1000), ('NYC', 'Commercial', 2000), ('LA', 'Residential', 1500), ('LA', 'Commercial', 2500);"}
{"sql_prompt": "How many rural infrastructure projects were completed in South Asia in each year?", "sql": "SELECT year, COUNT(*) FROM RuralInfrastructure WHERE region = 'South Asia' AND project_status = 'completed' GROUP BY year;", "sql_context": "CREATE TABLE RuralInfrastructure (region TEXT, year INTEGER, project_status TEXT); INSERT INTO RuralInfrastructure (region, year, project_status) VALUES ('South Asia', 2019, 'completed'), ('South Asia', 2020, 'completed'), ('South Asia', 2021, 'completed'), ('South Asia', 2019, 'in progress'), ('South Asia', 2020, 'in progress'), ('South Asia', 2021, 'in progress');"}
{"sql_prompt": "List the number of satellites deployed by each country?", "sql": "SELECT c.CountryName, COUNT(s.SatelliteID) as TotalSatellites FROM Countries c INNER JOIN Satellites s ON c.CountryID = s.LaunchCountryID GROUP BY c.CountryName;", "sql_context": "CREATE TABLE Countries (CountryID int, CountryName varchar(50)); CREATE TABLE Satellites (SatelliteID int, SatelliteName varchar(50), LaunchCountryID int, LaunchDate date); INSERT INTO Countries VALUES (1, 'USA'), (2, 'Russia'), (3, 'China'); INSERT INTO Satellites VALUES (1, 'Sat1', 1, '2010-01-01'), (2, 'Sat2', 1, '2015-06-18'), (3, 'Sat3', 2, '2017-03-12'), (4, 'Sat4', 3, '2019-08-05');"}
{"sql_prompt": "What is the average years of experience for teachers who teach Math?", "sql": "SELECT AVG(years_experience) FROM teachers WHERE subject = 'Math';", "sql_context": "CREATE TABLE teachers (id INT, name VARCHAR(50), subject VARCHAR(50), years_experience INT); INSERT INTO teachers (id, name, subject, years_experience) VALUES (1, 'Alice Brown', 'Math', 10); INSERT INTO teachers (id, name, subject, years_experience) VALUES (2, 'Bob Johnson', 'Science', 15); INSERT INTO teachers (id, name, subject, years_experience) VALUES (3, 'Charlie Smith', 'Math', 12);"}
{"sql_prompt": "What is the market share of each online travel agency by month?", "sql": "SELECT month, ota_name, (SUM(revenue) / SUM(SUM(revenue)) OVER (PARTITION BY month)) * 100 as market_share FROM online_travel_agency GROUP BY month, ota_name;", "sql_context": "CREATE TABLE online_travel_agency (ota_id INT, ota_name TEXT, revenue INT, month INT); INSERT INTO online_travel_agency (ota_id, ota_name, revenue, month) VALUES (1, 'OTA 1', 5000, 1), (2, 'OTA 2', 7000, 1), (3, 'OTA 3', 6000, 2), (4, 'OTA 4', 8000, 2), (5, 'OTA 5', 9000, 2);"}
{"sql_prompt": "What is the maximum prize pool for esports events?", "sql": "SELECT MAX(PrizePool) FROM EsportsEvents;", "sql_context": "CREATE TABLE EsportsEvents (EventID INT, EventName VARCHAR(50), PrizePool DECIMAL(10,2)); INSERT INTO EsportsEvents (EventID, EventName, PrizePool) VALUES (1, 'The International', 40000000.00), (2, 'League of Legends World Championship', 24000000.00), (3, 'Major League Gaming', 1000000.00);"}
{"sql_prompt": "Identify and update vessels with outdated engine technology in the fleet_information table.", "sql": "UPDATE fleet_information SET engine_technology = '2010-01-01' WHERE id IN (SELECT id FROM (SELECT id, ROW_NUMBER() OVER (ORDER BY engine_technology) AS rn FROM fleet_information WHERE engine_technology < '2015-01-01') t WHERE t.rn > 1);", "sql_context": "CREATE TABLE fleet_information (id INT, vessel_name VARCHAR(255), engine_technology DATE); INSERT INTO fleet_information (id, vessel_name, engine_technology) VALUES (1, 'Ocean Titan', '2000-01-01'), (2, 'Sea Explorer', '2020-01-01');"}
{"sql_prompt": "Who are the policyholders in 'CA' with the highest claim amount?", "sql": "SELECT PolicyholderName, MAX(ClaimAmount) AS MaxClaimAmount FROM Policyholders INNER JOIN Claims ON Policyholders.PolicyID = Claims.PolicyID WHERE Policyholders.State = 'CA' GROUP BY PolicyholderName;", "sql_context": "CREATE TABLE Policyholders (PolicyID INT, PolicyholderName TEXT, State TEXT); INSERT INTO Policyholders (PolicyID, PolicyholderName, State) VALUES (1, 'Maria Garcia', 'CA'), (2, 'James Lee', 'NY'); CREATE TABLE Claims (ClaimID INT, PolicyID INT, ClaimAmount INT); INSERT INTO Claims (ClaimID, PolicyID, ClaimAmount) VALUES (1, 1, 10000), (2, 1, 7000), (3, 2, 3000);"}
{"sql_prompt": "Find the number of companies in each region that have sustainable material usage.", "sql": "SELECT Companies.region, COUNT(DISTINCT Companies.id) FROM Companies JOIN Materials ON Companies.id = Materials.company_id GROUP BY Companies.region;", "sql_context": "CREATE TABLE Companies (id INT, name VARCHAR(255), region VARCHAR(255)); INSERT INTO Companies (id, name, region) VALUES (1, 'CompanyA', 'Asia-Pacific'), (2, 'CompanyB', 'Europe'), (3, 'CompanyC', 'Asia-Pacific'); CREATE TABLE Materials (id INT, company_id INT, material VARCHAR(255), quantity INT); INSERT INTO Materials (id, company_id, material, quantity) VALUES (1, 1, 'Organic cotton', 500), (2, 1, 'Recycled polyester', 300), (3, 2, 'Organic linen', 400), (4, 3, 'Organic cotton', 600), (5, 3, 'Tencel', 700);"}
{"sql_prompt": "What is the maximum donation amount given by a single donor?", "sql": "SELECT MAX(amount) FROM donations;", "sql_context": "CREATE TABLE donations (id INT, donor_id INT, amount DECIMAL(10,2)); INSERT INTO donations (id, donor_id, amount) VALUES (1, 1, 50.00), (2, 1, 100.00), (3, 2, 75.00);"}
{"sql_prompt": "Which strains are sold at dispensaries located in states with recreational cannabis use allowed?", "sql": "SELECT s.name FROM strains s JOIN dispensaries d ON s.dispensary_id = d.id JOIN state_cannabis_regulations scr ON d.state = scr.state WHERE scr.recreational_use = TRUE;", "sql_context": "CREATE TABLE dispensaries (id INT, name TEXT, state TEXT); CREATE TABLE strains (id INT, name TEXT, dispensary_id INT); CREATE TABLE state_cannabis_regulations (state TEXT, recreational_use BOOLEAN); INSERT INTO dispensaries (id, name, state) VALUES (1, 'The Joint', 'Washington'), (2, '3D Cannabis Center', 'Colorado'); INSERT INTO strains (id, name, dispensary_id) VALUES (1, 'Blue Dream', 1), (2, 'OG Kush', 1), (3, 'Sour Diesel', 2); INSERT INTO state_cannabis_regulations (state, recreational_use) VALUES ('Washington', TRUE), ('Colorado', TRUE);"}
{"sql_prompt": "What is the average number of attendees for dance events in Chicago and San Francisco?", "sql": "SELECT AVG(cnt) FROM (SELECT COUNT(DISTINCT A.attendee_id) AS cnt FROM Attendance A INNER JOIN Events E ON A.event_id = E.event_id WHERE E.event_type = 'Dance' AND E.location IN ('Chicago', 'San Francisco')) AS subquery", "sql_context": "CREATE TABLE Events (event_id INT, event_type VARCHAR(50), location VARCHAR(50)); CREATE TABLE Attendance (attendee_id INT, event_id INT); INSERT INTO Events (event_id, event_type, location) VALUES (1, 'Dance', 'Chicago'), (2, 'Theater', 'Los Angeles'), (3, 'Dance', 'San Francisco'); INSERT INTO Attendance (attendee_id, event_id) VALUES (1, 1), (2, 1), (3, 1), (4, 2), (5, 3), (6, 3);"}
{"sql_prompt": "What are the top 3 eco-friendly accommodations in Asia, based on their sustainability scores?", "sql": "SELECT name FROM asia_accommodations WHERE sustainability_score IN (SELECT MAX(sustainability_score) FROM asia_accommodations) LIMIT 3;", "sql_context": "CREATE TABLE asia_accommodations (country VARCHAR(50), name VARCHAR(50), sustainability_score INT); INSERT INTO asia_accommodations VALUES ('Thailand', 'The Sira Hotel', 95), ('Indonesia', 'Bambu Indah', 90), ('Nepal', 'Kathmandu Guest House', 88), ('Japan', 'Hoshinoya Tokyo', 85), ('India', 'The Oberoi Udaivilas', 83);"}
{"sql_prompt": "What is the total budget allocated for education policies in 'Toronto' and 'Vancouver'?", "sql": "SELECT SUM(budget) FROM Policy WHERE city_id IN (3, 4) AND category = 'Education';", "sql_context": "CREATE TABLE Policy (id INT, name VARCHAR(50), city_id INT, category VARCHAR(50), budget DECIMAL(10,2), start_date DATE, end_date DATE); INSERT INTO Policy (id, name, city_id, category, budget, start_date, end_date) VALUES (1, 'Education', 3, 'Education', 1200000, '2021-01-01', '2023-12-31'); INSERT INTO Policy (id, name, city_id, category, budget, start_date, end_date) VALUES (2, 'Healthcare', 3, 'Healthcare', 1500000, '2020-01-01', '2022-12-31'); INSERT INTO Policy (id, name, city_id, category, budget, start_date, end_date) VALUES (3, 'Transportation', 4, 'Transportation', 2000000, '2019-01-01', '2024-12-31'); INSERT INTO Policy (id, name, city_id, category, budget, start_date, end_date) VALUES (4, 'Education', 4, 'Education', 1800000, '2020-01-01', '2023-12-31');"}
{"sql_prompt": "List the names of customers who have taken out socially responsible loans.", "sql": "SELECT customers.name FROM customers JOIN loans ON customers.id = loans.customer_id WHERE loans.socially_responsible = TRUE;", "sql_context": "CREATE TABLE customers (id INT, name TEXT); CREATE TABLE loans (id INT, customer_id INT, amount REAL, socially_responsible BOOLEAN);"}
{"sql_prompt": "What is the total CO2 emissions reduction achieved by using sustainable materials?", "sql": "SELECT SUM(co2_emissions_reduction) FROM emissions;", "sql_context": "CREATE TABLE emissions (emission_id INT, material_id INT, co2_emissions_reduction INT); INSERT INTO emissions (emission_id, material_id, co2_emissions_reduction) VALUES (1, 1, 10), (2, 2, 15), (3, 3, 20), (4, 4, 25), (5, 5, 30);"}
{"sql_prompt": "What is the total billing amount for cases with a duration of less than or equal to 30 days?", "sql": "SELECT SUM(BillingAmount) AS TotalBillingAmount FROM CaseBilling JOIN Cases ON CaseBilling.CaseID = Cases.CaseID WHERE DurationDays <= 30;", "sql_context": "CREATE TABLE Cases (CaseID int, AttorneyID int, DurationDays int); INSERT INTO Cases (CaseID, AttorneyID, DurationDays) VALUES (1, 1, 45), (2, 2, 20), (3, 3, 32); CREATE TABLE CaseBilling (CaseID int, BillingAmount decimal(10,2)); INSERT INTO CaseBilling (CaseID, BillingAmount) VALUES (1, 4500.00), (2, 2000.00), (3, 3200.00);"}
{"sql_prompt": "What is the name of the grocery_store with the lowest price for lentils in the stock table?", "sql": "SELECT store_name, MIN(price) FROM stock WHERE item_name = 'Lentils';", "sql_context": "CREATE TABLE stock (store_name TEXT, item_name TEXT, price INTEGER); INSERT INTO stock (store_name, item_name, price) VALUES ('Grocery Store 1', 'Lentils', 5), ('Grocery Store 2', 'Lentils', 4), ('Grocery Store 3', 'Lentils', 6);"}
{"sql_prompt": "What are the names and regulatory frameworks for all blockchain technologies in the 'Asia-Pacific' region?", "sql": "SELECT name, framework FROM blockchain_tech WHERE region = 'Asia-Pacific';", "sql_context": "CREATE TABLE blockchain_tech (name TEXT, region TEXT, framework TEXT); INSERT INTO blockchain_tech (name, region, framework) VALUES ('Tech1', 'North America', 'Regulation1'), ('Tech2', 'Asia-Pacific', 'Regulation2');"}
{"sql_prompt": "List all clients who have paid exactly $4000 in total billing amount?", "sql": "SELECT clients.name FROM clients INNER JOIN cases ON clients.client_id = cases.client_id GROUP BY clients.name HAVING SUM(billing_amount) = 4000;", "sql_context": "CREATE TABLE clients (client_id INT, name VARCHAR(50)); CREATE TABLE cases (case_id INT, client_id INT, billing_amount DECIMAL(10,2)); INSERT INTO clients (client_id, name) VALUES (1, 'Smith'), (2, 'Johnson'), (3, 'Williams'), (4, 'Brown'); INSERT INTO cases (case_id, client_id, billing_amount) VALUES (1, 1, 3000.00), (2, 2, 6000.00), (3, 3, 7000.00), (4, 4, 4000.00);"}
{"sql_prompt": "What is the total number of vessels by type?", "sql": "SELECT * FROM vessels_by_type;", "sql_context": "CREATE TABLE if not exists vessels (id INT, name VARCHAR(255), type VARCHAR(255), year_built INT); INSERT INTO vessels (id, name, type, year_built) VALUES (1, 'MV XYZ', 'Container', 2010); INSERT INTO vessels (id, name, type, year_built) VALUES (2, 'MS KLM', 'Bulk Carrier', 2015); CREATE VIEW vessels_by_type AS SELECT type, COUNT(*) as total FROM vessels GROUP BY type;"}
{"sql_prompt": "What is the total amount of Shariah-compliant savings held by customers in the Middle East region as of 2021-01-01?", "sql": "SELECT SUM(savings_amount) FROM savings JOIN customers ON savings.customer_id = customers.customer_id WHERE region = 'Middle East' AND account_open_date <= '2021-01-01' AND savings_amount >= 0;", "sql_context": "CREATE TABLE savings (savings_id INT, customer_id INT, savings_amount INT, account_open_date DATE);CREATE TABLE customers (customer_id INT, region TEXT);"}
{"sql_prompt": "How many public libraries in the Libraries department have a budget over $500,000?", "sql": "SELECT COUNT(*) FROM Libraries_Dept WHERE Library_Type = 'Public' AND Budget > 500000;", "sql_context": "CREATE TABLE Libraries_Dept (ID INT, Library_Type VARCHAR(255), Budget FLOAT); INSERT INTO Libraries_Dept (ID, Library_Type, Budget) VALUES (1, 'Public', 700000), (2, 'Public', 600000), (3, 'Academic', 800000);"}
{"sql_prompt": "Delete all records in the 'students' table where 'grade_level' is '12'", "sql": "DELETE FROM students WHERE grade_level = '12';", "sql_context": "CREATE TABLE students (student_id INT, name VARCHAR(50), grade_level VARCHAR(10));"}
{"sql_prompt": "Which hospitals have not admitted any patients, displayed in alphabetical order?", "sql": "SELECT hospital_name FROM hospitals WHERE patients = 0 ORDER BY hospital_name ASC;", "sql_context": "CREATE TABLE hospitals (hospital_name TEXT, patients INT); INSERT INTO hospitals (hospital_name, patients) VALUES ('Hospital1', 5), ('Hospital2', 0), ('Hospital3', 10), ('Hospital4', 0), ('Hospital5', 15);"}
{"sql_prompt": "What is the total number of vegan and non-vegan products?", "sql": "SELECT vegan, COUNT(*) FROM products_vegan GROUP BY vegan;", "sql_context": "CREATE TABLE products_vegan (id INT, product_name TEXT, vegan BOOLEAN); INSERT INTO products_vegan (id, product_name, vegan) VALUES (1, 'Lotion', false), (2, 'Shampoo', true), (3, 'Soap', false);"}
{"sql_prompt": "Which esports events have the highest number of viewers in the US?", "sql": "SELECT EventName, MAX(Viewers) FROM EsportsEvents WHERE Country = 'United States';", "sql_context": "CREATE TABLE EsportsEvents (EventID INT, EventName VARCHAR(50), Viewers INT, Venue VARCHAR(50), Country VARCHAR(20));"}
{"sql_prompt": "What is the total revenue for a specific restaurant?", "sql": "SELECT SUM(revenue) as total_revenue FROM restaurant_revenue WHERE restaurant_id = 1;", "sql_context": "CREATE TABLE restaurant_revenue (restaurant_id INT, cuisine VARCHAR(255), revenue FLOAT); INSERT INTO restaurant_revenue (restaurant_id, cuisine, revenue) VALUES (1, 'Italian', 5000.00), (2, 'Mexican', 6000.00), (3, 'Italian', 4000.00);"}
{"sql_prompt": "What are the total REE reserves for each country, excluding China?", "sql": "SELECT country, SUM(ree_reserves) FROM reserves WHERE country NOT IN ('China') GROUP BY country;", "sql_context": "CREATE TABLE reserves (country VARCHAR(255), ree_reserves INT); INSERT INTO reserves (country, ree_reserves) VALUES ('China', 44000), ('USA', 1400), ('Australia', 3800), ('India', 690), ('Brazil', 220), ('Russia', 200);"}
{"sql_prompt": "What are the total expenses for the financial year 2021?", "sql": "SELECT SUM(Amount) FROM Expenses WHERE ExpenseDate BETWEEN '2021-01-01' AND '2021-12-31';", "sql_context": "CREATE TABLE Expenses (ExpenseID INT, Description TEXT, Amount DECIMAL, ExpenseDate DATE);"}
{"sql_prompt": "What is the average age of all hip-hop artists in our database?", "sql": "SELECT AVG(Age) FROM Artists WHERE Genre = 'Hip-Hop';", "sql_context": "CREATE TABLE Artists (ArtistID INT, ArtistName VARCHAR(100), Age INT, Genre VARCHAR(50)); INSERT INTO Artists VALUES (1, 'Artist A', 35, 'Hip-Hop'), (2, 'Artist B', 28, 'Pop');"}
{"sql_prompt": "How many esports events were held for each game in 2018, ranked by the number of events?", "sql": "SELECT GameID, COUNT(*) as EventsIn2018, ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) as Rank FROM EsportsEvents WHERE EventDate BETWEEN '2018-01-01' AND '2018-12-31' GROUP BY GameID;", "sql_context": "CREATE TABLE EsportsEvents (EventID INT, EventName VARCHAR(50), GameID INT, EventDate DATE, PrizePool NUMERIC(18,2)); INSERT INTO EsportsEvents (EventID, EventName, GameID, EventDate, PrizePool) VALUES (1, 'Fortnite World Cup', 1, '2019-07-26', 30000000); INSERT INTO EsportsEvents (EventID, EventName, GameID, EventDate, PrizePool) VALUES (2, 'Overwatch League Grand Finals', 2, '2018-07-28', 1500000); INSERT INTO EsportsEvents (EventID, EventName, GameID, EventDate, PrizePool) VALUES (3, 'League of Legends World Championship', 3, '2018-11-03', 24000000); INSERT INTO EsportsEvents (EventID, EventName, GameID, EventDate, PrizePool) VALUES (4, 'Dota 2 International', 4, '2018-08-20', 25500000);"}
{"sql_prompt": "What is the total weight of all metal artifacts in the 'Metal_Artifacts' table?", "sql": "SELECT SUM(weight) FROM Metal_Artifacts WHERE artifact_type = 'Metal';", "sql_context": "CREATE TABLE Metal_Artifacts (id INT, artifact_name VARCHAR(50), artifact_type VARCHAR(50), weight INT); INSERT INTO Metal_Artifacts (id, artifact_name, artifact_type, weight) VALUES (1, 'Bronze Sword', 'Metal', 2000), (2, 'Iron Spear', 'Metal', 3000), (3, 'Gold Mask', 'Metal', 1000);"}
{"sql_prompt": "Delete all climate finance projects that do not have a positive impact on climate adaptation.", "sql": "DELETE FROM climate_finance WHERE impact < 0;", "sql_context": "CREATE TABLE climate_finance (project VARCHAR(50), country VARCHAR(50), amount FLOAT, impact INT, date DATE); INSERT INTO climate_finance (project, country, amount, impact, date) VALUES ('Green City', 'USA', 5000000, 1, '2020-01-01'); INSERT INTO climate_finance (project, country, amount, impact, date) VALUES ('Clean Energy', 'India', 3000000, -1, '2020-01-01');"}
{"sql_prompt": "How many community development initiatives were completed in the region of Patagonia between 2015 and 2017?", "sql": "SELECT COUNT(*) FROM community_development WHERE region = 'Patagonia' AND start_date <= '2017-12-31' AND end_date >= '2015-01-01';", "sql_context": "CREATE TABLE community_development (id INT, region VARCHAR(50), initiative_type VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO community_development (id, region, initiative_type, start_date, end_date) VALUES (1, 'Patagonia', 'Library', '2015-01-01', '2016-12-31');"}
{"sql_prompt": "What is the maximum revenue of restaurants in Tokyo?", "sql": "SELECT MAX(revenue) FROM Restaurants WHERE city = 'Tokyo';", "sql_context": "CREATE TABLE Restaurants (id INT, name VARCHAR(50), city VARCHAR(20), revenue DECIMAL(10,2)); INSERT INTO Restaurants (id, name, city, revenue) VALUES (1, 'SushiSensei', 'Tokyo', 180000.00); INSERT INTO Restaurants (id, name, city, revenue) VALUES (2, 'RamenRoyale', 'Tokyo', 150000.00);"}
{"sql_prompt": "What is the name of the factory with the highest number of fair trade certified products?", "sql": "SELECT Factories.name FROM Factories INNER JOIN (SELECT factory_id, COUNT(*) as product_count FROM Factory_Products WHERE is_fair_trade_certified = true GROUP BY factory_id) AS Subquery ON Factories.id = Subquery.factory_id ORDER BY Subquery.product_count DESC LIMIT 1;", "sql_context": "CREATE TABLE Factory_Products(id INT, factory_id INT, product_id INT, is_fair_trade_certified BOOLEAN); INSERT INTO Factory_Products(id, factory_id, product_id, is_fair_trade_certified) VALUES (1, 1, 1, true), (2, 1, 2, true), (3, 2, 3, false); CREATE TABLE Factories(id INT, name TEXT); INSERT INTO Factories(id, name) VALUES (1, 'Factory A'), (2, 'Factory B');"}
{"sql_prompt": "What is the maximum 'total_emissions' for 'coal' in the 'emissions' table?", "sql": "SELECT MAX(total_emissions) FROM emissions WHERE resource_type = 'coal';", "sql_context": "CREATE TABLE emissions(id INT, resource_type VARCHAR(255), total_emissions INT); INSERT INTO emissions(id, resource_type, total_emissions) VALUES (1, 'coal', 100000);"}
{"sql_prompt": "What is the total number of electric bikes in the city of Seattle?", "sql": "SELECT SUM(quantity) FROM bike_share WHERE city = 'Seattle' AND bike_type = 'electric_bike';", "sql_context": "CREATE TABLE if not exists bike_share (id INT, city VARCHAR(20), bike_type VARCHAR(20), quantity INT);INSERT INTO bike_share (id, city, bike_type, quantity) VALUES (1, 'Seattle', 'electric_bike', 500), (2, 'Portland', 'electric_bike', 350), (3, 'Seattle', 'classic_bike', 800);"}
{"sql_prompt": "How many active space missions are currently being conducted by India?", "sql": "SELECT COUNT(*) FROM active_missions WHERE agency = 'ISRO' AND end_date = 'ONGOING';", "sql_context": "CREATE TABLE active_missions (id INT, name VARCHAR(50), agency VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO active_missions (id, name, agency, start_date, end_date) VALUES (1, 'Chandrayaan-3', 'ISRO', '2022-07-14', 'ONGOING'); INSERT INTO active_missions (id, name, agency, start_date, end_date) VALUES (2, 'Aditya-L1', 'ISRO', '2023-08-01', 'ONGOING');"}
{"sql_prompt": "What is the maximum number of vessels owned by a fleet?", "sql": "SELECT MAX(number_of_vessels) FROM fleets;", "sql_context": "CREATE TABLE fleets (fleet_id INT, number_of_vessels INT); INSERT INTO fleets (fleet_id, number_of_vessels) VALUES (1, 10), (2, 15), (3, 20);"}
{"sql_prompt": "What is the sea surface temperature of the species with the lowest conservation status?", "sql": "SELECT o.sea_surface_temperature FROM oceanography o JOIN marine_species m ON o.species_id = m.id WHERE m.conservation_status = (SELECT MIN(conservation_status) FROM marine_species);", "sql_context": "CREATE TABLE marine_species (id INT PRIMARY KEY, name VARCHAR(255), conservation_status VARCHAR(255)); INSERT INTO marine_species (id, name, conservation_status) VALUES (1, 'Leatherback Sea Turtle', 'Vulnerable'); CREATE TABLE oceanography (id INT PRIMARY KEY, species_id INT, sea_surface_temperature INT); INSERT INTO oceanography (id, species_id, sea_surface_temperature) VALUES (1, 1, 200);"}
{"sql_prompt": "List the teams that have not hosted any home games", "sql": "SELECT s.team_name FROM sports_teams s WHERE s.stadium IS NULL;", "sql_context": "CREATE TABLE sports_teams (team_id INT, team_name VARCHAR(50), stadium VARCHAR(50)); INSERT INTO sports_teams (team_id, team_name, stadium) VALUES (1, 'TeamA', 'StadiumA'), (2, 'TeamB', 'StadiumB'), (3, 'TeamC', 'StadiumC'), (4, 'TeamD', NULL);"}
{"sql_prompt": "What is the longest streaming session by artist in 'music_streaming' table?", "sql": "SELECT artist, MAX(duration) as max_duration FROM music_streaming GROUP BY artist;", "sql_context": "CREATE TABLE music_streaming (user_id INT, song_id INT, duration FLOAT, date DATE, artist VARCHAR(255));"}
{"sql_prompt": "What is the average amount of food aid provided to refugee camps in Southeast Asia?", "sql": "SELECT AVG(fa.amount) as avg_food_aid FROM food_aid fa JOIN refugee_camps rc ON fa.camp = rc.id WHERE rc.region = 'Southeast Asia';", "sql_context": "CREATE TABLE refugee_camps (id INT, name TEXT, country TEXT, region TEXT); INSERT INTO refugee_camps (id, name, country, region) VALUES (1, 'Camp A', 'Thailand', 'Southeast Asia'), (2, 'Camp B', 'Malaysia', 'Southeast Asia'), (3, 'Camp C', 'Indonesia', 'Southeast Asia'); CREATE TABLE food_aid (id INT, camp INT, amount FLOAT); INSERT INTO food_aid (id, camp, amount) VALUES (1, 1, 500), (2, 2, 750), (3, 1, 250);"}
{"sql_prompt": "Count the number of companies founded by individuals from each country", "sql": "SELECT founder_country, COUNT(*) FROM company_founding GROUP BY founder_country;", "sql_context": "CREATE TABLE company_founding(id INT PRIMARY KEY, company_name VARCHAR(100), founder_country VARCHAR(50)); INSERT INTO company_founding VALUES (1, 'Acme Inc', 'USA'); INSERT INTO company_founding VALUES (2, 'Beta Corp', 'USA'); INSERT INTO company_founding VALUES (3, 'Charlie LLC', 'Canada'); INSERT INTO company_founding VALUES (4, 'Delta Inc', 'USA');"}
{"sql_prompt": "Insert a new professional development course with a unique course_id, course_name, and number of students who have completed the course, and update the corresponding teacher's record accordingly.", "sql": "INSERT INTO courses (course_id, course_name, num_completions) VALUES (12345, 'Python for Educators', 50); UPDATE professional_development pd SET pd.course_id = 12345 WHERE EXISTS (SELECT * FROM teachers t JOIN courses c ON t.teacher_id = pd.teacher_id WHERE c.course_id = 12345 AND pd.course_id != 12345);", "sql_context": "CREATE TABLE courses (course_id INT, course_name TEXT, num_completions INT); CREATE TABLE professional_development (pd_id INT, teacher_id INT, course_id INT);"}
{"sql_prompt": "What is the total cargo weight transported by vessels with an average speed above 15?", "sql": "SELECT SUM(cargo_weight) FROM cargo_data JOIN vessels ON cargo_data.vessel_name = vessels.name WHERE average_speed > 15;", "sql_context": "CREATE TABLE vessels(id INT, name VARCHAR(50), country VARCHAR(50), average_speed DECIMAL(5,2)); CREATE TABLE cargo_data(id INT, vessel_name VARCHAR(50), destination VARCHAR(50), cargo_weight DECIMAL(5,2)); INSERT INTO vessels(id, name, country, average_speed) VALUES (1, 'Vessel A', 'Philippines', 14.5), (2, 'Vessel B', 'Philippines', 16.3); INSERT INTO cargo_data(id, vessel_name, destination, cargo_weight) VALUES (1, 'Vessel A', 'Port C', 200.0), (2, 'Vessel B', 'Port D', 250.0);"}
{"sql_prompt": "What is the total number of workplaces in the 'government' sector with a collective bargaining agreement?", "sql": "SELECT COUNT(*) FROM workplaces WHERE sector = 'government' AND has_cba = true;", "sql_context": "CREATE TABLE if NOT EXISTS workplaces (id INT, sector VARCHAR(20), has_cba BOOLEAN); INSERT INTO workplaces (id, sector, has_cba) VALUES (1, 'government', true), (2, 'government', false), (3, 'retail', false);"}
{"sql_prompt": "Calculate the production percentage of each product category.", "sql": "SELECT category, (COUNT(*)*100.0 / (SELECT COUNT(*) FROM products)) as production_percentage FROM products GROUP BY category;", "sql_context": "CREATE TABLE products (id INT, name VARCHAR(50), category VARCHAR(50), production_date DATE); INSERT INTO products (id, name, category, production_date) VALUES (1, 'Eco-friendly Mug', 'Home & Kitchen', '2021-02-01'); INSERT INTO products (id, name, category, production_date) VALUES (2, 'Solar Charger', 'Electronics', '2021-03-15');"}
{"sql_prompt": "Find the number of electric vehicles by manufacturer", "sql": "SELECT ManufacturerName, COUNT(*) as Total FROM Manufacturers m JOIN Vehicles v ON m.ManufacturerID = v.ManufacturerID WHERE Electric = true GROUP BY ManufacturerName;", "sql_context": "CREATE TABLE Manufacturers (ManufacturerID INT, ManufacturerName VARCHAR(50)); INSERT INTO Manufacturers (ManufacturerID, ManufacturerName) VALUES (1, 'Tesla'), (2, 'Nissan'), (3, 'BMW'); CREATE TABLE Vehicles (VehicleID INT, ManufacturerID INT, VehicleType VARCHAR(50), Electric BOOLEAN); INSERT INTO Vehicles (VehicleID, ManufacturerID, VehicleType, Electric) VALUES (1, 1, 'Model S', true), (2, 1, 'Model 3', true), (3, 2, 'Leaf', true), (4, 2, 'Versa', false), (5, 3, 'i3', true), (6, 3, 'X5', false);"}
{"sql_prompt": "Add new animal to 'endangered_species' table", "sql": "INSERT INTO endangered_species (id, animal_name, population) VALUES (5, 'Orangutan', 250);", "sql_context": "CREATE TABLE endangered_species (id INT PRIMARY KEY, animal_name VARCHAR, population INT);"}
{"sql_prompt": "What is the total production output for each factory?", "sql": "SELECT f.name, SUM(p.quantity) FROM factories f INNER JOIN production p ON f.id = p.factory_id GROUP BY f.name;", "sql_context": "CREATE TABLE factories (id INT, name VARCHAR(255)); CREATE TABLE production (factory_id INT, quantity INT, product_type VARCHAR(255)); INSERT INTO factories (id, name) VALUES (1, 'Factory A'), (2, 'Factory B'), (3, 'Factory C'); INSERT INTO production (factory_id, quantity, product_type) VALUES (1, 500, 'Electronic Device'), (1, 800, 'Mechanical Component'), (2, 300, 'Electronic Device'), (3, 1000, 'Mechanical Component');"}
{"sql_prompt": "Which indigenous food systems have the most community-based organizations in the 'indigenous_food_systems' table?", "sql": "SELECT system, organizations FROM indigenous_food_systems ORDER BY organizations DESC;", "sql_context": "CREATE TABLE indigenous_food_systems (id INT, system VARCHAR(255), organizations INT); INSERT INTO indigenous_food_systems (id, system, organizations) VALUES (1, 'Navajo', 30), (2, 'Cherokee', 40), (3, 'Maya', 50), (4, 'Maori', 60);"}
{"sql_prompt": "Calculate the total CO2 emissions savings (in metric tons) of renewable projects in Texas and Oklahoma", "sql": "SELECT SUM(co2_savings) FROM project WHERE (state = 'Texas' OR state = 'Oklahoma') AND type IN ('Wind', 'Solar');", "sql_context": "CREATE TABLE project (id INT, name TEXT, state TEXT, type TEXT, co2_savings INT); INSERT INTO project (id, name, state, type, co2_savings) VALUES (16, 'Texas Wind', 'Texas', 'Wind', 765432), (17, 'Oklahoma Solar', 'Oklahoma', 'Solar', 345678), (18, 'Texas Solar', 'Texas', 'Solar', 987654), (19, 'Oklahoma Wind', 'Oklahoma', 'Wind', 234567);"}
{"sql_prompt": "Calculate the average age of volunteers for each nonprofit", "sql": "SELECT nonprofits.name, AVG(volunteers.age) as avg_age FROM nonprofits INNER JOIN volunteers ON nonprofits.id = volunteers.nonprofit_id GROUP BY nonprofits.name;", "sql_context": "CREATE TABLE volunteers (id INT PRIMARY KEY, name VARCHAR(100), age INT, city VARCHAR(50), nonprofit_id INT); CREATE TABLE nonprofits (id INT PRIMARY KEY, name VARCHAR(100), city VARCHAR(50), mission VARCHAR(200)); INSERT INTO volunteers (id, name, age, city, nonprofit_id) VALUES (1, 'Alice Johnson', 28, 'New York', 1); INSERT INTO volunteers (id, name, age, city, nonprofit_id) VALUES (2, 'Bob Brown', 33, 'San Francisco', 2); INSERT INTO nonprofits (id, name, city, mission) VALUES (1, 'Save the Children', 'Washington', 'Improving the lives of children through better education, health care, and economic opportunities.'); INSERT INTO nonprofits (id, name, city, mission) VALUES (2, 'Greenpeace', 'San Francisco', 'Dedicated to preserving the environment and promoting peace.');"}
{"sql_prompt": "What is the total cargo weight handled by each port in Spain?", "sql": "SELECT p.name, SUM(c.weight) as total_weight FROM ports p JOIN cargo c ON p.id = c.port_id WHERE p.country = 'Spain' GROUP BY p.name;", "sql_context": "CREATE TABLE ports (id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO ports (id, name, country) VALUES (1, 'Algeciras', 'Spain'), (2, 'Valencia', 'Spain'), (3, 'Barcelona', 'Spain'); CREATE TABLE cargo (id INT, port_id INT, weight INT); INSERT INTO cargo (id, port_id, weight) VALUES (1, 1, 1000), (2, 1, 2000), (3, 2, 1500), (4, 3, 2500);"}
{"sql_prompt": "Calculate the total fare collected at each station on the Blue Line on 2022-07-01", "sql": "SELECT s.station_name, SUM(t.fare) as total_fare FROM trips t JOIN stations s ON t.station_id = s.station_id WHERE s.line = 'Blue Line' AND t.entry_time::date = '2022-07-01' GROUP BY s.station_name;", "sql_context": "CREATE TABLE stations (station_id INT, station_name VARCHAR(255), line VARCHAR(255));CREATE TABLE trips (trip_id INT, station_id INT, entry_time TIMESTAMP, fare FLOAT); INSERT INTO stations (station_id, station_name, line) VALUES (1, 'Bowdoin', 'Blue Line'), (2, 'Aquarium', 'Blue Line'), (3, 'Maverick', 'Blue Line'); INSERT INTO trips (trip_id, station_id, entry_time, fare) VALUES (1, 1, '2022-07-01 06:00:00', 2.5), (2, 1, '2022-07-01 18:00:00', 3.0), (3, 2, '2022-07-01 12:00:00', 1.5), (4, 3, '2022-07-01 10:00:00', 4.0);"}
{"sql_prompt": "What is the lowest dissolved oxygen level in the Indian Ocean for tilapia farms?", "sql": "SELECT MIN(Indian_Ocean.dissolved_oxygen) FROM Indian_Ocean INNER JOIN Tilapia_Farms ON Indian_Ocean.id = Tilapia_Farms.id WHERE Tilapia_Farms.ocean = 'Indian';", "sql_context": "CREATE TABLE Indian_Ocean (id INT, dissolved_oxygen DECIMAL(5,2)); INSERT INTO Indian_Ocean (id, dissolved_oxygen) VALUES (1, 6.5), (2, 7.2), (3, 5.9); CREATE TABLE Tilapia_Farms (id INT, ocean VARCHAR(20)); INSERT INTO Tilapia_Farms (id, ocean) VALUES (1, 'Indian'), (2, 'Pacific'), (3, 'Indian');"}
{"sql_prompt": "Find the number of artworks in the 'Contemporary' period in each museum and list them in descending order based on the count, including only museums located in the 'United States'.", "sql": "SELECT Museums.Name, COUNT(Artworks.ArtworkID) AS ArtworkCount FROM Artworks INNER JOIN Museums ON Artworks.MuseumID = Museums.MuseumID WHERE Artworks.Period = 'Contemporary' AND Museums.Location LIKE 'United States%' GROUP BY Museums.Name ORDER BY ArtworkCount DESC;", "sql_context": "CREATE TABLE Artworks (ArtworkID INT, Title VARCHAR(255), Period VARCHAR(255), MuseumID INT); INSERT INTO Artworks VALUES (1, 'The Persistence of Memory', 'Surrealism', 4); CREATE TABLE Museums (MuseumID INT, Name VARCHAR(255), Location VARCHAR(255)); INSERT INTO Museums VALUES (4, 'Los Angeles County Museum of Art', 'Los Angeles'), (6, 'The Museum of Modern Art', 'New York');"}
{"sql_prompt": "What are the average ticket prices for 'temporary' exhibitions?", "sql": "SELECT AVG(price) FROM Exhibitions WHERE exhibition_type = 'temporary';", "sql_context": "CREATE TABLE Exhibitions (id INT, exhibition_name VARCHAR(255), exhibition_type VARCHAR(10), price FLOAT); INSERT INTO Exhibitions (id, exhibition_name, exhibition_type, price) VALUES (1, 'Picasso at the Lapin Agile', 'temporary', 15.99); INSERT INTO Exhibitions (id, exhibition_name, exhibition_type, price) VALUES (2, 'Impressionism and Post-Impressionism', 'permanent', 19.99); INSERT INTO Exhibitions (id, exhibition_name, exhibition_type, price) VALUES (3, 'Van Gogh Alive', 'temporary', 22.99); INSERT INTO Exhibitions (id, exhibition_name, exhibition_type, price) VALUES (4, 'Renaissance Masterpieces', 'permanent', 24.99);"}
{"sql_prompt": "What is the cultural competency training completion rate for healthcare providers in the Midwest?", "sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM healthcare_providers WHERE region_id = 3)) as completion_rate FROM healthcare_providers WHERE region_id = 3 AND training_completion IS NOT NULL;", "sql_context": "CREATE TABLE healthcare_providers (provider_id INT, provider_name VARCHAR(50), region_id INT, training_completion DATE);"}
{"sql_prompt": "What is the maximum market price of Europium in the USA?", "sql": "SELECT MAX(market_price) FROM Europium_Market_Prices WHERE country = 'USA';", "sql_context": "CREATE TABLE Europium_Market_Prices (id INT, year INT, country VARCHAR(20), market_price DECIMAL(10,2));"}
{"sql_prompt": "List operators with wells in the Western region", "sql": "SELECT DISTINCT operator FROM wells WHERE region = 'Western';", "sql_context": "CREATE TABLE wells (id INT, operator VARCHAR(50), region VARCHAR(50)); INSERT INTO wells (id, operator, region) VALUES (1, 'ABC Oil', 'Northern'), (2, 'XYZ Energy', 'Southern'), (3, ' DEF Petroleum', 'Western');"}
{"sql_prompt": "What are the top 5 space missions with the longest durations?", "sql": "SELECT * FROM (SELECT MissionID, Duration FROM SpaceMissions ORDER BY Duration DESC) subquery LIMIT 5;", "sql_context": "CREATE TABLE SpaceMissions (MissionID INT, Duration FLOAT);"}
{"sql_prompt": "What is the average hectares of forests for each country and year?", "sql": "SELECT Countries.name as country_name, Forests.year, AVG(Forests.hectares) as avg_hectares FROM Forests INNER JOIN Countries ON Forests.country = Countries.name GROUP BY Countries.name, Forests.year;", "sql_context": "CREATE TABLE Forests (id INT PRIMARY KEY, name VARCHAR(255), hectares DECIMAL(5,2), country VARCHAR(255), year INT); INSERT INTO Forests (id, name, hectares, country, year) VALUES (1, 'Greenwood', 520.00, 'Canada', 2010); CREATE TABLE Countries (code CHAR(2), name VARCHAR(255), population INT); INSERT INTO Countries (code, name, population) VALUES ('CA', 'Canada', 37410003);"}
{"sql_prompt": "Identify the total number of intelligence personnel in the CIA and FBI.", "sql": "SELECT Agency, SUM(Quantity) FROM IntelligencePersonnel WHERE Agency IN ('Central Intelligence Agency', 'Federal Bureau of Investigation') GROUP BY Agency;", "sql_context": "CREATE TABLE IntelligencePersonnel (Agency VARCHAR(50), Position VARCHAR(50), Quantity INT); INSERT INTO IntelligencePersonnel (Agency, Position, Quantity) VALUES ('Central Intelligence Agency', 'Intelligence Officers', 25000), ('Federal Bureau of Investigation', 'Special Agents', 35000);"}
{"sql_prompt": "What is the total number of military equipment sales by PQR Corp to North American countries in the year 2022 with a sale price greater than $10,000,000?", "sql": "SELECT SUM(quantity) FROM Military_Equipment_Sales WHERE supplier = 'PQR Corp' AND region = 'North America' AND sale_price > 10000000 AND sale_year = 2022;", "sql_context": "CREATE TABLE Military_Equipment_Sales (supplier VARCHAR(255), region VARCHAR(255), equipment VARCHAR(255), quantity INT, sale_price DECIMAL(10,2), sale_year INT);"}
{"sql_prompt": "Find the second highest property price in each neighborhood.", "sql": "SELECT neighborhood_id, MAX(price) AS second_highest_price FROM properties WHERE price NOT IN (SELECT MAX(price) FROM properties GROUP BY neighborhood_id) GROUP BY neighborhood_id;", "sql_context": "CREATE TABLE properties (id INT, neighborhood_id INT, price FLOAT, livable_square_feet INT, PRIMARY KEY (id), FOREIGN KEY (neighborhood_id) REFERENCES neighborhoods(id));"}
{"sql_prompt": "What is the total number of clients in the Latin America region with a credit rating above 700?", "sql": "SELECT COUNT(*) FROM clients WHERE region = 'Latin America' AND credit_rating > 700;", "sql_context": "CREATE TABLE clients (client_id INT, name VARCHAR(50), region VARCHAR(50), credit_rating INT); INSERT INTO clients (client_id, name, region, credit_rating) VALUES (1, 'Pablo Rodriguez', 'Latin America', 750), (2, 'Sofia Gonzales', 'Europe', 650);"}
{"sql_prompt": "How many professional development courses did each teacher complete in 2019 and 2021?", "sql": "SELECT teacher_id, course_year, SUM(courses_completed) FROM teacher_development WHERE course_year IN (2019, 2021) GROUP BY teacher_id, course_year;", "sql_context": "CREATE TABLE teacher_development (teacher_id INT, course_year INT, courses_completed INT); INSERT INTO teacher_development (teacher_id, course_year, courses_completed) VALUES (101, 2018, 3), (101, 2019, 2), (101, 2020, 5), (101, 2021, 4), (102, 2018, 4), (102, 2019, 1), (102, 2020, 6), (102, 2021, 3);"}
{"sql_prompt": "What is the average age of players who play games in the 'Adventure' genre?", "sql": "SELECT AVG(age) FROM players WHERE game_genre = 'Adventure';", "sql_context": "CREATE TABLE players (id INT, age INT, game_genre VARCHAR(20)); INSERT INTO players (id, age, game_genre) VALUES (1, 25, 'racing'), (2, 30, 'rpg'), (3, 22, 'Adventure');"}
{"sql_prompt": "Update the department of employee with ID 3 to 'Learning & Development'.", "sql": "UPDATE Employees SET Department = 'Learning & Development' WHERE EmployeeID = 3;", "sql_context": "CREATE TABLE Employees (EmployeeID INT, Department VARCHAR(20), Salary DECIMAL(10,2)); INSERT INTO Employees (EmployeeID, Department, Salary) VALUES (1, 'IT', 70000.00), (2, 'Marketing', 55000.00), (3, 'Marketing', 58000.00), (4, 'HR', 60000.00), (5, 'HR', 62000.00), (6, 'Diversity & Inclusion', 75000.00);"}
{"sql_prompt": "Find the total number of 'repeat_donors' and 'first_time_donors' in 'donor_table'?", "sql": "SELECT COUNT(*) FROM donor_table WHERE donor_type IN ('repeat_donors', 'first_time_donors');", "sql_context": "CREATE TABLE donor_table (donor VARCHAR(20), donor_type VARCHAR(20)); INSERT INTO donor_table (donor, donor_type) VALUES ('James Brown', 'repeat_donors'); INSERT INTO donor_table (donor, donor_type) VALUES ('Sara White', 'first_time_donors');"}
{"sql_prompt": "What's the average rating for Korean drama TV shows, grouped by genre?", "sql": "SELECT genre, AVG(rating) FROM tv_show WHERE country = 'South Korea' AND genre LIKE '%Drama%' GROUP BY genre;", "sql_context": "CREATE TABLE tv_show (id INT, title VARCHAR(100), country VARCHAR(50), genre VARCHAR(50), rating DECIMAL(3,2)); INSERT INTO tv_show (id, title, country, genre, rating) VALUES (1, 'TVShow1', 'South Korea', 'Drama', 8.5); INSERT INTO tv_show (id, title, country, genre, rating) VALUES (2, 'TVShow2', 'South Korea', 'Comedy', 7.8);"}
{"sql_prompt": "What was the average temperature in Rome during excavations between 2015 and 2018?", "sql": "SELECT AVG(avg_temp) FROM WeatherData WHERE site_id = 1 AND year BETWEEN 2015 AND 2018;", "sql_context": "CREATE TABLE WeatherData (site_id INT, year INT, avg_temp DECIMAL(5,2)); INSERT INTO WeatherData (site_id, year, avg_temp) VALUES (1, 2015, 15.6), (1, 2016, 15.8), (1, 2017, 15.3), (1, 2018, 15.9);"}
{"sql_prompt": "What is the maximum funding received by a biotech startup in Texas?", "sql": "SELECT MAX(funding) FROM biotech_startups WHERE location = 'Texas';", "sql_context": "CREATE TABLE biotech_startups (id INT, name VARCHAR(50), location VARCHAR(50), funding FLOAT); INSERT INTO biotech_startups (id, name, location, funding) VALUES (1, 'Genomic Inc', 'California', 1500000); INSERT INTO biotech_startups (id, name, location, funding) VALUES (2, 'BioSense', 'Texas', 1200000);"}
{"sql_prompt": "What is the total carbon emissions and energy consumption for each smart city by month?", "sql": "SELECT city, type, SUM(value) as total, DATE_FORMAT(timestamp, '%%Y-%%m') as month FROM city_data GROUP BY city, type, month;", "sql_context": "CREATE TABLE city_data (id INT, city VARCHAR(255), type VARCHAR(255), value FLOAT, timestamp TIMESTAMP); INSERT INTO city_data (id, city, type, value, timestamp) VALUES (1, 'EcoCity', 'Carbon Emissions', 15000, '2022-04-01 10:00:00'), (2, 'EcoCity', 'Energy Consumption', 1000000, '2022-04-01 10:00:00');"}
{"sql_prompt": "How many solar projects were completed in California in 2020 and 2021?", "sql": "SELECT COUNT(*) FROM solar_projects WHERE state = 'California' AND completion_year IN (2020, 2021);", "sql_context": "CREATE TABLE solar_projects (id INT, state VARCHAR(255), name VARCHAR(255), completion_year INT); INSERT INTO solar_projects (id, state, name, completion_year) VALUES (1, 'California', 'Solar Project C', 2020), (2, 'California', 'Solar Project D', 2021);"}
{"sql_prompt": "What is the average rating of organic skincare products?", "sql": "SELECT AVG(review_rating) as avg_rating FROM product_reviews WHERE is_organic = TRUE;", "sql_context": "CREATE TABLE product_reviews (product_id INT, review_rating INT, review_text TEXT, is_organic BOOLEAN); INSERT INTO product_reviews (product_id, review_rating, review_text, is_organic) VALUES (1, 4, 'Great product!', TRUE), (2, 3, 'Average quality', FALSE), (3, 5, 'Love this!', TRUE), (4, 2, 'Poor experience', FALSE), (5, 5, 'Excellent!', TRUE);"}
{"sql_prompt": "What is the total number of car-sharing programs in Toronto?", "sql": "SELECT COUNT(*) as num_programs FROM car_sharing WHERE program_type IN ('Round-trip', 'One-way', 'Peer-to-peer', 'Corporate', 'Fractional');", "sql_context": "CREATE TABLE car_sharing (program_id INT, program_type VARCHAR(20)); INSERT INTO car_sharing (program_id, program_type) VALUES (1, 'Round-trip'), (2, 'One-way'), (3, 'Peer-to-peer'), (4, 'Corporate'), (5, 'Fractional');"}
{"sql_prompt": "What is the total number of participants in 'community_education' for 'Critically Endangered' species workshops?", "sql": "SELECT SUM(num_participants) FROM community_education_new_2 WHERE species_status = 'Critically Endangered';", "sql_context": "CREATE TABLE community_education_new_2(id INT, workshop_name VARCHAR(50), workshop_location VARCHAR(50), num_participants INT, species_status VARCHAR(50)); INSERT INTO community_education_new_2(id, workshop_name, workshop_location, num_participants, species_status) VALUES (1, 'Wildlife Conservation Basics', 'Africa', 50, 'Critically Endangered'), (2, 'Endangered Species Protection', 'Asia', 75, 'Endangered'), (3, 'Marine Life Education', 'Europe', 60, 'Vulnerable');"}
{"sql_prompt": "What is the total waste generation by each city in the state of California?", "sql": "SELECT c.name, SUM(w.amount) as total_waste FROM cities c JOIN waste_generation w ON c.id = w.city_id WHERE c.state = 'California' GROUP BY c.name;", "sql_context": "CREATE TABLE cities (id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO cities (id, name, state) VALUES (1, 'San Francisco', 'California'), (2, 'Los Angeles', 'California'); CREATE TABLE waste_generation (city_id INT, amount INT); INSERT INTO waste_generation (city_id, amount) VALUES (1, 50000), (1, 55000), (2, 70000), (2, 80000);"}
{"sql_prompt": "What is the recycling rate for metal in 2018 and 2019?", "sql": "SELECT recycling_rate FROM recycling_rates WHERE material = 'metal' AND (year = 2018 OR year = 2019);", "sql_context": "CREATE TABLE recycling_rates (id INT, material VARCHAR(20), year INT, recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates (id, material, year, recycling_rate) VALUES (1, 'plastic', 2017, 0.25), (2, 'plastic', 2018, 0.28), (3, 'plastic', 2019, 0.31), (4, 'paper', 2017, 0.60), (5, 'paper', 2018, 0.63), (6, 'paper', 2019, 0.66), (7, 'glass', 2017, 0.35), (8, 'glass', 2018, 0.37), (9, 'glass', 2019, 0.39), (10, 'metal', 2017, 0.45), (11, 'metal', 2018, 0.47), (12, 'metal', 2019, 0.49);"}
{"sql_prompt": "What is the average salary of workers in the manufacturing industry, grouped by their job role and location?", "sql": "SELECT location, job_role, AVG(salary) FROM salaries GROUP BY location, job_role;", "sql_context": "CREATE TABLE salaries (worker_id INT, job_role VARCHAR(255), location VARCHAR(255), salary FLOAT);"}
{"sql_prompt": "What is the total climate adaptation funding for Small Island Developing States (SIDS) in 2020, excluding projects in the Caribbean?", "sql": "SELECT SUM(amount) FROM climate_adaptation_funding WHERE year = 2020 AND region = 'SIDS' AND country NOT IN ('Barbados', 'Cuba', 'Jamaica', 'Haiti', 'Dominican Republic');", "sql_context": "CREATE TABLE climate_adaptation_funding (year INT, country VARCHAR(50), project_type VARCHAR(50), region VARCHAR(50), amount DECIMAL(10,2)); INSERT INTO climate_adaptation_funding (year, country, project_type, region, amount) VALUES (2020, 'Fiji', 'Coastal Protection', 'SIDS', 300000.00), (2020, 'Barbados', 'Water Management', 'Caribbean', 250000.00), (2020, 'Mauritius', 'Agriculture Adaptation', 'SIDS', 400000.00);"}
{"sql_prompt": "How many passengers were served by the 'Central' station on the 'Green Line'?", "sql": "SELECT passengers_served FROM passengers_by_station_and_line WHERE line_name = 'Green Line' AND station_name = 'Central';", "sql_context": "CREATE TABLE passengers_by_station_and_line (line_name VARCHAR(50), station_name VARCHAR(50), passengers_served INT); INSERT INTO passengers_by_station_and_line (line_name, station_name, passengers_served) VALUES ('Green Line', 'Central', 1500);"}
{"sql_prompt": "Find the top 5 cities with the highest revenue from concert ticket sales for artists from the Pop genre.", "sql": "SELECT city, SUM(revenue) as total_revenue FROM Concerts INNER JOIN Artists ON Concerts.id = Artists.id WHERE genre = 'Pop' GROUP BY city ORDER BY total_revenue DESC LIMIT 5;", "sql_context": "CREATE TABLE Concerts (id INT, city VARCHAR(255), revenue DECIMAL(10,2)); CREATE TABLE Artists (id INT, genre VARCHAR(255));"}
{"sql_prompt": "What is the average number of training hours for employees in the 'Marketing' department who have completed diversity and inclusion training?", "sql": "SELECT AVG(Hours_Spent) FROM Employee_Training WHERE Department = 'Marketing' AND Training_Type = 'Diversity and Inclusion';", "sql_context": "CREATE TABLE Employee_Training (Employee_ID INT, Employee_Name VARCHAR(50), Department VARCHAR(50), Training_Type VARCHAR(50), Hours_Spent DECIMAL(5,2)); INSERT INTO Employee_Training (Employee_ID, Employee_Name, Department, Training_Type, Hours_Spent) VALUES (6, 'Alex Johnson', 'Marketing', 'Diversity and Inclusion', 5.00), (7, 'Taylor Lee', 'Marketing', 'Diversity and Inclusion', 4.00), (8, 'Jasmine Brown', 'Marketing', 'Cybersecurity', 7.00);"}
{"sql_prompt": "What is the total waste generation in kg for each country in 2021?", "sql": "SELECT wg.country, SUM(wg.amount) as total_waste FROM waste_generation wg WHERE wg.year = 2021 GROUP BY wg.country;", "sql_context": "CREATE TABLE waste_generation (country VARCHAR(255), year INT, amount FLOAT); INSERT INTO waste_generation (country, year, amount) VALUES ('USA', 2021, 5000.5), ('Mexico', 2021, 3000.3), ('Canada', 2021, 4000.2);"}
{"sql_prompt": "What is the average revenue per artist by genre?", "sql": "SELECT g.genre_name, a.artist_name, AVG(s.revenue) AS avg_revenue FROM Artists a JOIN Sales s ON a.artist_id = s.artist_id JOIN Genres g ON s.genre_id = g.genre_id GROUP BY g.genre_name, a.artist_name;", "sql_context": "CREATE TABLE Artists (artist_id INT, artist_name VARCHAR(255)); INSERT INTO Artists (artist_id, artist_name) VALUES (1, 'Artist1'), (2, 'Artist2'), (3, 'Artist3'); CREATE TABLE Genres (genre_id INT, genre_name VARCHAR(255)); INSERT INTO Genres (genre_id, genre_name) VALUES (1, 'Pop'), (2, 'Rock'); CREATE TABLE Sales (sale_id INT, artist_id INT, genre_id INT, revenue DECIMAL(10, 2)); INSERT INTO Sales (sale_id, artist_id, genre_id, revenue) VALUES (1, 1, 1, 100), (2, 2, 2, 200), (3, 3, 1, 300);"}
{"sql_prompt": "What is the average severity of vulnerabilities for each family in the 'vulnerabilities' table?", "sql": "SELECT family, AVG(severity) FROM vulnerabilities GROUP BY family;", "sql_context": "CREATE TABLE vulnerabilities (id INT, name VARCHAR(255), family VARCHAR(255), severity VARCHAR(50), reported_date DATE);"}
{"sql_prompt": "Update 'Mike Johnson's data usage to 8 GB.", "sql": "UPDATE customers SET data_usage = 8.0 WHERE name = 'Mike Johnson';", "sql_context": "CREATE TABLE customers (id INT, name TEXT, isp TEXT, city TEXT, data_usage FLOAT); INSERT INTO customers (id, name, isp, city, data_usage) VALUES (1, 'John Doe', 'ABC Internet', 'Chicago', 12.5), (2, 'Jane Smith', 'DEF Internet', 'NYC', 4.0), (3, 'Mike Johnson', 'DEF Internet', 'NYC', 7.5);"}
{"sql_prompt": "What percentage of sustainable sourcing practices does each supplier follow, broken down by cuisine type?", "sql": "SELECT cuisine, supplier, 100.0 * AVG(CAST(is_sustainable AS DECIMAL)) AS percentage FROM sustainable_sourcing_practices GROUP BY cuisine, supplier;", "sql_context": "CREATE TABLE sustainable_sourcing_practices(supplier VARCHAR(255), cuisine VARCHAR(255), is_sustainable BOOLEAN); INSERT INTO sustainable_sourcing_practices VALUES ('Supplier X', 'Italian', true), ('Supplier Y', 'Mexican', false), ('Supplier Z', 'Italian', true);"}
{"sql_prompt": "What is the average billing rate for attorneys in the 'billing' table?", "sql": "SELECT AVG(rate) FROM billing;", "sql_context": "CREATE TABLE billing (attorney_id INT, client_id INT, hours FLOAT, rate FLOAT); INSERT INTO billing (attorney_id, client_id, hours, rate) VALUES (1, 101, 10, 300), (2, 102, 8, 350), (3, 103, 12, 250);"}
{"sql_prompt": "What is the total number of aircraft manufactured in Brazil between 2010 and 2020, excluding aircraft with a production year of 2015?", "sql": "SELECT COUNT(*) FROM aircraft_manufacturing WHERE manufacturer = 'Brazil' AND production_year BETWEEN 2010 AND 2020 AND production_year != 2015;", "sql_context": "CREATE TABLE aircraft_manufacturing (aircraft_id INT, manufacturer VARCHAR(50), production_year INT); INSERT INTO aircraft_manufacturing (aircraft_id, manufacturer, production_year) VALUES (1, 'Embraer', 2010), (2, 'Embraer', 2011), (3, 'Embraer', 2013), (4, 'Embraer', 2014), (5, 'Embraer', 2016);"}
{"sql_prompt": "What is the average price of natural makeup products sourced from sustainable suppliers?", "sql": "SELECT AVG(p.price) FROM products p WHERE p.product_type = 'Natural Makeup' AND p.sustainable_supplier = true;", "sql_context": "CREATE TABLE products (product_id INT, product_type VARCHAR(50), price DECIMAL(5,2), sustainable_supplier BOOLEAN); INSERT INTO products VALUES (1, 'Organic Skincare', 35.99, true), (2, 'Organic Skincare', 20.99, false), (3, 'Natural Makeup', 15.49, true), (4, 'Natural Makeup', 22.50, true), (5, 'Organic Skincare', 50.00, false), (6, 'Natural Makeup', 9.99, true), (7, 'Cruelty-Free', 12.35, false), (8, 'Organic Skincare', 14.55, true), (9, 'Cruelty-Free', 18.99, false), (10, 'Cruelty-Free', 25.00, true);"}
{"sql_prompt": "What is the average hourly wage for construction workers in California?", "sql": "SELECT AVG(Hourly_Wage) FROM CA_Construction_Labor;", "sql_context": "CREATE TABLE Construction_Labor (Employee_ID INT, Employee_Name VARCHAR(100), Skill VARCHAR(50), Hourly_Wage FLOAT, City VARCHAR(50), State CHAR(2), Zipcode INT); CREATE VIEW CA_Construction_Labor AS SELECT * FROM Construction_Labor WHERE State = 'CA';"}
{"sql_prompt": "Insert data into 'Courses' table with values '1001', 'Introduction to Programming', 'Mr. Smith'", "sql": "INSERT INTO Courses (CourseId, CourseName, Instructor) VALUES (1001, 'Introduction to Programming', 'Mr. Smith');", "sql_context": "CREATE TABLE Students (StudentId INT, Name VARCHAR(50), Age INT); INSERT INTO Students (StudentId, Name, Age) VALUES (1001, 'John Doe', 16); CREATE VIEW StudentNames AS SELECT * FROM Students; CREATE TABLE Courses (CourseId INT, CourseName VARCHAR(50), Instructor VARCHAR(50));"}
{"sql_prompt": "How many articles were published by 'Acme News Agency' in 'Africa' and 'Asia'?", "sql": "SELECT COUNT(articles.id) FROM articles INNER JOIN news_agencies ON articles.agency_id = news_agencies.id WHERE news_agencies.name = 'Acme News Agency' AND articles.location IN ('Africa', 'Asia');", "sql_context": "CREATE TABLE news_agencies (id INT, name TEXT); INSERT INTO news_agencies VALUES (1, 'Acme News Agency'); INSERT INTO news_agencies VALUES (2, 'Global News');   CREATE TABLE articles (id INT, agency_id INT, location TEXT); INSERT INTO articles VALUES (1, 1, 'Africa'); INSERT INTO articles VALUES (2, 1, 'Asia'); INSERT INTO articles VALUES (3, 2, 'Oceania');"}
{"sql_prompt": "Calculate the number of publications in each journal", "sql": "SELECT journal, COUNT(*) FROM publications GROUP BY journal;", "sql_context": "CREATE TABLE publications (id INT, title VARCHAR(50), journal VARCHAR(30)); INSERT INTO publications (id, title, journal) VALUES (1, 'A Study on Renewable Energy', 'Journal of Engineering'), (2, 'The Impact of Climate Change', 'Journal of Natural Sciences');"}
{"sql_prompt": "How many polar bear sightings were recorded in Svalbard in 2020?", "sql": "SELECT sightings FROM PolarBearSightings WHERE location = 'Svalbard' AND year = 2020;", "sql_context": "CREATE TABLE PolarBearSightings (location VARCHAR(50), year INT, sightings INT); INSERT INTO PolarBearSightings (location, year, sightings) VALUES ('Svalbard', 2020, 350);"}
{"sql_prompt": "Update the type for all records in the Ships table where the type is 'Cargo' to 'Transport'.", "sql": "UPDATE ships SET type = 'Transport' WHERE type = 'Cargo';", "sql_context": "CREATE TABLE ships (name VARCHAR(255), year_decommissioned INT, type VARCHAR(255)); INSERT INTO ships (name, year_decommissioned, type) VALUES ('Ship 1', 2005, 'Cargo'), ('Ship 2', 2015, 'Passenger'), ('Ship 3', 2012, 'Fishing'), ('Ship 4', 2010, 'Exploration');"}
{"sql_prompt": "How many patients with PTSD were treated in Germany in the last 6 months?", "sql": "SELECT COUNT(*) FROM patients WHERE has_ptsd = TRUE AND treatment_date >= '2021-07-01' AND country = 'Germany';", "sql_context": "CREATE TABLE patients (patient_id INT, has_ptsd BOOLEAN, treatment_date DATE, country VARCHAR(50)); INSERT INTO patients (patient_id, has_ptsd, treatment_date, country) VALUES (1, TRUE, '2022-01-01', 'Germany'), (2, FALSE, '2021-12-25', 'Germany'), (3, TRUE, '2022-03-15', 'Canada');"}
{"sql_prompt": "Determine the maximum number of cybersecurity incidents in a single month in the Asia-Pacific region.", "sql": "SELECT MAX(incident_count) FROM monthly_incidents WHERE region = 'Asia-Pacific';", "sql_context": "CREATE TABLE monthly_incidents (id INT, region VARCHAR(50), incident_month DATE, incident_count INT); INSERT INTO monthly_incidents (id, region, incident_month, incident_count) VALUES (1, 'Asia-Pacific', '2021-03-01', 300); INSERT INTO monthly_incidents (id, region, incident_month, incident_count) VALUES (2, 'Europe', '2021-02-01', 250);"}
{"sql_prompt": "List pollution levels with a sudden increase.", "sql": "SELECT Location, Pollutant, Level, LEAD(Level) OVER (PARTITION BY Location ORDER BY MeasurementDate) as NextLevel FROM PollutionTrend;", "sql_context": "CREATE TABLE PollutionTrend (ID INT, Location VARCHAR(50), Pollutant VARCHAR(50), Level INT, MeasurementDate DATE); INSERT INTO PollutionTrend (ID, Location, Pollutant, Level, MeasurementDate) VALUES (1, 'NewYork', 'Mercury', 5, '2020-01-01'), (2, 'California', 'Lead', 10, '2020-01-02'), (3, 'Texas', 'CarbonMonoxide', 15, '2020-01-03'), (4, 'NewYork', 'Mercury', 10, '2020-01-04');"}
{"sql_prompt": "List all suppliers with ethical labor certifications in Europe.", "sql": "SELECT * FROM suppliers WHERE country = 'Europe' AND ethical_certification IS NOT NULL;", "sql_context": "CREATE TABLE suppliers (supplier_id INT, name VARCHAR(255), country VARCHAR(50), ethical_certification VARCHAR(50)); INSERT INTO suppliers (supplier_id, name, country, ethical_certification) VALUES (1, 'Green Supplies', 'Germany', 'Fair Trade'), (2, 'Eco Goods', 'France', NULL);"}
{"sql_prompt": "What is the distribution of CVE counts for systems in the ThreatIntel table?", "sql": "SELECT CVECount, COUNT(*) FROM ThreatIntel GROUP BY CVECount;", "sql_context": "CREATE TABLE ThreatIntel (systemName VARCHAR(50), CVECount INT); INSERT INTO ThreatIntel (systemName, CVECount) VALUES ('SystemA', 3), ('SystemB', 5), ('SystemC', 7), ('SystemD', 2), ('SystemE', 6);"}
{"sql_prompt": "Which sustainable material types are used by the top 3 clothing brands, and how many items of each type do they produce?", "sql": "SELECT material_type, SUM(items_produced) as total_items FROM sustainable_materials WHERE brand IN ('Brand F', 'Brand G', 'Brand H') GROUP BY material_type ORDER BY total_items DESC LIMIT 3;", "sql_context": "CREATE TABLE sustainable_materials (brand VARCHAR(50), material_type VARCHAR(50), items_produced INT); INSERT INTO sustainable_materials (brand, material_type, items_produced) VALUES ('Brand F', 'Organic Cotton', 50000), ('Brand F', 'Recycled Polyester', 30000), ('Brand F', 'Hemp', 20000), ('Brand G', 'Organic Cotton', 40000), ('Brand G', 'Tencel', 35000), ('Brand G', 'Recycled Polyester', 25000), ('Brand H', 'Organic Cotton', 60000), ('Brand H', 'Tencel', 45000), ('Brand H', 'Hemp', 30000);"}
{"sql_prompt": "Update the 'victims' table: change the last_name to 'Johnson' for records with victim_id 2001, 2002", "sql": "UPDATE victims SET last_name = 'Johnson' WHERE victim_id IN (2001, 2002);", "sql_context": "CREATE TABLE victims (victim_id INT, first_name VARCHAR(20), last_name VARCHAR(20)); INSERT INTO victims (victim_id, first_name, last_name) VALUES (2001, 'Victoria', 'Martin'), (2002, 'Victor', 'Martin'), (2003, 'Tom', 'Brown');"}
{"sql_prompt": "What is the total cargo weight for all vessels in the Caribbean, sorted by vessel type?", "sql": "SELECT type, SUM(cargo_weight) FROM vessel_cargo WHERE location = 'Caribbean' GROUP BY type ORDER BY SUM(cargo_weight) DESC;", "sql_context": "CREATE TABLE vessel_cargo (id INT PRIMARY KEY, vessel_name VARCHAR(50), type VARCHAR(50), cargo_weight INT, location VARCHAR(50), timestamp DATETIME); INSERT INTO vessel_cargo (id, vessel_name, type, cargo_weight, location, timestamp) VALUES (1, 'VesselD', 'Cargo', 10000, 'Caribbean', '2021-10-01 10:00:00'), (2, 'VesselE', 'Tanker', 15000, 'Caribbean', '2021-10-01 11:00:00');"}
{"sql_prompt": "What is the average sum insured for policies in the Latin America region", "sql": "SELECT AVG(sum_insured) FROM policy_info WHERE region = 'Latin America';", "sql_context": "CREATE TABLE policy_info (policy_id INT, premium FLOAT, sum_insured INT, region VARCHAR(50)); INSERT INTO policy_info (policy_id, premium, sum_insured, region) VALUES (1, 1200.50, 60000, 'North America'), (2, 2500.00, 70000, 'Europe'), (3, 1800.00, 90000, 'Asia'), (4, 1500.00, 40000, 'North America'), (5, 1700.00, 50000, 'Latin America');"}
{"sql_prompt": "Update the species column for all entries in the trees table where the diameter is between 30 and 60 inches to 'Large Tree'", "sql": "UPDATE trees SET species = 'Large Tree' WHERE diameter BETWEEN 30 AND 60;", "sql_context": "CREATE TABLE trees (id INT PRIMARY KEY, species VARCHAR(255), diameter FLOAT);"}
{"sql_prompt": "What is the sum of transaction amounts for retail customers in the Europe region?", "sql": "SELECT SUM(transaction_amount) FROM transactions WHERE customer_type = 'retail' AND region = 'Europe';", "sql_context": "CREATE TABLE transactions (id INT, customer_type VARCHAR(20), region VARCHAR(20), transaction_amount DECIMAL(10, 2)); INSERT INTO transactions (id, customer_type, region, transaction_amount) VALUES (1, 'retail', 'Latin America', 100.00), (2, 'wholesale', 'North America', 500.00), (3, 'retail', 'Europe', 200.00), (4, 'wholesale', 'Asia-Pacific', 300.00);"}
{"sql_prompt": "What is the total number of hours spent on professional development by teachers in each country?", "sql": "SELECT country, SUM(hours_spent) as total_hours FROM professional_development_hours GROUP BY country;", "sql_context": "CREATE TABLE professional_development_hours (teacher_id INT, country TEXT, hours_spent INT); INSERT INTO professional_development_hours (teacher_id, country, hours_spent) VALUES (1, 'USA', 10), (2, 'Canada', 15), (3, 'Mexico', 20), (4, 'Brazil', 25), (5, 'Argentina', 30);"}
{"sql_prompt": "Who is the contact person for the AI for Human Rights project?", "sql": "SELECT contact_person FROM ai_for_human_rights WHERE project_name = 'AI for Human Rights';", "sql_context": "CREATE TABLE ai_for_human_rights (id INT, project_name VARCHAR(255), contact_person VARCHAR(255)); INSERT INTO ai_for_human_rights (id, project_name, contact_person) VALUES (1, 'AI for Human Rights', 'Jane Doe'), (2, 'AI for Environmental Justice', 'John Smith');"}
{"sql_prompt": "How many flu shots were administered to patients over 65 in Texas?", "sql": "SELECT COUNT(*) FROM flu_shots f INNER JOIN patients p ON f.patient_id = p.patient_id WHERE p.age > 65 AND f.state = 'Texas';", "sql_context": "CREATE TABLE flu_shots (patient_id INT, state VARCHAR(255)); CREATE TABLE patients (patient_id INT, age INT); INSERT INTO flu_shots (patient_id, state) VALUES (1, 'Texas'), (2, 'Texas'); INSERT INTO patients (patient_id, age) VALUES (1, 70), (2, 60);"}
{"sql_prompt": "What is the average installed capacity (in MW) of wind power projects in the country of Germany?", "sql": "SELECT AVG(installed_capacity) FROM country_wind_projects WHERE country = 'Germany';", "sql_context": "CREATE TABLE country_wind_projects (project_id INT, project_name VARCHAR(255), country VARCHAR(255), installed_capacity FLOAT);"}
{"sql_prompt": "Update the last_maintenance_date to '2021-12-11' for equipment_id 1 in the 'military_equipment' table", "sql": "UPDATE military_equipment SET last_maintenance_date = '2021-12-11' WHERE equipment_id = 1;", "sql_context": "CREATE TABLE military_equipment (equipment_id INT, type VARCHAR(255), last_maintenance_date DATE); INSERT INTO military_equipment (equipment_id, type, last_maintenance_date) VALUES (1, 'Tank', '2021-05-12'), (2, 'Helicopter', '2020-09-25'), (3, 'Drone', '2022-03-28');"}
{"sql_prompt": "What is the total number of employees in ethical manufacturing companies in Germany?", "sql": "SELECT SUM(employees) FROM companies WHERE country = 'Germany' AND ethical = 1;", "sql_context": "CREATE TABLE companies (id INT, name VARCHAR(50), country VARCHAR(50), ethical INT, employees INT);"}
{"sql_prompt": "List the number of substance abuse providers in each zip code, for zip codes with a population greater than 10,000.", "sql": "SELECT h.zip, COUNT(h.id) FROM substance_abuse_providers h JOIN zip_codes c ON h.zip = c.zip WHERE c.population > 10000 GROUP BY h.zip;", "sql_context": "CREATE TABLE substance_abuse_providers (id INT, zip VARCHAR(10), provider_type VARCHAR(20)); INSERT INTO substance_abuse_providers (id, zip, provider_type) VALUES (1, '98101', 'Addiction Counselor'); CREATE TABLE zip_codes (zip VARCHAR(10), state VARCHAR(2), population INT); INSERT INTO zip_codes (zip, state, population) VALUES ('98101', 'WA', 12000);"}
{"sql_prompt": "What is the running total of Europium production for the top 3 producers in 2021?", "sql": "SELECT producer, SUM(europium_prod) OVER (PARTITION BY producer ORDER BY europium_prod) AS running_total FROM europium_production WHERE year = 2021 AND producer IN ('China', 'USA', 'Australia') ORDER BY europium_prod;", "sql_context": "CREATE TABLE europium_production (id INT, year INT, producer VARCHAR(255), europium_prod FLOAT); INSERT INTO europium_production (id, year, producer, europium_prod) VALUES (1, 2021, 'China', 123.4), (2, 2021, 'USA', 234.5), (3, 2021, 'Australia', 345.6), (4, 2021, 'Myanmar', 456.7), (5, 2021, 'India', 567.8);"}
{"sql_prompt": "How many civil cases were handled by attorneys from the 'Downtown' office location?", "sql": "SELECT COUNT(*) FROM Cases JOIN Attorneys ON Cases.AttorneyID = Attorneys.AttorneyID WHERE OfficeLocation = 'Downtown' AND CaseType = 'Civil';", "sql_context": "CREATE TABLE Attorneys (AttorneyID INT, OfficeLocation VARCHAR(255)); INSERT INTO Attorneys (AttorneyID, OfficeLocation) VALUES (1, 'Downtown'), (2, 'Uptown'), (3, 'Downtown'), (4, 'Suburbs'); CREATE TABLE Cases (CaseID INT, AttorneyID INT, CaseType VARCHAR(255)); INSERT INTO Cases (CaseID, AttorneyID, CaseType) VALUES (1, 1, 'Civil'), (2, 1, 'Criminal'), (3, 2, 'Civil'), (4, 3, 'Civil'), (5, 4, 'Criminal');"}
{"sql_prompt": "What is the average size of habitats for endangered animal species?", "sql": "SELECT animals.status, AVG(habitats.size) AS avg_size FROM animals INNER JOIN habitats ON animals.id = habitats.animal_id WHERE animals.status = 'Endangered' GROUP BY animals.status;", "sql_context": "CREATE TABLE animals (id INT PRIMARY KEY, name VARCHAR(50), species VARCHAR(50), population INT, status VARCHAR(50)); CREATE TABLE habitats (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), size FLOAT, animal_id INT);"}
{"sql_prompt": "Identify the maximum depth a marine species can live at?", "sql": "SELECT MAX(depth) FROM species;", "sql_context": "CREATE TABLE species (id INT, name VARCHAR(255), habitat VARCHAR(255), depth FLOAT); INSERT INTO species (id, name, habitat, depth) VALUES (1, 'Clownfish', 'Coral Reef', 20.0); INSERT INTO species (id, name, habitat, depth) VALUES (2, 'Blue Whale', 'Open Ocean', 2000.0); INSERT INTO species (id, name, habitat, depth) VALUES (3, 'Sea Otter', 'Kelp Forest', 50.0);"}
{"sql_prompt": "What are the names of virtual tours in Paris with a rating above 4.5?", "sql": "SELECT name FROM tours WHERE city = 'Paris' AND rating > 4.5;", "sql_context": "CREATE TABLE tours (id INT, name TEXT, city TEXT, rating FLOAT); INSERT INTO tours (id, name, city, rating) VALUES (1, 'Paris Tour 1', 'Paris', 4.7), (2, 'Paris Tour 2', 'Paris', 4.3);"}
{"sql_prompt": "List the unique 'Workout' types offered at each studio.", "sql": "SELECT DISTINCT studio, workout FROM Workouts;", "sql_context": "CREATE TABLE Studios (studio VARCHAR(50)); INSERT INTO Studios (studio) VALUES ('Boston'), ('Seattle'), ('New York'); CREATE TABLE Workouts (studio VARCHAR(50), workout VARCHAR(50)); INSERT INTO Workouts (studio, workout) VALUES ('Boston', 'Yoga'), ('Boston', 'Pilates'), ('Seattle', 'Cycling'), ('Seattle', 'Yoga'), ('New York', 'Cycling'), ('New York', 'Boxing');"}
{"sql_prompt": "List the names of all graduate students who have not published an academic paper.", "sql": "SELECT name FROM student WHERE id NOT IN (SELECT student_id FROM paper);", "sql_context": "CREATE TABLE paper (id INT, student_id INT); INSERT INTO paper (id, student_id) VALUES (1, 1), (2, 2), (3, 3); CREATE TABLE student (id INT, name TEXT); INSERT INTO student (id, name) VALUES (1, 'Alice'), (2, 'Bob'), (3, 'Charlie'), (4, 'Diana');"}
{"sql_prompt": "List all startups founded in 2010", "sql": "SELECT name FROM startup_founding WHERE founding_date BETWEEN '2010-01-01' AND '2010-12-31';", "sql_context": "CREATE TABLE startup_founding (id INT PRIMARY KEY, name VARCHAR(255), founding_date DATE);"}
{"sql_prompt": "Delete records of employees who left before 2019-01-01 from the \"employee_movement\" table", "sql": "DELETE FROM employee_movement WHERE movement_type = 'left' AND movement_date < '2019-01-01';", "sql_context": "CREATE TABLE employee_movement (id INT PRIMARY KEY, employee_id INT, movement_date DATE, movement_type VARCHAR(10)); INSERT INTO employee_movement (id, employee_id, movement_date, movement_type) VALUES (1, 1001, '2018-01-01', 'left'), (2, 1002, '2018-06-15', 'left'), (3, 1003, '2019-03-20', 'joined'), (4, 1001, '2020-01-01', 'joined');"}
{"sql_prompt": "Update the 'sites' table to correct the start date of the 'Tutankhamun's Tomb'", "sql": "UPDATE sites SET start_date = '1922-11-04' WHERE name = 'Tutankhamun''s Tomb';", "sql_context": "CREATE TABLE sites (id INT PRIMARY KEY, name TEXT, location TEXT, start_date DATE);"}
{"sql_prompt": "Find the percentage of visitors that engaged with online exhibitions from North America and Europe combined.", "sql": "SELECT (COUNT(DISTINCT CASE WHEN country IN ('USA', 'Canada', 'France', 'UK') THEN Online_Interaction.user_id END) * 100.0 / COUNT(DISTINCT Online_Interaction.user_id)) as percentage FROM Online_Interaction;", "sql_context": "CREATE TABLE Online_Interaction (id INT, user_id INT, interaction_date DATE, country VARCHAR(50)); INSERT INTO Online_Interaction (id, user_id, interaction_date, country) VALUES (1, 1, '2022-05-01', 'USA'), (2, 3, '2022-05-15', 'Canada'), (3, 5, '2022-04-20', 'France'), (4, 7, '2022-03-25', 'UK');"}
{"sql_prompt": "What are the names of all spacecraft that were launched by both NASA and SpaceX?", "sql": "SELECT s.name FROM Spacecraft s WHERE s.manufacturer IN ('NASA', 'SpaceX') GROUP BY s.name HAVING COUNT(DISTINCT s.manufacturer) = 2;", "sql_context": "CREATE TABLE Spacecraft (id INT, name VARCHAR(50), manufacturer VARCHAR(50), launch_date DATE); INSERT INTO Spacecraft (id, name, manufacturer, launch_date) VALUES (1, 'Voyager 1', 'NASA', '1977-09-05'), (2, 'Dragon 1', 'SpaceX', '2010-12-08');"}
{"sql_prompt": "What are the names and quantities of all chemical substances produced in the Asia region with a safety rating greater than 7?", "sql": "SELECT chemical, quantity FROM chemical_production WHERE region = 'Asia' AND chemical IN (SELECT chemical FROM chemical_safety WHERE safety_rating > 7);", "sql_context": "CREATE TABLE chemical_production (region VARCHAR(20), chemical VARCHAR(30), quantity INT); INSERT INTO chemical_production (region, chemical, quantity) VALUES ('Asia', 'Ethanol', 500), ('Asia', 'Propanol', 800); CREATE TABLE chemical_safety (chemical VARCHAR(30), safety_rating INT); INSERT INTO chemical_safety (chemical, safety_rating) VALUES ('Ethanol', 8), ('Propanol', 6);"}
{"sql_prompt": "What is the sum of the populations of the animals in the 'habitat_preservation' table that are not endangered?", "sql": "SELECT SUM(population) FROM habitat_preservation WHERE endangered_status != 'Endangered';", "sql_context": "CREATE TABLE habitat_preservation (id INT, animal_name VARCHAR(50), population INT, endangered_status VARCHAR(50));"}
{"sql_prompt": "What is the maximum number of military equipment sales for a single defense contractor?", "sql": "SELECT MAX(max_sales) as max_num_sales FROM max_sales;", "sql_context": "CREATE TABLE max_sales (contractor_id INT, max_sales INT); INSERT INTO max_sales (contractor_id, max_sales) VALUES (1, 12), (2, 15), (3, 18);"}
{"sql_prompt": "Find the number of bikes available at each station", "sql": "SELECT station_name, num_bikes_available FROM station;", "sql_context": "CREATE TABLE station (station_id INT, station_name TEXT, num_bikes_available INT);"}
{"sql_prompt": "What is the number of employees who identify as female or non-binary in the 'Employees' table?", "sql": "SELECT COUNT(*) FROM Employees WHERE gender IN ('Female', 'Non-binary');", "sql_context": "CREATE TABLE Employees (id INT, name TEXT, gender TEXT);INSERT INTO Employees (id, name, gender) VALUES (1, 'John Smith', 'Male'), (2, 'Jane Doe', 'Female'), (3, 'Mary Johnson', 'Female'), (4, 'James Brown', 'Non-binary');"}
{"sql_prompt": "Count the number of drug approvals for each quarter in 2021.", "sql": "SELECT approval_quarter, COUNT(*) as drugs_approved FROM drug_approval WHERE year = 2021 AND approved = true GROUP BY approval_quarter;", "sql_context": "CREATE TABLE drug_approval (drug_name TEXT, approval_quarter TEXT, year INTEGER, approved BOOLEAN); INSERT INTO drug_approval (drug_name, approval_quarter, year, approved) VALUES ('DrugT', 'Q1', 2021, true), ('DrugT', 'Q2', 2021, true), ('DrugU', 'Q3', 2021, true), ('DrugV', 'Q4', 2021, true), ('DrugW', 'Q1', 2021, true), ('DrugX', 'Q2', 2021, true);"}
{"sql_prompt": "Show the number of whale sightings in the Arctic ocean.", "sql": "SELECT species, SUM(sighting_count) FROM whale_sightings WHERE ocean = 'Arctic Ocean' AND species = 'Blue Whale' GROUP BY species;", "sql_context": "CREATE TABLE whale_sightings (species TEXT, ocean TEXT, sighting_count INTEGER); INSERT INTO whale_sightings (species, ocean, sighting_count) VALUES ('Blue Whale', 'Arctic Ocean', 25), ('Bowhead Whale', 'Arctic Ocean', 30), ('Beluga Whale', 'Arctic Ocean', 45);"}
{"sql_prompt": "What is the average age of female turtles in the \"turtles\" table?", "sql": "SELECT AVG(age) FROM turtles WHERE gender = 'Female' AND species = 'Turtle';", "sql_context": "CREATE TABLE turtles (id INT, name VARCHAR(20), species VARCHAR(20), age INT, gender VARCHAR(10)); INSERT INTO turtles (id, name, species, age, gender) VALUES (1, 'Shelly', 'Turtle', 40, 'Female'); INSERT INTO turtles (id, name, species, age, gender) VALUES (2, 'Turbo', 'Turtle', 30, 'Male');"}
{"sql_prompt": "What is the average financial wellbeing score of customers who have a financial capability score above 85?", "sql": "SELECT AVG(financial_wellbeing_score) as avg_score FROM customers WHERE financial_capability_score > 85;", "sql_context": "CREATE TABLE customers (id INT, financial_capability_score INT, financial_wellbeing_score INT); INSERT INTO customers (id, financial_capability_score, financial_wellbeing_score) VALUES (1, 90, 75), (2, 80, 70), (3, 85, 80), (4, 95, 85);"}
{"sql_prompt": "Update the fare for 'Subway' rides", "sql": "UPDATE fares SET fare = 1.50 WHERE ride_type = 'Subway';", "sql_context": "CREATE TABLE fares (ride_type TEXT, fare DECIMAL(5,2));"}
{"sql_prompt": "What is the most recent indigenous knowledge entry for the community with the ID 2?", "sql": "SELECT i.name, i.knowledge, i.community_id, i.date FROM indigenous_knowledge i WHERE i.community_id = 2 ORDER BY i.date DESC LIMIT 1;", "sql_context": "CREATE TABLE indigenous_knowledge (id INT PRIMARY KEY, name VARCHAR(255), knowledge VARCHAR(255), community_id INT, date DATE); INSERT INTO indigenous_knowledge (id, name, knowledge, community_id, date) VALUES (1, 'Knowledge A', 'Sea ice conditions', 1, '2022-02-01'), (2, 'Knowledge B', 'Animal migration patterns', 2, '2022-03-15'), (3, 'Knowledge C', 'Plant life cycles', 1, '2022-04-01');"}
{"sql_prompt": "What is the percentage of international tourists visiting Japan that are from Asian countries?", "sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM japan_tourism)) AS percentage FROM japan_tourism WHERE country LIKE '%Asia%';", "sql_context": "CREATE TABLE japan_tourism (name VARCHAR(255), country VARCHAR(255), year INT, tourists INT); INSERT INTO japan_tourism (name, country, year, tourists) VALUES ('Tokyo', 'China', 2015, 2020000), ('Osaka', 'South Korea', 2015, 1110000);"}
{"sql_prompt": "Calculate the average recycling rate in the European Union over the past 5 years.", "sql": "SELECT AVG(rate) FROM RecyclingRatesEU WHERE country IN ('Germany', 'France');", "sql_context": "CREATE TABLE RecyclingRatesEU (country VARCHAR(50), year INT, rate DECIMAL(5,2)); INSERT INTO RecyclingRatesEU (country, year, rate) VALUES ('Germany', 2017, 60.5), ('Germany', 2018, 61.2), ('Germany', 2019, 62.1), ('France', 2017, 55.4), ('France', 2018, 56.2), ('France', 2019, 57.1);"}
{"sql_prompt": "What is the maximum dissolved oxygen level in the Indian Ocean by region?", "sql": "SELECT o.region, MAX(d.value) FROM dissolved_oxygen d JOIN indian_ocean_regions o ON d.region_id = o.id GROUP BY o.region;", "sql_context": "CREATE TABLE indian_ocean_regions (region VARCHAR(255), id INTEGER); INSERT INTO indian_ocean_regions (region, id) VALUES ('Northwest Indian Ocean', 1), ('Southeast Indian Ocean', 2); CREATE TABLE dissolved_oxygen (region_id INTEGER, value FLOAT);"}
{"sql_prompt": "What's the avg. donation amount for each org in '2019'?", "sql": "SELECT o.OrgName, AVG(od.DonationAmount) FROM OrganizationDonations od INNER JOIN Organizations o ON od.OrgID = o.OrgID WHERE od.DonationYear = 2019 GROUP BY o.OrgName;", "sql_context": "CREATE TABLE OrganizationDonations (OrgID INT, DonationAmount INT, DonationYear INT); CREATE TABLE Organizations (OrgID INT, OrgName TEXT);"}
{"sql_prompt": "What is the average monthly electricity consumption for residential buildings in Texas?", "sql": "SELECT AVG(consumption) FROM electricity_consumption WHERE building_type = 'Residential' AND state = 'Texas';", "sql_context": "CREATE TABLE electricity_consumption (building_type VARCHAR(50), state VARCHAR(50), year INT, month INT, consumption FLOAT); INSERT INTO electricity_consumption (building_type, state, year, month, consumption) VALUES ('Residential', 'Texas', 2020, 1, 1000), ('Residential', 'Texas', 2020, 2, 1200), ('Residential', 'Texas', 2020, 3, 1100), ('Residential', 'Texas', 2020, 4, 1300), ('Residential', 'Texas', 2020, 5, 1400), ('Residential', 'Texas', 2020, 6, 1200), ('Residential', 'Texas', 2020, 7, 1300), ('Residential', 'Texas', 2020, 8, 1500), ('Residential', 'Texas', 2020, 9, 1400), ('Residential', 'Texas', 2020, 10, 1100), ('Residential', 'Texas', 2020, 11, 900), ('Residential', 'Texas', 2020, 12, 800);"}
{"sql_prompt": "Insert a new claim record into the claims table for policy number 7 with a claim amount of 2000 and claim date of '2019-05-15'", "sql": "INSERT INTO claims (claim_number, policy_number, claim_amount, claim_date) VALUES (1, 7, 2000, '2019-05-15');", "sql_context": "CREATE TABLE claims (claim_number INT, policy_number INT, claim_amount INT, claim_date DATE);"}
{"sql_prompt": "What was the total budget for climate communication projects in '2018' from the 'communication_projects' table?", "sql": "SELECT SUM(budget) FROM communication_projects WHERE start_date <= '2018-12-31' AND end_date >= '2018-01-01';", "sql_context": "CREATE TABLE communication_projects (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255), description TEXT, start_date DATE, end_date DATE, budget FLOAT); INSERT INTO communication_projects (id, name, location, description, start_date, end_date, budget) VALUES (1, 'Public Awareness Campaign', 'New York', 'Raising awareness of climate change', '2018-01-01', '2018-12-31', 200000), (2, 'Climate Education Workshop', 'Nairobi', 'Educating community members on climate change', '2018-06-01', '2018-06-30', 150000);"}
{"sql_prompt": "Update all medical response times to 8 minutes in 'Dallas'", "sql": "UPDATE emergency_response SET response_time = 8 WHERE emergency_type = 'medical' AND location = 'Dallas';", "sql_context": "CREATE TABLE emergency_response(id INT, emergency_type VARCHAR(20), location VARCHAR(20), response_time INT);"}
{"sql_prompt": "What are the names of all wells in 'Venezuela'?", "sql": "SELECT well_name FROM wells WHERE country = 'Venezuela';", "sql_context": "CREATE TABLE wells (well_id INT, well_name VARCHAR(50), country VARCHAR(50)); INSERT INTO wells (well_id, well_name, country) VALUES (1, 'WellA', 'Venezuela'), (2, 'WellB', 'Venezuela'), (3, 'WellC', 'Brazil');"}
{"sql_prompt": "Determine the total revenue for a particular dish across all restaurants.", "sql": "SELECT SUM(i.quantity * m.price) as revenue FROM inventory i JOIN orders o ON i.item_id = o.item_id JOIN menu_items m ON i.item_id = m.item_id WHERE m.name = 'Quinoa Salad';", "sql_context": "CREATE TABLE inventory (item_id INT, quantity INT, unit_price DECIMAL(5,2)); INSERT INTO inventory (item_id, quantity, unit_price) VALUES (1, 10, 12.99), (2, 20, 7.50), (3, 30, 9.99), (4, 40, 15.49), (5, 50, 8.99); CREATE TABLE orders (order_id INT, item_id INT, order_date DATE, restaurant_id INT); INSERT INTO orders (order_id, item_id, order_date, restaurant_id) VALUES (1, 1, '2022-04-01', 2), (2, 3, '2022-04-02', 2), (3, 2, '2022-04-03', 1), (4, 4, '2022-04-04', 1), (5, 5, '2022-04-05', 2); CREATE TABLE menu_items (item_id INT, name TEXT, is_vegan BOOLEAN, is_vegetarian BOOLEAN, price DECIMAL(5,2)); INSERT INTO menu_items (item_id, name, is_vegan, is_vegetarian, price) VALUES (1, 'Quinoa Salad', true, true, 12.99), (2, 'Beef Burger', false, false, 7.50), (3, 'Chickpea Curry', true, true, 9.99), (4, 'Cheesecake', false, false, 15.49), (5, 'Veggie Pizza', false, true, 8.99); CREATE TABLE restaurants (restaurant_id INT, name TEXT, region TEXT); INSERT INTO restaurants (restaurant_id, name, region) VALUES (1, 'Big Burger', 'East'), (2, 'Veggies R Us', 'Midwest'), (3, 'Tasty Bites', 'West');"}
{"sql_prompt": "What is the average donation amount from Latin America?", "sql": "SELECT AVG(AmountDonated) as AverageDonation FROM Donors WHERE Country IN ('Argentina', 'Bolivia', 'Brazil', 'Chile', 'Colombia', 'Costa Rica', 'Cuba', 'Ecuador', 'El Salvador', 'Guatemala', 'Honduras', 'Mexico', 'Nicaragua', 'Panama', 'Paraguay', 'Peru', 'Uruguay', 'Venezuela');", "sql_context": "CREATE TABLE Donors (DonorID int, DonorName varchar(100), Country varchar(50), DonationDate date, AmountDonated decimal(10,2)); INSERT INTO Donors (DonorID, DonorName, Country, DonationDate, AmountDonated) VALUES (1, 'Juan P\u00e9rez', 'Mexico', '2022-01-01', 500.00), (2, 'Mar\u00eda Rodr\u00edguez', 'Brazil', '2022-02-01', 750.00);"}
{"sql_prompt": "What is the total area of land (in hectares) used for organic farming in each country?", "sql": "SELECT country, SUM(land_area) FROM organic_farms GROUP BY country;", "sql_context": "CREATE TABLE organic_farms (id INT, farm_name VARCHAR(255), country VARCHAR(255), land_area INT);"}
{"sql_prompt": "What is the maximum waste generation rate in North America?", "sql": "SELECT MAX(generation_rate) FROM WasteGeneration WHERE country IN ('USA', 'Canada', 'Mexico');", "sql_context": "CREATE TABLE WasteGeneration (country VARCHAR(50), generation_rate FLOAT); INSERT INTO WasteGeneration (country, generation_rate) VALUES ('USA', 2.5), ('Canada', 1.3), ('Mexico', 1.1);"}
{"sql_prompt": "Which organizations have a location in 'India' and are of type 'Non-profit'?", "sql": "SELECT organizations.name, organizations.type, organizations.location FROM organizations WHERE organizations.location = 'India' AND organizations.type = 'Non-profit';", "sql_context": "CREATE TABLE organizations (id INT PRIMARY KEY, name VARCHAR(50), type VARCHAR(50), location VARCHAR(50)); INSERT INTO organizations (id, name, type, location) VALUES (1, 'Greenpeace', 'Non-profit', 'India'); INSERT INTO organizations (id, name, type, location) VALUES (2, 'The Climate Group', 'Non-profit', 'UK'); INSERT INTO organizations (id, name, type, location) VALUES (4, 'Centre for Science and Environment', 'Non-profit', 'India');"}
{"sql_prompt": "What is the maximum number of steps taken by members, grouped by age?", "sql": "SELECT Member.Age, MAX(Wearable.Steps) FROM Wearable INNER JOIN Member ON Wearable.MemberID = Member.MemberID GROUP BY Member.Age;", "sql_context": "CREATE TABLE Wearable (DeviceID INT PRIMARY KEY, MemberID INT, Steps INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);"}
{"sql_prompt": "How many units of gluten-free products were sold in the first quarter of 2022?", "sql": "SELECT SUM(s.quantity) as total_quantity FROM Sales s JOIN Dates d ON s.date = d.date JOIN Products p ON s.product_id = p.product_id WHERE d.date BETWEEN '2022-01-01' AND '2022-03-31' AND p.is_gluten_free = TRUE;", "sql_context": "CREATE TABLE Dates (date DATE); CREATE TABLE Sales (sale_id INT, date DATE, product_id INT, quantity INT); CREATE TABLE Products (product_id INT, product_name VARCHAR(255), is_gluten_free BOOLEAN);"}
{"sql_prompt": "List all sustainable tourism initiatives in Asia and their respective marketing budgets.", "sql": "SELECT initiative, budget FROM SustainableTourism WHERE location = 'Asia';", "sql_context": "CREATE TABLE SustainableTourism (initiative VARCHAR(50), location VARCHAR(50), budget INT); INSERT INTO SustainableTourism (initiative, location, budget) VALUES ('Green Cities', 'Asia', 1000000);"}
{"sql_prompt": "Calculate the average price of 'Tilapia' in the 'sales' table.", "sql": "SELECT AVG(price) FROM sales WHERE species = 'Tilapia';", "sql_context": "CREATE TABLE sales (id INT PRIMARY KEY, vendor VARCHAR(50), quantity INT, species VARCHAR(50), price DECIMAL(5,2)); INSERT INTO sales (id, vendor, quantity, species, price) VALUES (1, 'Seafood Haven', 20, 'Salmon', 12.99), (2, 'Sea Bounty', 30, 'Tilapia', 9.49), (3, 'Sea Bounty', 15, 'Cod', 14.50);"}
{"sql_prompt": "Identify the number of artworks in the 'Cubism' genre, grouped by the artist's country of origin and the artwork's medium.", "sql": "SELECT Artist.country_of_origin, Artwork.medium, COUNT(Artwork.artwork_id) FROM Artist INNER JOIN Artwork ON Artist.artist_id = Artwork.artist_id WHERE Artwork.genre = 'Cubism' GROUP BY Artist.country_of_origin, Artwork.medium;", "sql_context": "CREATE TABLE Artwork (artwork_id INT, artwork_name VARCHAR(30), genre VARCHAR(20), artist_id INT, medium VARCHAR(20)); CREATE TABLE Artist (artist_id INT, artist_name VARCHAR(30), country_of_origin VARCHAR(30));"}
{"sql_prompt": "Delete records of crops in the Northeast region with a yield below 100 in 2021.", "sql": "DELETE FROM crops WHERE yield < 100 AND region = 'Northeast' AND year = 2021;", "sql_context": "CREATE TABLE crops (id INT, name VARCHAR(50), yield INT, acrate DECIMAL(5,2), region VARCHAR(50), year INT); INSERT INTO crops (id, name, yield, acrate, region, year) VALUES (1, 'Corn', 150, 2.3, 'Northeast', 2021), (2, 'Soybeans', 80, 1.8, 'Northeast', 2021);"}
{"sql_prompt": "What's the average age of players who play RPG games in North America?", "sql": "SELECT AVG(Players.Age) FROM Players INNER JOIN Games ON Players.Location = Games.GameName WHERE Games.Genre = 'RPG' AND Players.Location IN ('USA', 'Canada');", "sql_context": "CREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), Location VARCHAR(20)); INSERT INTO Players (PlayerID, Age, Gender, Location) VALUES (1, 30, 'Non-binary', 'USA'); INSERT INTO Players (PlayerID, Age, Gender, Location) VALUES (2, 25, 'Male', 'Canada'); CREATE TABLE Games (GameID INT, GameName VARCHAR(20), Genre VARCHAR(20)); INSERT INTO Games (GameID, GameName, Genre) VALUES (1, 'Epic Saga', 'RPG');"}
{"sql_prompt": "Which retailers have the highest average caloric content for their organic products?", "sql": "SELECT retailers.retailer_name, AVG(products.caloric_content) as avg_caloric_content FROM retailers JOIN inventory ON retailers.retailer_id = inventory.retailer_id JOIN products ON inventory.product_id = products.product_id WHERE products.is_organic = TRUE GROUP BY retailers.retailer_name ORDER BY avg_caloric_content DESC;", "sql_context": "CREATE TABLE retailers (retailer_id INT, retailer_name TEXT);CREATE TABLE products (product_id INT, product_name TEXT, is_organic BOOLEAN, caloric_content INT);CREATE TABLE inventory (retailer_id INT, product_id INT);"}
{"sql_prompt": "Insert a new cargo shipment record into the \"cargo_movements\" table", "sql": "INSERT INTO cargo_movements (id, cargo_id, vessel_id, port_id, movement_date) VALUES (12345, 67890, 111213, 14, '2022-06-15');", "sql_context": "CREATE TABLE cargo_movements (id INT PRIMARY KEY, cargo_id INT, vessel_id INT, port_id INT, movement_date DATE);"}
{"sql_prompt": "What is the percentage of vegan products in each product category?", "sql": "SELECT products.product_category, AVG(products.is_vegan) * 100.0 as percentage_vegan FROM products GROUP BY products.product_category;", "sql_context": "CREATE TABLE products (product_id INT, product_name TEXT, product_category TEXT, is_vegan BOOLEAN);"}
{"sql_prompt": "What is the average CO2 emissions for textiles sourced from Africa?", "sql": "SELECT AVG(co2_emissions) as avg_co2_emissions FROM textile_emissions WHERE region = 'Africa';", "sql_context": "CREATE TABLE textile_emissions (id INT, country VARCHAR(50), region VARCHAR(50), co2_emissions INT); INSERT INTO textile_emissions (id, country, region, co2_emissions) VALUES (1, 'Egypt', 'Africa', 6000), (2, 'Ethiopia', 'Africa', 4000), (3, 'South Africa', 'Africa', 7000), (4, 'USA', 'North America', 8000);"}
{"sql_prompt": "Which climate communication campaigns were launched in the African region between 2016 and 2018, and what was their reach?", "sql": "SELECT campaign_name, region, launch_year, reach FROM climate_communication WHERE region = 'Africa' AND launch_year BETWEEN 2016 AND 2018;", "sql_context": "CREATE TABLE climate_communication (campaign_name VARCHAR(50), region VARCHAR(50), launch_year INT, reach INT); INSERT INTO climate_communication (campaign_name, region, launch_year, reach) VALUES ('Go Green', 'Africa', 2017, 500000), ('Save the Planet', 'Africa', 2016, 700000);"}
{"sql_prompt": "What is the total number of calories burned for each member in the first quarter of 2022?", "sql": "SELECT m.id, SUM(w.calories_burned) as total_calories_burned FROM memberships m JOIN workout_data w ON m.id = w.member_id WHERE w.workout_date >= DATE '2022-01-01' AND w.workout_date < DATE '2022-04-01' GROUP BY m.id;", "sql_context": "CREATE TABLE memberships (id INT, member_type VARCHAR(50), region VARCHAR(50)); CREATE TABLE workout_data (member_id INT, workout_type VARCHAR(50), duration INT, heart_rate_avg INT, calories_burned INT, workout_date DATE);"}
{"sql_prompt": "What is the total amount of socially responsible loans issued by financial institutions in the Asia-Pacific region?", "sql": "SELECT SUM(loans.amount) FROM loans INNER JOIN financial_institutions ON loans.institution_id = financial_institutions.id WHERE loans.is_socially_responsible = true AND financial_institutions.region = 'Asia-Pacific';", "sql_context": "CREATE TABLE loans (id INT, amount DECIMAL(10, 2), issuance_date DATE, institution_id INT, is_socially_responsible BOOLEAN); INSERT INTO loans (id, amount, issuance_date, institution_id, is_socially_responsible) VALUES (1, 10000, '2022-01-01', 1, true); CREATE TABLE financial_institutions (id INT, name VARCHAR(50), region VARCHAR(20)); INSERT INTO financial_institutions (id, name, region) VALUES (1, 'Bank of Asia', 'Asia-Pacific');"}
{"sql_prompt": "Which European country has the highest obesity rate?", "sql": "SELECT Country, ObesityRate FROM Europe ORDER BY ObesityRate DESC LIMIT 1;", "sql_context": "CREATE TABLE Europe (Country VARCHAR(50), Population INT, ObesityRate FLOAT); INSERT INTO Europe (Country, Population, ObesityRate) VALUES ('Germany', 83.123456, 22.1), ('France', 66.789123, 20.5), ('United Kingdom', 67.564321, 24.9), ('Italy', 60.345678, 21.3), ('Spain', 48.987654, 23.2), ('Russia', 145.678901, 25.7), ('Poland', 38.123456, 23.9), ('Ukraine', 44.567891, 24.5), ('Netherlands', 17.234567, 21.8), ('Belgium', 11.54321, 22.4);"}
{"sql_prompt": "What is the minimum mental health score for students in each grade level?", "sql": "SELECT grade_level, MIN(mental_health_score) FROM mental_health INNER JOIN grade ON mental_health.grade_id = grade.grade_id GROUP BY grade_level;", "sql_context": "CREATE TABLE grade (grade_id INT, grade_level TEXT); CREATE TABLE mental_health (mental_health_id INT, grade_id INT, mental_health_score INT); INSERT INTO grade (grade_id, grade_level) VALUES (1, 'Kindergarten'), (2, '1st Grade'), (3, '2nd Grade'), (4, '3rd Grade'), (5, '4th Grade'); INSERT INTO mental_health (mental_health_id, grade_id, mental_health_score) VALUES (101, 1, 80), (102, 2, 85), (103, 3, 82), (104, 4, 78), (105, 5, 75);"}
{"sql_prompt": "Identify the number of members who own a wearable device by city", "sql": "SELECT member_city, COUNT(*) FROM member_profiles WHERE has_wearable = TRUE GROUP BY member_city;", "sql_context": "CREATE TABLE member_profiles (member_id INT, member_city VARCHAR(255), has_wearable BOOLEAN);"}
{"sql_prompt": "Find the total number of tickets sold for basketball games in the Pacific Northwest in 2020.", "sql": "SELECT SUM(tickets_sold) FROM basketball_games WHERE location IN ('Moda Center', 'KeyArena') AND year = 2020;", "sql_context": "CREATE TABLE basketball_games(id INT, team VARCHAR(50), location VARCHAR(50), year INT, tickets_sold INT); INSERT INTO basketball_games(id, team, location, year, tickets_sold) VALUES (1, 'Portland Trail Blazers', 'Moda Center', 2020, 765000), (2, 'Seattle SuperSonics', 'KeyArena', 2020, 600000), (3, 'Oklahoma City Thunder', 'Chesapeake Energy Arena', 2020, 550000);"}
{"sql_prompt": "Update the \"preference\" column in the \"audience_preferences\" table to \"Dislikes reading about celebrity news\" where the \"category\" is \"Entertainment\"", "sql": "UPDATE audience_preferences SET preference = 'Dislikes reading about celebrity news' WHERE category = 'Entertainment';", "sql_context": "CREATE TABLE audience_preferences (id INT, audience_id INT, category TEXT, preference TEXT);"}
{"sql_prompt": "What is the veteran unemployment rate in the state of California?", "sql": "SELECT (COUNT(*) - SUM(employed)) * 100.0 / COUNT(*) as unemployment_rate FROM veteran_employment WHERE state = 'California';", "sql_context": "CREATE TABLE veteran_employment (veteran_id INT, state VARCHAR(255), employed BOOLEAN); INSERT INTO veteran_employment (veteran_id, state, employed) VALUES (1, 'California', FALSE), (2, 'California', TRUE), (3, 'California', TRUE);"}
{"sql_prompt": "Find the total inventory cost for 'vegan' dishes across all restaurants and cafes.", "sql": "SELECT SUM(cost) FROM VeganEats WHERE item_type = 'vegan';", "sql_context": "CREATE TABLE VeganEats (location VARCHAR(20), item_type VARCHAR(15), cost DECIMAL(5,2)); INSERT INTO VeganEats (location, item_type, cost) VALUES ('GreenLeaf', 'vegan', 5.50), ('GreenLeaf', 'vegan', 4.75), ('Sprout', 'vegan', 6.25), ('EcoEats', 'vegan', 6.50);"}
{"sql_prompt": "How many drugs were approved by the EMA between 2018 and 2020 that had a total R&D expenditure of over 50 million?", "sql": "SELECT COUNT(drug_name) FROM drug_approval INNER JOIN rd_expenditure ON drug_approval.drug_name = rd_expenditure.drug_name WHERE approval_body = 'EMA' AND rd_expenditure > 50000000 AND approval_year BETWEEN 2018 AND 2020;", "sql_context": "CREATE TABLE drug_approval (drug_name VARCHAR(255), approval_body VARCHAR(255), approval_year INT); CREATE TABLE rd_expenditure (drug_name VARCHAR(255), rd_expenditure FLOAT); INSERT INTO drug_approval (drug_name, approval_body, approval_year) VALUES ('DrugA', 'FDA', 2019), ('DrugB', 'EMA', 2018), ('DrugC', 'FDA', 2020), ('DrugD', 'EMA', 2019), ('DrugE', 'EMA', 2020); INSERT INTO rd_expenditure (drug_name, rd_expenditure) VALUES ('DrugA', 40000000), ('DrugB', 60000000), ('DrugC', 30000000), ('DrugD', 55000000), ('DrugE', 70000000);"}
{"sql_prompt": "What is the most common type of crime in New York City?", "sql": "SELECT type, COUNT(*) AS count FROM crimes WHERE city = 'New_York_City' GROUP BY type ORDER BY count DESC LIMIT 1;", "sql_context": "CREATE TABLE crimes (id INT, city VARCHAR(255), type VARCHAR(255), number_of_crimes INT); INSERT INTO crimes (id, city, type, number_of_crimes) VALUES (1, 'New_York_City', 'Theft', 50000), (2, 'New_York_City', 'Assault', 30000);"}
{"sql_prompt": "What is the maximum monthly bill for prepaid mobile customers in the \"tropical\" region?", "sql": "SELECT MAX(monthly_bill) FROM prepaid_plans WHERE region = 'tropical';", "sql_context": "CREATE TABLE prepaid_plans (id INT, plan_name VARCHAR(20), region VARCHAR(10), monthly_bill INT); INSERT INTO prepaid_plans (id, plan_name, region, monthly_bill) VALUES (1, 'Basic', 'tropical', 30), (2, 'Plus', 'tropical', 40), (3, 'Premium', 'tropical', 50);"}
{"sql_prompt": "Rank teams by their average ticket sales, in descending order.", "sql": "SELECT team_id, RANK() OVER (ORDER BY AVG(sales) DESC) as rank FROM team_performance GROUP BY team_id;", "sql_context": "CREATE TABLE team_performance (team_id INT, sales INT);"}
{"sql_prompt": "Who are the top 3 cities with the most male investigative journalists in the 'reporters' table?", "sql": "SELECT city, COUNT(*) as count FROM reporters WHERE gender = 'male' AND role = 'investigative_journalist' GROUP BY city ORDER BY count DESC LIMIT 3;", "sql_context": "CREATE TABLE reporters (id INT, name VARCHAR(50), gender VARCHAR(10), age INT, role VARCHAR(20), city VARCHAR(30));"}
{"sql_prompt": "Show me the top 3 sustainable seafood options by protein content.", "sql": "SELECT * FROM SustainableSeafood ORDER BY protein DESC LIMIT 3;", "sql_context": "CREATE TABLE SustainableSeafood (id INT, name VARCHAR(50), protein INT); INSERT INTO SustainableSeafood (id, name, protein) VALUES (1, 'Albacore Tuna', 25), (2, 'Pacific Cod', 20), (3, 'Atlantic Salmon', 22), (4, 'Wild Shrimp', 18);"}
{"sql_prompt": "What is the total number of mental health parity regulations in the database?", "sql": "SELECT COUNT(*) FROM mental_health_parity;", "sql_context": "CREATE TABLE mental_health_parity (id INT, regulation VARCHAR(100), effective_date DATE); INSERT INTO mental_health_parity (id, regulation, effective_date) VALUES (1, 'Regulation 1', '2010-01-01'), (2, 'Regulation 2', '2015-01-01'), (3, 'Regulation 3', '2018-01-01');"}
{"sql_prompt": "Insert a new record into the 'community_health_workers' table with the following information: ID 789, Name 'Javier Rodriguez', Age 40, State 'TX'", "sql": "INSERT INTO community_health_workers (id, name, age, state) VALUES (789, 'Javier Rodriguez', 40, 'TX');", "sql_context": "CREATE TABLE community_health_workers (id INT, name VARCHAR(255), age INT, state VARCHAR(2));"}
{"sql_prompt": "What is the total number of species present in each Arctic country?", "sql": "SELECT Country, COUNT(DISTINCT Name) as Number_of_Species FROM Species GROUP BY Country;", "sql_context": "CREATE TABLE Country (ID INT, Name TEXT, Region TEXT); INSERT INTO Country (ID, Name, Region) VALUES (1, 'Canada', 'Arctic'); INSERT INTO Country (ID, Name, Region) VALUES (2, 'Russia', 'Arctic'); CREATE TABLE Species (ID INT, Name TEXT, Country TEXT); INSERT INTO Species (ID, Name, Country) VALUES (1, 'Species1', 'Canada'); INSERT INTO Species (ID, Name, Country) VALUES (2, 'Species2', 'Canada'); INSERT INTO Species (ID, Name, Country) VALUES (3, 'Species3', 'Russia');"}
{"sql_prompt": "Calculate the total number of workplaces by industry, differentiating between union and non-union workplaces", "sql": "SELECT industry, union_status, COUNT(*) as 'Total Workplaces' FROM workplaces GROUP BY industry, union_status;", "sql_context": "CREATE TABLE workplaces (id INT, name VARCHAR(255), industry VARCHAR(255), union_status VARCHAR(255), num_employees INT); INSERT INTO workplaces (id, name, industry, union_status, num_employees) VALUES (1, 'ABC Company', 'Manufacturing', 'Union', 500), (2, 'XYZ Corporation', 'Manufacturing', 'Non-Union', 250), (3, 'DEF Industries', 'Retail', 'Union', 300), (4, 'GHI Company', 'Retail', 'Non-Union', 150), (5, 'JKL Industries', 'Construction', 'Union', 200);"}
{"sql_prompt": "Find the number of patients without health insurance in each rural region in the United States.", "sql": "SELECT regions.country, regions.region, COUNT(patients.id) FROM patients INNER JOIN regions ON 1=1 WHERE patients.is_rural = true AND patients.has_insurance = false GROUP BY regions.country, regions.region;", "sql_context": "CREATE TABLE patients (id INT, has_insurance BOOLEAN, is_rural BOOLEAN); INSERT INTO patients (id, has_insurance, is_rural) VALUES (1, false, true), (2, true, false); CREATE TABLE regions (id INT, region VARCHAR, country VARCHAR); INSERT INTO regions (id, region, country) VALUES (1, 'Northeast', 'USA'), (2, 'Midwest', 'USA');"}
{"sql_prompt": "What is the health equity metric trend for the past year?", "sql": "SELECT date, metric FROM health_equity_metrics ORDER BY date;", "sql_context": "CREATE TABLE health_equity_metrics (date DATE, metric FLOAT); INSERT INTO health_equity_metrics (date, metric) VALUES ('2021-01-01', 78.5), ('2021-02-01', 79.2), ('2021-03-01', 80.1), ('2021-04-01', 81.0), ('2021-05-01', 81.5), ('2021-06-01', 82.0), ('2021-07-01', 82.5), ('2021-08-01', 82.8), ('2021-09-01', 83.1), ('2021-10-01', 83.4), ('2021-11-01', 83.7), ('2021-12-01', 84.0);"}
{"sql_prompt": "What is the total claim amount for policies in the 'life_insurance' table for male policyholders?", "sql": "SELECT SUM(claim_amount) FROM life_insurance WHERE policyholder_gender = 'Male';", "sql_context": "CREATE TABLE life_insurance (policy_id INT, policyholder_gender VARCHAR(10), claim_amount DECIMAL(10,2)); INSERT INTO life_insurance (policy_id, policyholder_gender, claim_amount) VALUES (1, 'Male', 500.00), (2, 'Female', 750.00), (3, 'Male', 1000.00), (4, 'Female', 250.00);"}
